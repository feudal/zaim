/*!
 * jQuery JavaScript Library v3.6.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2021-03-02T17:08Z
 */
!function(t,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,(function(t,e){"use strict";var i=[],n=Object.getPrototypeOf,o=i.slice,s=i.flat?function(t){return i.flat.call(t)}:function(t){return i.concat.apply([],t)},r=i.push,a=i.indexOf,l={},c=l.toString,d=l.hasOwnProperty,u=d.toString,h=u.call(Object),p={},f=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType&&"function"!=typeof t.item},g=function(t){return null!=t&&t===t.window},m=t.document,y={type:!0,src:!0,nonce:!0,noModule:!0};function b(t,e,i){var n,o,s=(i=i||m).createElement("script");if(s.text=t,e)for(n in y)(o=e[n]||e.getAttribute&&e.getAttribute(n))&&s.setAttribute(n,o);i.head.appendChild(s).parentNode.removeChild(s)}function v(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?l[c.call(t)]||"object":typeof t}var x=function(t,e){return new x.fn.init(t,e)};function _(t){var e=!!t&&"length"in t&&t.length,i=v(t);return!f(t)&&!g(t)&&("array"===i||0===e||"number"==typeof e&&e>0&&e-1 in t)}x.fn=x.prototype={jquery:"3.6.0",constructor:x,length:0,toArray:function(){return o.call(this)},get:function(t){return null==t?o.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=x.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return x.each(this,t)},map:function(t){return this.pushStack(x.map(this,(function(e,i){return t.call(e,i,e)})))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(x.grep(this,(function(t,e){return(e+1)%2})))},odd:function(){return this.pushStack(x.grep(this,(function(t,e){return e%2})))},eq:function(t){var e=this.length,i=+t+(t<0?e:0);return this.pushStack(i>=0&&i<e?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:r,sort:i.sort,splice:i.splice},x.extend=x.fn.extend=function(){var t,e,i,n,o,s,r=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof r&&(c=r,r=arguments[a]||{},a++),"object"==typeof r||f(r)||(r={}),a===l&&(r=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)n=t[e],"__proto__"!==e&&r!==n&&(c&&n&&(x.isPlainObject(n)||(o=Array.isArray(n)))?(i=r[e],s=o&&!Array.isArray(i)?[]:o||x.isPlainObject(i)?i:{},o=!1,r[e]=x.extend(c,s,n)):void 0!==n&&(r[e]=n));return r},x.extend({expando:"jQuery"+("3.6.0"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,i;return!(!t||"[object Object]"!==c.call(t))&&(!(e=n(t))||"function"==typeof(i=d.call(e,"constructor")&&e.constructor)&&u.call(i)===h)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,i){b(t,{nonce:e&&e.nonce},i)},each:function(t,e){var i,n=0;if(_(t))for(i=t.length;n<i&&!1!==e.call(t[n],n,t[n]);n++);else for(n in t)if(!1===e.call(t[n],n,t[n]))break;return t},makeArray:function(t,e){var i=e||[];return null!=t&&(_(Object(t))?x.merge(i,"string"==typeof t?[t]:t):r.call(i,t)),i},inArray:function(t,e,i){return null==e?-1:a.call(e,t,i)},merge:function(t,e){for(var i=+e.length,n=0,o=t.length;n<i;n++)t[o++]=e[n];return t.length=o,t},grep:function(t,e,i){for(var n=[],o=0,s=t.length,r=!i;o<s;o++)!e(t[o],o)!==r&&n.push(t[o]);return n},map:function(t,e,i){var n,o,r=0,a=[];if(_(t))for(n=t.length;r<n;r++)null!=(o=e(t[r],r,i))&&a.push(o);else for(r in t)null!=(o=e(t[r],r,i))&&a.push(o);return s(a)},guid:1,support:p}),"function"==typeof Symbol&&(x.fn[Symbol.iterator]=i[Symbol.iterator]),x.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){l["[object "+e+"]"]=e.toLowerCase()}));var w=
/*!
 * Sizzle CSS Selector Engine v2.3.6
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2021-02-16
 */
function(t){var e,i,n,o,s,r,a,l,c,d,u,h,p,f,g,m,y,b,v,x="sizzle"+1*new Date,_=t.document,w=0,k=0,S=lt(),T=lt(),C=lt(),M=lt(),D=function(t,e){return t===e&&(u=!0),0},A={}.hasOwnProperty,P=[],O=P.pop,E=P.push,L=P.push,$=P.slice,R=function(t,e){for(var i=0,n=t.length;i<n;i++)if(t[i]===e)return i;return-1},I="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",N="[\\x20\\t\\r\\n\\f]",j="(?:\\\\[\\da-fA-F]{1,6}"+N+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",z="\\["+N+"*("+j+")(?:"+N+"*([*^$|!~]?=)"+N+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+j+"))|)"+N+"*\\]",H=":("+j+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+z+")*)|.*)\\)|)",F=new RegExp(N+"+","g"),W=new RegExp("^"+N+"+|((?:^|[^\\\\])(?:\\\\.)*)"+N+"+$","g"),B=new RegExp("^"+N+"*,"+N+"*"),V=new RegExp("^"+N+"*([>+~]|"+N+")"+N+"*"),q=new RegExp(N+"|>"),Y=new RegExp(H),U=new RegExp("^"+j+"$"),X={ID:new RegExp("^#("+j+")"),CLASS:new RegExp("^\\.("+j+")"),TAG:new RegExp("^("+j+"|[*])"),ATTR:new RegExp("^"+z),PSEUDO:new RegExp("^"+H),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+N+"*(even|odd|(([+-]|)(\\d*)n|)"+N+"*(?:([+-]|)"+N+"*(\\d+)|))"+N+"*\\)|)","i"),bool:new RegExp("^(?:"+I+")$","i"),needsContext:new RegExp("^"+N+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+N+"*((?:-\\d)?\\d*)"+N+"*\\)|)(?=[^-]|$)","i")},K=/HTML$/i,G=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,tt=/[+~]/,et=new RegExp("\\\\[\\da-fA-F]{1,6}"+N+"?|\\\\([^\\r\\n\\f])","g"),it=function(t,e){var i="0x"+t.slice(1)-65536;return e||(i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320))},nt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ot=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},st=function(){h()},rt=xt((function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{L.apply(P=$.call(_.childNodes),_.childNodes),P[_.childNodes.length].nodeType}catch(t){L={apply:P.length?function(t,e){E.apply(t,$.call(e))}:function(t,e){for(var i=t.length,n=0;t[i++]=e[n++];);t.length=i-1}}}function at(t,e,n,o){var s,a,c,d,u,f,y,b=e&&e.ownerDocument,_=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==_&&9!==_&&11!==_)return n;if(!o&&(h(e),e=e||p,g)){if(11!==_&&(u=Z.exec(t)))if(s=u[1]){if(9===_){if(!(c=e.getElementById(s)))return n;if(c.id===s)return n.push(c),n}else if(b&&(c=b.getElementById(s))&&v(e,c)&&c.id===s)return n.push(c),n}else{if(u[2])return L.apply(n,e.getElementsByTagName(t)),n;if((s=u[3])&&i.getElementsByClassName&&e.getElementsByClassName)return L.apply(n,e.getElementsByClassName(s)),n}if(i.qsa&&!M[t+" "]&&(!m||!m.test(t))&&(1!==_||"object"!==e.nodeName.toLowerCase())){if(y=t,b=e,1===_&&(q.test(t)||V.test(t))){for((b=tt.test(t)&&yt(e.parentNode)||e)===e&&i.scope||((d=e.getAttribute("id"))?d=d.replace(nt,ot):e.setAttribute("id",d=x)),a=(f=r(t)).length;a--;)f[a]=(d?"#"+d:":scope")+" "+vt(f[a]);y=f.join(",")}try{return L.apply(n,b.querySelectorAll(y)),n}catch(e){M(t,!0)}finally{d===x&&e.removeAttribute("id")}}}return l(t.replace(W,"$1"),e,n,o)}function lt(){var t=[];return function e(i,o){return t.push(i+" ")>n.cacheLength&&delete e[t.shift()],e[i+" "]=o}}function ct(t){return t[x]=!0,t}function dt(t){var e=p.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ut(t,e){for(var i=t.split("|"),o=i.length;o--;)n.attrHandle[i[o]]=e}function ht(t,e){var i=e&&t,n=i&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function pt(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function ft(t){return function(e){var i=e.nodeName.toLowerCase();return("input"===i||"button"===i)&&e.type===t}}function gt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&rt(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function mt(t){return ct((function(e){return e=+e,ct((function(i,n){for(var o,s=t([],i.length,e),r=s.length;r--;)i[o=s[r]]&&(i[o]=!(n[o]=i[o]))}))}))}function yt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in i=at.support={},s=at.isXML=function(t){var e=t&&t.namespaceURI,i=t&&(t.ownerDocument||t).documentElement;return!K.test(e||i&&i.nodeName||"HTML")},h=at.setDocument=function(t){var e,o,r=t?t.ownerDocument||t:_;return r!=p&&9===r.nodeType&&r.documentElement?(f=(p=r).documentElement,g=!s(p),_!=p&&(o=p.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",st,!1):o.attachEvent&&o.attachEvent("onunload",st)),i.scope=dt((function(t){return f.appendChild(t).appendChild(p.createElement("div")),void 0!==t.querySelectorAll&&!t.querySelectorAll(":scope fieldset div").length})),i.attributes=dt((function(t){return t.className="i",!t.getAttribute("className")})),i.getElementsByTagName=dt((function(t){return t.appendChild(p.createComment("")),!t.getElementsByTagName("*").length})),i.getElementsByClassName=J.test(p.getElementsByClassName),i.getById=dt((function(t){return f.appendChild(t).id=x,!p.getElementsByName||!p.getElementsByName(x).length})),i.getById?(n.filter.ID=function(t){var e=t.replace(et,it);return function(t){return t.getAttribute("id")===e}},n.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var i=e.getElementById(t);return i?[i]:[]}}):(n.filter.ID=function(t){var e=t.replace(et,it);return function(t){var i=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return i&&i.value===e}},n.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var i,n,o,s=e.getElementById(t);if(s){if((i=s.getAttributeNode("id"))&&i.value===t)return[s];for(o=e.getElementsByName(t),n=0;s=o[n++];)if((i=s.getAttributeNode("id"))&&i.value===t)return[s]}return[]}}),n.find.TAG=i.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):i.qsa?e.querySelectorAll(t):void 0}:function(t,e){var i,n=[],o=0,s=e.getElementsByTagName(t);if("*"===t){for(;i=s[o++];)1===i.nodeType&&n.push(i);return n}return s},n.find.CLASS=i.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&g)return e.getElementsByClassName(t)},y=[],m=[],(i.qsa=J.test(p.querySelectorAll))&&(dt((function(t){var e;f.appendChild(t).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+N+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||m.push("\\["+N+"*(?:value|"+I+")"),t.querySelectorAll("[id~="+x+"-]").length||m.push("~="),(e=p.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||m.push("\\["+N+"*name"+N+"*="+N+"*(?:''|\"\")"),t.querySelectorAll(":checked").length||m.push(":checked"),t.querySelectorAll("a#"+x+"+*").length||m.push(".#.+[+~]"),t.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]")})),dt((function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=p.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&m.push("name"+N+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),f.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),m.push(",.*:")}))),(i.matchesSelector=J.test(b=f.matches||f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&dt((function(t){i.disconnectedMatch=b.call(t,"*"),b.call(t,"[s!='']:x"),y.push("!=",H)})),m=m.length&&new RegExp(m.join("|")),y=y.length&&new RegExp(y.join("|")),e=J.test(f.compareDocumentPosition),v=e||J.test(f.contains)?function(t,e){var i=9===t.nodeType?t.documentElement:t,n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},D=e?function(t,e){if(t===e)return u=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!i.sortDetached&&e.compareDocumentPosition(t)===n?t==p||t.ownerDocument==_&&v(_,t)?-1:e==p||e.ownerDocument==_&&v(_,e)?1:d?R(d,t)-R(d,e):0:4&n?-1:1)}:function(t,e){if(t===e)return u=!0,0;var i,n=0,o=t.parentNode,s=e.parentNode,r=[t],a=[e];if(!o||!s)return t==p?-1:e==p?1:o?-1:s?1:d?R(d,t)-R(d,e):0;if(o===s)return ht(t,e);for(i=t;i=i.parentNode;)r.unshift(i);for(i=e;i=i.parentNode;)a.unshift(i);for(;r[n]===a[n];)n++;return n?ht(r[n],a[n]):r[n]==_?-1:a[n]==_?1:0},p):p},at.matches=function(t,e){return at(t,null,null,e)},at.matchesSelector=function(t,e){if(h(t),i.matchesSelector&&g&&!M[e+" "]&&(!y||!y.test(e))&&(!m||!m.test(e)))try{var n=b.call(t,e);if(n||i.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){M(e,!0)}return at(e,p,null,[t]).length>0},at.contains=function(t,e){return(t.ownerDocument||t)!=p&&h(t),v(t,e)},at.attr=function(t,e){(t.ownerDocument||t)!=p&&h(t);var o=n.attrHandle[e.toLowerCase()],s=o&&A.call(n.attrHandle,e.toLowerCase())?o(t,e,!g):void 0;return void 0!==s?s:i.attributes||!g?t.getAttribute(e):(s=t.getAttributeNode(e))&&s.specified?s.value:null},at.escape=function(t){return(t+"").replace(nt,ot)},at.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},at.uniqueSort=function(t){var e,n=[],o=0,s=0;if(u=!i.detectDuplicates,d=!i.sortStable&&t.slice(0),t.sort(D),u){for(;e=t[s++];)e===t[s]&&(o=n.push(s));for(;o--;)t.splice(n[o],1)}return d=null,t},o=at.getText=function(t){var e,i="",n=0,s=t.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=o(t)}else if(3===s||4===s)return t.nodeValue}else for(;e=t[n++];)i+=o(e);return i},(n=at.selectors={cacheLength:50,createPseudo:ct,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(et,it),t[3]=(t[3]||t[4]||t[5]||"").replace(et,it),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||at.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&at.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return X.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&Y.test(i)&&(e=r(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(et,it).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=S[t+" "];return e||(e=new RegExp("(^|"+N+")"+t+"("+N+"|$)"))&&S(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,i){return function(n){var o=at.attr(n,t);return null==o?"!="===e:!e||(o+="","="===e?o===i:"!="===e?o!==i:"^="===e?i&&0===o.indexOf(i):"*="===e?i&&o.indexOf(i)>-1:"$="===e?i&&o.slice(-i.length)===i:"~="===e?(" "+o.replace(F," ")+" ").indexOf(i)>-1:"|="===e&&(o===i||o.slice(0,i.length+1)===i+"-"))}},CHILD:function(t,e,i,n,o){var s="nth"!==t.slice(0,3),r="last"!==t.slice(-4),a="of-type"===e;return 1===n&&0===o?function(t){return!!t.parentNode}:function(e,i,l){var c,d,u,h,p,f,g=s!==r?"nextSibling":"previousSibling",m=e.parentNode,y=a&&e.nodeName.toLowerCase(),b=!l&&!a,v=!1;if(m){if(s){for(;g;){for(h=e;h=h[g];)if(a?h.nodeName.toLowerCase()===y:1===h.nodeType)return!1;f=g="only"===t&&!f&&"nextSibling"}return!0}if(f=[r?m.firstChild:m.lastChild],r&&b){for(v=(p=(c=(d=(u=(h=m)[x]||(h[x]={}))[h.uniqueID]||(u[h.uniqueID]={}))[t]||[])[0]===w&&c[1])&&c[2],h=p&&m.childNodes[p];h=++p&&h&&h[g]||(v=p=0)||f.pop();)if(1===h.nodeType&&++v&&h===e){d[t]=[w,p,v];break}}else if(b&&(v=p=(c=(d=(u=(h=e)[x]||(h[x]={}))[h.uniqueID]||(u[h.uniqueID]={}))[t]||[])[0]===w&&c[1]),!1===v)for(;(h=++p&&h&&h[g]||(v=p=0)||f.pop())&&((a?h.nodeName.toLowerCase()!==y:1!==h.nodeType)||!++v||(b&&((d=(u=h[x]||(h[x]={}))[h.uniqueID]||(u[h.uniqueID]={}))[t]=[w,v]),h!==e)););return(v-=o)===n||v%n==0&&v/n>=0}}},PSEUDO:function(t,e){var i,o=n.pseudos[t]||n.setFilters[t.toLowerCase()]||at.error("unsupported pseudo: "+t);return o[x]?o(e):o.length>1?(i=[t,t,"",e],n.setFilters.hasOwnProperty(t.toLowerCase())?ct((function(t,i){for(var n,s=o(t,e),r=s.length;r--;)t[n=R(t,s[r])]=!(i[n]=s[r])})):function(t){return o(t,0,i)}):o}},pseudos:{not:ct((function(t){var e=[],i=[],n=a(t.replace(W,"$1"));return n[x]?ct((function(t,e,i,o){for(var s,r=n(t,null,o,[]),a=t.length;a--;)(s=r[a])&&(t[a]=!(e[a]=s))})):function(t,o,s){return e[0]=t,n(e,null,s,i),e[0]=null,!i.pop()}})),has:ct((function(t){return function(e){return at(t,e).length>0}})),contains:ct((function(t){return t=t.replace(et,it),function(e){return(e.textContent||o(e)).indexOf(t)>-1}})),lang:ct((function(t){return U.test(t||"")||at.error("unsupported lang: "+t),t=t.replace(et,it).toLowerCase(),function(e){var i;do{if(i=g?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(i=i.toLowerCase())===t||0===i.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(e){var i=t.location&&t.location.hash;return i&&i.slice(1)===e.id},root:function(t){return t===f},focus:function(t){return t===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:gt(!1),disabled:gt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!n.pseudos.empty(t)},header:function(t){return Q.test(t.nodeName)},input:function(t){return G.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:mt((function(){return[0]})),last:mt((function(t,e){return[e-1]})),eq:mt((function(t,e,i){return[i<0?i+e:i]})),even:mt((function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t})),odd:mt((function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t})),lt:mt((function(t,e,i){for(var n=i<0?i+e:i>e?e:i;--n>=0;)t.push(n);return t})),gt:mt((function(t,e,i){for(var n=i<0?i+e:i;++n<e;)t.push(n);return t}))}}).pseudos.nth=n.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})n.pseudos[e]=pt(e);for(e in{submit:!0,reset:!0})n.pseudos[e]=ft(e);function bt(){}function vt(t){for(var e=0,i=t.length,n="";e<i;e++)n+=t[e].value;return n}function xt(t,e,i){var n=e.dir,o=e.next,s=o||n,r=i&&"parentNode"===s,a=k++;return e.first?function(e,i,o){for(;e=e[n];)if(1===e.nodeType||r)return t(e,i,o);return!1}:function(e,i,l){var c,d,u,h=[w,a];if(l){for(;e=e[n];)if((1===e.nodeType||r)&&t(e,i,l))return!0}else for(;e=e[n];)if(1===e.nodeType||r)if(d=(u=e[x]||(e[x]={}))[e.uniqueID]||(u[e.uniqueID]={}),o&&o===e.nodeName.toLowerCase())e=e[n]||e;else{if((c=d[s])&&c[0]===w&&c[1]===a)return h[2]=c[2];if(d[s]=h,h[2]=t(e,i,l))return!0}return!1}}function _t(t){return t.length>1?function(e,i,n){for(var o=t.length;o--;)if(!t[o](e,i,n))return!1;return!0}:t[0]}function wt(t,e,i,n,o){for(var s,r=[],a=0,l=t.length,c=null!=e;a<l;a++)(s=t[a])&&(i&&!i(s,n,o)||(r.push(s),c&&e.push(a)));return r}function kt(t,e,i,n,o,s){return n&&!n[x]&&(n=kt(n)),o&&!o[x]&&(o=kt(o,s)),ct((function(s,r,a,l){var c,d,u,h=[],p=[],f=r.length,g=s||function(t,e,i){for(var n=0,o=e.length;n<o;n++)at(t,e[n],i);return i}(e||"*",a.nodeType?[a]:a,[]),m=!t||!s&&e?g:wt(g,h,t,a,l),y=i?o||(s?t:f||n)?[]:r:m;if(i&&i(m,y,a,l),n)for(c=wt(y,p),n(c,[],a,l),d=c.length;d--;)(u=c[d])&&(y[p[d]]=!(m[p[d]]=u));if(s){if(o||t){if(o){for(c=[],d=y.length;d--;)(u=y[d])&&c.push(m[d]=u);o(null,y=[],c,l)}for(d=y.length;d--;)(u=y[d])&&(c=o?R(s,u):h[d])>-1&&(s[c]=!(r[c]=u))}}else y=wt(y===r?y.splice(f,y.length):y),o?o(null,r,y,l):L.apply(r,y)}))}function St(t){for(var e,i,o,s=t.length,r=n.relative[t[0].type],a=r||n.relative[" "],l=r?1:0,d=xt((function(t){return t===e}),a,!0),u=xt((function(t){return R(e,t)>-1}),a,!0),h=[function(t,i,n){var o=!r&&(n||i!==c)||((e=i).nodeType?d(t,i,n):u(t,i,n));return e=null,o}];l<s;l++)if(i=n.relative[t[l].type])h=[xt(_t(h),i)];else{if((i=n.filter[t[l].type].apply(null,t[l].matches))[x]){for(o=++l;o<s&&!n.relative[t[o].type];o++);return kt(l>1&&_t(h),l>1&&vt(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(W,"$1"),i,l<o&&St(t.slice(l,o)),o<s&&St(t=t.slice(o)),o<s&&vt(t))}h.push(i)}return _t(h)}return bt.prototype=n.filters=n.pseudos,n.setFilters=new bt,r=at.tokenize=function(t,e){var i,o,s,r,a,l,c,d=T[t+" "];if(d)return e?0:d.slice(0);for(a=t,l=[],c=n.preFilter;a;){for(r in i&&!(o=B.exec(a))||(o&&(a=a.slice(o[0].length)||a),l.push(s=[])),i=!1,(o=V.exec(a))&&(i=o.shift(),s.push({value:i,type:o[0].replace(W," ")}),a=a.slice(i.length)),n.filter)!(o=X[r].exec(a))||c[r]&&!(o=c[r](o))||(i=o.shift(),s.push({value:i,type:r,matches:o}),a=a.slice(i.length));if(!i)break}return e?a.length:a?at.error(t):T(t,l).slice(0)},a=at.compile=function(t,e){var i,o=[],s=[],a=C[t+" "];if(!a){for(e||(e=r(t)),i=e.length;i--;)(a=St(e[i]))[x]?o.push(a):s.push(a);(a=C(t,function(t,e){var i=e.length>0,o=t.length>0,s=function(s,r,a,l,d){var u,f,m,y=0,b="0",v=s&&[],x=[],_=c,k=s||o&&n.find.TAG("*",d),S=w+=null==_?1:Math.random()||.1,T=k.length;for(d&&(c=r==p||r||d);b!==T&&null!=(u=k[b]);b++){if(o&&u){for(f=0,r||u.ownerDocument==p||(h(u),a=!g);m=t[f++];)if(m(u,r||p,a)){l.push(u);break}d&&(w=S)}i&&((u=!m&&u)&&y--,s&&v.push(u))}if(y+=b,i&&b!==y){for(f=0;m=e[f++];)m(v,x,r,a);if(s){if(y>0)for(;b--;)v[b]||x[b]||(x[b]=O.call(l));x=wt(x)}L.apply(l,x),d&&!s&&x.length>0&&y+e.length>1&&at.uniqueSort(l)}return d&&(w=S,c=_),v};return i?ct(s):s}(s,o))).selector=t}return a},l=at.select=function(t,e,i,o){var s,l,c,d,u,h="function"==typeof t&&t,p=!o&&r(t=h.selector||t);if(i=i||[],1===p.length){if((l=p[0]=p[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===e.nodeType&&g&&n.relative[l[1].type]){if(!(e=(n.find.ID(c.matches[0].replace(et,it),e)||[])[0]))return i;h&&(e=e.parentNode),t=t.slice(l.shift().value.length)}for(s=X.needsContext.test(t)?0:l.length;s--&&(c=l[s],!n.relative[d=c.type]);)if((u=n.find[d])&&(o=u(c.matches[0].replace(et,it),tt.test(l[0].type)&&yt(e.parentNode)||e))){if(l.splice(s,1),!(t=o.length&&vt(l)))return L.apply(i,o),i;break}}return(h||a(t,p))(o,e,!g,i,!e||tt.test(t)&&yt(e.parentNode)||e),i},i.sortStable=x.split("").sort(D).join("")===x,i.detectDuplicates=!!u,h(),i.sortDetached=dt((function(t){return 1&t.compareDocumentPosition(p.createElement("fieldset"))})),dt((function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")}))||ut("type|href|height|width",(function(t,e,i){if(!i)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)})),i.attributes&&dt((function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")}))||ut("value",(function(t,e,i){if(!i&&"input"===t.nodeName.toLowerCase())return t.defaultValue})),dt((function(t){return null==t.getAttribute("disabled")}))||ut(I,(function(t,e,i){var n;if(!i)return!0===t[e]?e.toLowerCase():(n=t.getAttributeNode(e))&&n.specified?n.value:null})),at}(t);x.find=w,x.expr=w.selectors,x.expr[":"]=x.expr.pseudos,x.uniqueSort=x.unique=w.uniqueSort,x.text=w.getText,x.isXMLDoc=w.isXML,x.contains=w.contains,x.escapeSelector=w.escape;var k=function(t,e,i){for(var n=[],o=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&x(t).is(i))break;n.push(t)}return n},S=function(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i},T=x.expr.match.needsContext;function C(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var M=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function D(t,e,i){return f(e)?x.grep(t,(function(t,n){return!!e.call(t,n,t)!==i})):e.nodeType?x.grep(t,(function(t){return t===e!==i})):"string"!=typeof e?x.grep(t,(function(t){return a.call(e,t)>-1!==i})):x.filter(e,t,i)}x.filter=function(t,e,i){var n=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===n.nodeType?x.find.matchesSelector(n,t)?[n]:[]:x.find.matches(t,x.grep(e,(function(t){return 1===t.nodeType})))},x.fn.extend({find:function(t){var e,i,n=this.length,o=this;if("string"!=typeof t)return this.pushStack(x(t).filter((function(){for(e=0;e<n;e++)if(x.contains(o[e],this))return!0})));for(i=this.pushStack([]),e=0;e<n;e++)x.find(t,o[e],i);return n>1?x.uniqueSort(i):i},filter:function(t){return this.pushStack(D(this,t||[],!1))},not:function(t){return this.pushStack(D(this,t||[],!0))},is:function(t){return!!D(this,"string"==typeof t&&T.test(t)?x(t):t||[],!1).length}});var A,P=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(x.fn.init=function(t,e,i){var n,o;if(!t)return this;if(i=i||A,"string"==typeof t){if(!(n="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:P.exec(t))||!n[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof x?e[0]:e,x.merge(this,x.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:m,!0)),M.test(n[1])&&x.isPlainObject(e))for(n in e)f(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return(o=m.getElementById(n[2]))&&(this[0]=o,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):f(t)?void 0!==i.ready?i.ready(t):t(x):x.makeArray(t,this)}).prototype=x.fn,A=x(m);var O=/^(?:parents|prev(?:Until|All))/,E={children:!0,contents:!0,next:!0,prev:!0};function L(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}x.fn.extend({has:function(t){var e=x(t,this),i=e.length;return this.filter((function(){for(var t=0;t<i;t++)if(x.contains(this,e[t]))return!0}))},closest:function(t,e){var i,n=0,o=this.length,s=[],r="string"!=typeof t&&x(t);if(!T.test(t))for(;n<o;n++)for(i=this[n];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(r?r.index(i)>-1:1===i.nodeType&&x.find.matchesSelector(i,t))){s.push(i);break}return this.pushStack(s.length>1?x.uniqueSort(s):s)},index:function(t){return t?"string"==typeof t?a.call(x(t),this[0]):a.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(x.uniqueSort(x.merge(this.get(),x(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),x.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return k(t,"parentNode")},parentsUntil:function(t,e,i){return k(t,"parentNode",i)},next:function(t){return L(t,"nextSibling")},prev:function(t){return L(t,"previousSibling")},nextAll:function(t){return k(t,"nextSibling")},prevAll:function(t){return k(t,"previousSibling")},nextUntil:function(t,e,i){return k(t,"nextSibling",i)},prevUntil:function(t,e,i){return k(t,"previousSibling",i)},siblings:function(t){return S((t.parentNode||{}).firstChild,t)},children:function(t){return S(t.firstChild)},contents:function(t){return null!=t.contentDocument&&n(t.contentDocument)?t.contentDocument:(C(t,"template")&&(t=t.content||t),x.merge([],t.childNodes))}},(function(t,e){x.fn[t]=function(i,n){var o=x.map(this,e,i);return"Until"!==t.slice(-5)&&(n=i),n&&"string"==typeof n&&(o=x.filter(n,o)),this.length>1&&(E[t]||x.uniqueSort(o),O.test(t)&&o.reverse()),this.pushStack(o)}}));var $=/[^\x20\t\r\n\f]+/g;function R(t){return t}function I(t){throw t}function N(t,e,i,n){var o;try{t&&f(o=t.promise)?o.call(t).done(e).fail(i):t&&f(o=t.then)?o.call(t,e,i):e.apply(void 0,[t].slice(n))}catch(t){i.apply(void 0,[t])}}x.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return x.each(t.match($)||[],(function(t,i){e[i]=!0})),e}(t):x.extend({},t);var e,i,n,o,s=[],r=[],a=-1,l=function(){for(o=o||t.once,n=e=!0;r.length;a=-1)for(i=r.shift();++a<s.length;)!1===s[a].apply(i[0],i[1])&&t.stopOnFalse&&(a=s.length,i=!1);t.memory||(i=!1),e=!1,o&&(s=i?[]:"")},c={add:function(){return s&&(i&&!e&&(a=s.length-1,r.push(i)),function e(i){x.each(i,(function(i,n){f(n)?t.unique&&c.has(n)||s.push(n):n&&n.length&&"string"!==v(n)&&e(n)}))}(arguments),i&&!e&&l()),this},remove:function(){return x.each(arguments,(function(t,e){for(var i;(i=x.inArray(e,s,i))>-1;)s.splice(i,1),i<=a&&a--})),this},has:function(t){return t?x.inArray(t,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return o=r=[],s=i="",this},disabled:function(){return!s},lock:function(){return o=r=[],i||e||(s=i=""),this},locked:function(){return!!o},fireWith:function(t,i){return o||(i=[t,(i=i||[]).slice?i.slice():i],r.push(i),e||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!n}};return c},x.extend({Deferred:function(e){var i=[["notify","progress",x.Callbacks("memory"),x.Callbacks("memory"),2],["resolve","done",x.Callbacks("once memory"),x.Callbacks("once memory"),0,"resolved"],["reject","fail",x.Callbacks("once memory"),x.Callbacks("once memory"),1,"rejected"]],n="pending",o={state:function(){return n},always:function(){return s.done(arguments).fail(arguments),this},catch:function(t){return o.then(null,t)},pipe:function(){var t=arguments;return x.Deferred((function(e){x.each(i,(function(i,n){var o=f(t[n[4]])&&t[n[4]];s[n[1]]((function(){var t=o&&o.apply(this,arguments);t&&f(t.promise)?t.promise().progress(e.notify).done(e.resolve).fail(e.reject):e[n[0]+"With"](this,o?[t]:arguments)}))})),t=null})).promise()},then:function(e,n,o){var s=0;function r(e,i,n,o){return function(){var a=this,l=arguments,c=function(){var t,c;if(!(e<s)){if((t=n.apply(a,l))===i.promise())throw new TypeError("Thenable self-resolution");c=t&&("object"==typeof t||"function"==typeof t)&&t.then,f(c)?o?c.call(t,r(s,i,R,o),r(s,i,I,o)):(s++,c.call(t,r(s,i,R,o),r(s,i,I,o),r(s,i,R,i.notifyWith))):(n!==R&&(a=void 0,l=[t]),(o||i.resolveWith)(a,l))}},d=o?c:function(){try{c()}catch(t){x.Deferred.exceptionHook&&x.Deferred.exceptionHook(t,d.stackTrace),e+1>=s&&(n!==I&&(a=void 0,l=[t]),i.rejectWith(a,l))}};e?d():(x.Deferred.getStackHook&&(d.stackTrace=x.Deferred.getStackHook()),t.setTimeout(d))}}return x.Deferred((function(t){i[0][3].add(r(0,t,f(o)?o:R,t.notifyWith)),i[1][3].add(r(0,t,f(e)?e:R)),i[2][3].add(r(0,t,f(n)?n:I))})).promise()},promise:function(t){return null!=t?x.extend(t,o):o}},s={};return x.each(i,(function(t,e){var r=e[2],a=e[5];o[e[1]]=r.add,a&&r.add((function(){n=a}),i[3-t][2].disable,i[3-t][3].disable,i[0][2].lock,i[0][3].lock),r.add(e[3].fire),s[e[0]]=function(){return s[e[0]+"With"](this===s?void 0:this,arguments),this},s[e[0]+"With"]=r.fireWith})),o.promise(s),e&&e.call(s,s),s},when:function(t){var e=arguments.length,i=e,n=Array(i),s=o.call(arguments),r=x.Deferred(),a=function(t){return function(i){n[t]=this,s[t]=arguments.length>1?o.call(arguments):i,--e||r.resolveWith(n,s)}};if(e<=1&&(N(t,r.done(a(i)).resolve,r.reject,!e),"pending"===r.state()||f(s[i]&&s[i].then)))return r.then();for(;i--;)N(s[i],a(i),r.reject);return r.promise()}});var j=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;x.Deferred.exceptionHook=function(e,i){t.console&&t.console.warn&&e&&j.test(e.name)&&t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,i)},x.readyException=function(e){t.setTimeout((function(){throw e}))};var z=x.Deferred();function H(){m.removeEventListener("DOMContentLoaded",H),t.removeEventListener("load",H),x.ready()}x.fn.ready=function(t){return z.then(t).catch((function(t){x.readyException(t)})),this},x.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--x.readyWait:x.isReady)||(x.isReady=!0,!0!==t&&--x.readyWait>0||z.resolveWith(m,[x]))}}),x.ready.then=z.then,"complete"===m.readyState||"loading"!==m.readyState&&!m.documentElement.doScroll?t.setTimeout(x.ready):(m.addEventListener("DOMContentLoaded",H),t.addEventListener("load",H));var F=function(t,e,i,n,o,s,r){var a=0,l=t.length,c=null==i;if("object"===v(i))for(a in o=!0,i)F(t,e,a,i[a],!0,s,r);else if(void 0!==n&&(o=!0,f(n)||(r=!0),c&&(r?(e.call(t,n),e=null):(c=e,e=function(t,e,i){return c.call(x(t),i)})),e))for(;a<l;a++)e(t[a],i,r?n:n.call(t[a],a,e(t[a],i)));return o?t:c?e.call(t):l?e(t[0],i):s},W=/^-ms-/,B=/-([a-z])/g;function V(t,e){return e.toUpperCase()}function q(t){return t.replace(W,"ms-").replace(B,V)}var Y=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function U(){this.expando=x.expando+U.uid++}U.uid=1,U.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Y(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,i){var n,o=this.cache(t);if("string"==typeof e)o[q(e)]=i;else for(n in e)o[q(n)]=e[n];return o},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][q(e)]},access:function(t,e,i){return void 0===e||e&&"string"==typeof e&&void 0===i?this.get(t,e):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,n=t[this.expando];if(void 0!==n){if(void 0!==e){i=(e=Array.isArray(e)?e.map(q):(e=q(e))in n?[e]:e.match($)||[]).length;for(;i--;)delete n[e[i]]}(void 0===e||x.isEmptyObject(n))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!x.isEmptyObject(e)}};var X=new U,K=new U,G=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Q=/[A-Z]/g;function J(t,e,i){var n;if(void 0===i&&1===t.nodeType)if(n="data-"+e.replace(Q,"-$&").toLowerCase(),"string"==typeof(i=t.getAttribute(n))){try{i=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:G.test(t)?JSON.parse(t):t)}(i)}catch(t){}K.set(t,e,i)}else i=void 0;return i}x.extend({hasData:function(t){return K.hasData(t)||X.hasData(t)},data:function(t,e,i){return K.access(t,e,i)},removeData:function(t,e){K.remove(t,e)},_data:function(t,e,i){return X.access(t,e,i)},_removeData:function(t,e){X.remove(t,e)}}),x.fn.extend({data:function(t,e){var i,n,o,s=this[0],r=s&&s.attributes;if(void 0===t){if(this.length&&(o=K.get(s),1===s.nodeType&&!X.get(s,"hasDataAttrs"))){for(i=r.length;i--;)r[i]&&0===(n=r[i].name).indexOf("data-")&&(n=q(n.slice(5)),J(s,n,o[n]));X.set(s,"hasDataAttrs",!0)}return o}return"object"==typeof t?this.each((function(){K.set(this,t)})):F(this,(function(e){var i;if(s&&void 0===e)return void 0!==(i=K.get(s,t))||void 0!==(i=J(s,t))?i:void 0;this.each((function(){K.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){K.remove(this,t)}))}}),x.extend({queue:function(t,e,i){var n;if(t)return e=(e||"fx")+"queue",n=X.get(t,e),i&&(!n||Array.isArray(i)?n=X.access(t,e,x.makeArray(i)):n.push(i)),n||[]},dequeue:function(t,e){e=e||"fx";var i=x.queue(t,e),n=i.length,o=i.shift(),s=x._queueHooks(t,e);"inprogress"===o&&(o=i.shift(),n--),o&&("fx"===e&&i.unshift("inprogress"),delete s.stop,o.call(t,(function(){x.dequeue(t,e)}),s)),!n&&s&&s.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return X.get(t,i)||X.access(t,i,{empty:x.Callbacks("once memory").add((function(){X.remove(t,[e+"queue",i])}))})}}),x.fn.extend({queue:function(t,e){var i=2;return"string"!=typeof t&&(e=t,t="fx",i--),arguments.length<i?x.queue(this[0],t):void 0===e?this:this.each((function(){var i=x.queue(this,t,e);x._queueHooks(this,t),"fx"===t&&"inprogress"!==i[0]&&x.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){x.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var i,n=1,o=x.Deferred(),s=this,r=this.length,a=function(){--n||o.resolveWith(s,[s])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";r--;)(i=X.get(s[r],t+"queueHooks"))&&i.empty&&(n++,i.empty.add(a));return a(),o.promise(e)}});var Z=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,tt=new RegExp("^(?:([+-])=|)("+Z+")([a-z%]*)$","i"),et=["Top","Right","Bottom","Left"],it=m.documentElement,nt=function(t){return x.contains(t.ownerDocument,t)},ot={composed:!0};it.getRootNode&&(nt=function(t){return x.contains(t.ownerDocument,t)||t.getRootNode(ot)===t.ownerDocument});var st=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&nt(t)&&"none"===x.css(t,"display")};function rt(t,e,i,n){var o,s,r=20,a=n?function(){return n.cur()}:function(){return x.css(t,e,"")},l=a(),c=i&&i[3]||(x.cssNumber[e]?"":"px"),d=t.nodeType&&(x.cssNumber[e]||"px"!==c&&+l)&&tt.exec(x.css(t,e));if(d&&d[3]!==c){for(l/=2,c=c||d[3],d=+l||1;r--;)x.style(t,e,d+c),(1-s)*(1-(s=a()/l||.5))<=0&&(r=0),d/=s;d*=2,x.style(t,e,d+c),i=i||[]}return i&&(d=+d||+l||0,o=i[1]?d+(i[1]+1)*i[2]:+i[2],n&&(n.unit=c,n.start=d,n.end=o)),o}var at={};function lt(t){var e,i=t.ownerDocument,n=t.nodeName,o=at[n];return o||(e=i.body.appendChild(i.createElement(n)),o=x.css(e,"display"),e.parentNode.removeChild(e),"none"===o&&(o="block"),at[n]=o,o)}function ct(t,e){for(var i,n,o=[],s=0,r=t.length;s<r;s++)(n=t[s]).style&&(i=n.style.display,e?("none"===i&&(o[s]=X.get(n,"display")||null,o[s]||(n.style.display="")),""===n.style.display&&st(n)&&(o[s]=lt(n))):"none"!==i&&(o[s]="none",X.set(n,"display",i)));for(s=0;s<r;s++)null!=o[s]&&(t[s].style.display=o[s]);return t}x.fn.extend({show:function(){return ct(this,!0)},hide:function(){return ct(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){st(this)?x(this).show():x(this).hide()}))}});var dt,ut,ht=/^(?:checkbox|radio)$/i,pt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ft=/^$|^module$|\/(?:java|ecma)script/i;dt=m.createDocumentFragment().appendChild(m.createElement("div")),(ut=m.createElement("input")).setAttribute("type","radio"),ut.setAttribute("checked","checked"),ut.setAttribute("name","t"),dt.appendChild(ut),p.checkClone=dt.cloneNode(!0).cloneNode(!0).lastChild.checked,dt.innerHTML="<textarea>x</textarea>",p.noCloneChecked=!!dt.cloneNode(!0).lastChild.defaultValue,dt.innerHTML="<option></option>",p.option=!!dt.lastChild;var gt={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function mt(t,e){var i;return i=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&C(t,e)?x.merge([t],i):i}function yt(t,e){for(var i=0,n=t.length;i<n;i++)X.set(t[i],"globalEval",!e||X.get(e[i],"globalEval"))}gt.tbody=gt.tfoot=gt.colgroup=gt.caption=gt.thead,gt.th=gt.td,p.option||(gt.optgroup=gt.option=[1,"<select multiple='multiple'>","</select>"]);var bt=/<|&#?\w+;/;function vt(t,e,i,n,o){for(var s,r,a,l,c,d,u=e.createDocumentFragment(),h=[],p=0,f=t.length;p<f;p++)if((s=t[p])||0===s)if("object"===v(s))x.merge(h,s.nodeType?[s]:s);else if(bt.test(s)){for(r=r||u.appendChild(e.createElement("div")),a=(pt.exec(s)||["",""])[1].toLowerCase(),l=gt[a]||gt._default,r.innerHTML=l[1]+x.htmlPrefilter(s)+l[2],d=l[0];d--;)r=r.lastChild;x.merge(h,r.childNodes),(r=u.firstChild).textContent=""}else h.push(e.createTextNode(s));for(u.textContent="",p=0;s=h[p++];)if(n&&x.inArray(s,n)>-1)o&&o.push(s);else if(c=nt(s),r=mt(u.appendChild(s),"script"),c&&yt(r),i)for(d=0;s=r[d++];)ft.test(s.type||"")&&i.push(s);return u}var xt=/^([^.]*)(?:\.(.+)|)/;function _t(){return!0}function wt(){return!1}function kt(t,e){return t===function(){try{return m.activeElement}catch(t){}}()==("focus"===e)}function St(t,e,i,n,o,s){var r,a;if("object"==typeof e){for(a in"string"!=typeof i&&(n=n||i,i=void 0),e)St(t,a,i,n,e[a],s);return t}if(null==n&&null==o?(o=i,n=i=void 0):null==o&&("string"==typeof i?(o=n,n=void 0):(o=n,n=i,i=void 0)),!1===o)o=wt;else if(!o)return t;return 1===s&&(r=o,(o=function(t){return x().off(t),r.apply(this,arguments)}).guid=r.guid||(r.guid=x.guid++)),t.each((function(){x.event.add(this,e,o,n,i)}))}function Tt(t,e,i){i?(X.set(t,e,!1),x.event.add(t,e,{namespace:!1,handler:function(t){var n,s,r=X.get(this,e);if(1&t.isTrigger&&this[e]){if(r.length)(x.event.special[e]||{}).delegateType&&t.stopPropagation();else if(r=o.call(arguments),X.set(this,e,r),n=i(this,e),this[e](),r!==(s=X.get(this,e))||n?X.set(this,e,!1):s={},r!==s)return t.stopImmediatePropagation(),t.preventDefault(),s&&s.value}else r.length&&(X.set(this,e,{value:x.event.trigger(x.extend(r[0],x.Event.prototype),r.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===X.get(t,e)&&x.event.add(t,e,_t)}x.event={global:{},add:function(t,e,i,n,o){var s,r,a,l,c,d,u,h,p,f,g,m=X.get(t);if(Y(t))for(i.handler&&(i=(s=i).handler,o=s.selector),o&&x.find.matchesSelector(it,o),i.guid||(i.guid=x.guid++),(l=m.events)||(l=m.events=Object.create(null)),(r=m.handle)||(r=m.handle=function(e){return void 0!==x&&x.event.triggered!==e.type?x.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match($)||[""]).length;c--;)p=g=(a=xt.exec(e[c])||[])[1],f=(a[2]||"").split(".").sort(),p&&(u=x.event.special[p]||{},p=(o?u.delegateType:u.bindType)||p,u=x.event.special[p]||{},d=x.extend({type:p,origType:g,data:n,handler:i,guid:i.guid,selector:o,needsContext:o&&x.expr.match.needsContext.test(o),namespace:f.join(".")},s),(h=l[p])||((h=l[p]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(t,n,f,r)||t.addEventListener&&t.addEventListener(p,r)),u.add&&(u.add.call(t,d),d.handler.guid||(d.handler.guid=i.guid)),o?h.splice(h.delegateCount++,0,d):h.push(d),x.event.global[p]=!0)},remove:function(t,e,i,n,o){var s,r,a,l,c,d,u,h,p,f,g,m=X.hasData(t)&&X.get(t);if(m&&(l=m.events)){for(c=(e=(e||"").match($)||[""]).length;c--;)if(p=g=(a=xt.exec(e[c])||[])[1],f=(a[2]||"").split(".").sort(),p){for(u=x.event.special[p]||{},h=l[p=(n?u.delegateType:u.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=s=h.length;s--;)d=h[s],!o&&g!==d.origType||i&&i.guid!==d.guid||a&&!a.test(d.namespace)||n&&n!==d.selector&&("**"!==n||!d.selector)||(h.splice(s,1),d.selector&&h.delegateCount--,u.remove&&u.remove.call(t,d));r&&!h.length&&(u.teardown&&!1!==u.teardown.call(t,f,m.handle)||x.removeEvent(t,p,m.handle),delete l[p])}else for(p in l)x.event.remove(t,p+e[c],i,n,!0);x.isEmptyObject(l)&&X.remove(t,"handle events")}},dispatch:function(t){var e,i,n,o,s,r,a=new Array(arguments.length),l=x.event.fix(t),c=(X.get(this,"events")||Object.create(null))[l.type]||[],d=x.event.special[l.type]||{};for(a[0]=l,e=1;e<arguments.length;e++)a[e]=arguments[e];if(l.delegateTarget=this,!d.preDispatch||!1!==d.preDispatch.call(this,l)){for(r=x.event.handlers.call(this,l,c),e=0;(o=r[e++])&&!l.isPropagationStopped();)for(l.currentTarget=o.elem,i=0;(s=o.handlers[i++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==s.namespace&&!l.rnamespace.test(s.namespace)||(l.handleObj=s,l.data=s.data,void 0!==(n=((x.event.special[s.origType]||{}).handle||s.handler).apply(o.elem,a))&&!1===(l.result=n)&&(l.preventDefault(),l.stopPropagation()));return d.postDispatch&&d.postDispatch.call(this,l),l.result}},handlers:function(t,e){var i,n,o,s,r,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(s=[],r={},i=0;i<l;i++)void 0===r[o=(n=e[i]).selector+" "]&&(r[o]=n.needsContext?x(o,this).index(c)>-1:x.find(o,this,null,[c]).length),r[o]&&s.push(n);s.length&&a.push({elem:c,handlers:s})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(x.Event.prototype,t,{enumerable:!0,configurable:!0,get:f(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[x.expando]?t:new x.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return ht.test(e.type)&&e.click&&C(e,"input")&&Tt(e,"click",_t),!1},trigger:function(t){var e=this||t;return ht.test(e.type)&&e.click&&C(e,"input")&&Tt(e,"click"),!0},_default:function(t){var e=t.target;return ht.test(e.type)&&e.click&&C(e,"input")&&X.get(e,"click")||C(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},x.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)},x.Event=function(t,e){if(!(this instanceof x.Event))return new x.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?_t:wt,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&x.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[x.expando]=!0},x.Event.prototype={constructor:x.Event,isDefaultPrevented:wt,isPropagationStopped:wt,isImmediatePropagationStopped:wt,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=_t,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=_t,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=_t,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},x.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},x.event.addProp),x.each({focus:"focusin",blur:"focusout"},(function(t,e){x.event.special[t]={setup:function(){return Tt(this,t,kt),!1},trigger:function(){return Tt(this,t),!0},_default:function(){return!0},delegateType:e}})),x.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){x.event.special[t]={delegateType:e,bindType:e,handle:function(t){var i,n=this,o=t.relatedTarget,s=t.handleObj;return o&&(o===n||x.contains(n,o))||(t.type=s.origType,i=s.handler.apply(this,arguments),t.type=e),i}}})),x.fn.extend({on:function(t,e,i,n){return St(this,t,e,i,n)},one:function(t,e,i,n){return St(this,t,e,i,n,1)},off:function(t,e,i){var n,o;if(t&&t.preventDefault&&t.handleObj)return n=t.handleObj,x(t.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof t){for(o in t)this.off(o,e,t[o]);return this}return!1!==e&&"function"!=typeof e||(i=e,e=void 0),!1===i&&(i=wt),this.each((function(){x.event.remove(this,t,i,e)}))}});var Ct=/<script|<style|<link/i,Mt=/checked\s*(?:[^=]|=\s*.checked.)/i,Dt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function At(t,e){return C(t,"table")&&C(11!==e.nodeType?e:e.firstChild,"tr")&&x(t).children("tbody")[0]||t}function Pt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Ot(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Et(t,e){var i,n,o,s,r,a;if(1===e.nodeType){if(X.hasData(t)&&(a=X.get(t).events))for(o in X.remove(e,"handle events"),a)for(i=0,n=a[o].length;i<n;i++)x.event.add(e,o,a[o][i]);K.hasData(t)&&(s=K.access(t),r=x.extend({},s),K.set(e,r))}}function Lt(t,e){var i=e.nodeName.toLowerCase();"input"===i&&ht.test(t.type)?e.checked=t.checked:"input"!==i&&"textarea"!==i||(e.defaultValue=t.defaultValue)}function $t(t,e,i,n){e=s(e);var o,r,a,l,c,d,u=0,h=t.length,g=h-1,m=e[0],y=f(m);if(y||h>1&&"string"==typeof m&&!p.checkClone&&Mt.test(m))return t.each((function(o){var s=t.eq(o);y&&(e[0]=m.call(this,o,s.html())),$t(s,e,i,n)}));if(h&&(r=(o=vt(e,t[0].ownerDocument,!1,t,n)).firstChild,1===o.childNodes.length&&(o=r),r||n)){for(l=(a=x.map(mt(o,"script"),Pt)).length;u<h;u++)c=o,u!==g&&(c=x.clone(c,!0,!0),l&&x.merge(a,mt(c,"script"))),i.call(t[u],c,u);if(l)for(d=a[a.length-1].ownerDocument,x.map(a,Ot),u=0;u<l;u++)c=a[u],ft.test(c.type||"")&&!X.access(c,"globalEval")&&x.contains(d,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?x._evalUrl&&!c.noModule&&x._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},d):b(c.textContent.replace(Dt,""),c,d))}return t}function Rt(t,e,i){for(var n,o=e?x.filter(e,t):t,s=0;null!=(n=o[s]);s++)i||1!==n.nodeType||x.cleanData(mt(n)),n.parentNode&&(i&&nt(n)&&yt(mt(n,"script")),n.parentNode.removeChild(n));return t}x.extend({htmlPrefilter:function(t){return t},clone:function(t,e,i){var n,o,s,r,a=t.cloneNode(!0),l=nt(t);if(!(p.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||x.isXMLDoc(t)))for(r=mt(a),n=0,o=(s=mt(t)).length;n<o;n++)Lt(s[n],r[n]);if(e)if(i)for(s=s||mt(t),r=r||mt(a),n=0,o=s.length;n<o;n++)Et(s[n],r[n]);else Et(t,a);return(r=mt(a,"script")).length>0&&yt(r,!l&&mt(t,"script")),a},cleanData:function(t){for(var e,i,n,o=x.event.special,s=0;void 0!==(i=t[s]);s++)if(Y(i)){if(e=i[X.expando]){if(e.events)for(n in e.events)o[n]?x.event.remove(i,n):x.removeEvent(i,n,e.handle);i[X.expando]=void 0}i[K.expando]&&(i[K.expando]=void 0)}}}),x.fn.extend({detach:function(t){return Rt(this,t,!0)},remove:function(t){return Rt(this,t)},text:function(t){return F(this,(function(t){return void 0===t?x.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return $t(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||At(this,t).appendChild(t)}))},prepend:function(){return $t(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=At(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return $t(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return $t(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(x.cleanData(mt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return x.clone(this,t,e)}))},html:function(t){return F(this,(function(t){var e=this[0]||{},i=0,n=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Ct.test(t)&&!gt[(pt.exec(t)||["",""])[1].toLowerCase()]){t=x.htmlPrefilter(t);try{for(;i<n;i++)1===(e=this[i]||{}).nodeType&&(x.cleanData(mt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return $t(this,arguments,(function(e){var i=this.parentNode;x.inArray(this,t)<0&&(x.cleanData(mt(this)),i&&i.replaceChild(e,this))}),t)}}),x.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){x.fn[t]=function(t){for(var i,n=[],o=x(t),s=o.length-1,a=0;a<=s;a++)i=a===s?this:this.clone(!0),x(o[a])[e](i),r.apply(n,i.get());return this.pushStack(n)}}));var It=new RegExp("^("+Z+")(?!px)[a-z%]+$","i"),Nt=function(e){var i=e.ownerDocument.defaultView;return i&&i.opener||(i=t),i.getComputedStyle(e)},jt=function(t,e,i){var n,o,s={};for(o in e)s[o]=t.style[o],t.style[o]=e[o];for(o in n=i.call(t),e)t.style[o]=s[o];return n},zt=new RegExp(et.join("|"),"i");function Ht(t,e,i){var n,o,s,r,a=t.style;return(i=i||Nt(t))&&(""!==(r=i.getPropertyValue(e)||i[e])||nt(t)||(r=x.style(t,e)),!p.pixelBoxStyles()&&It.test(r)&&zt.test(e)&&(n=a.width,o=a.minWidth,s=a.maxWidth,a.minWidth=a.maxWidth=a.width=r,r=i.width,a.width=n,a.minWidth=o,a.maxWidth=s)),void 0!==r?r+"":r}function Ft(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function e(){if(d){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",d.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",it.appendChild(c).appendChild(d);var e=t.getComputedStyle(d);n="1%"!==e.top,l=12===i(e.marginLeft),d.style.right="60%",r=36===i(e.right),o=36===i(e.width),d.style.position="absolute",s=12===i(d.offsetWidth/3),it.removeChild(c),d=null}}function i(t){return Math.round(parseFloat(t))}var n,o,s,r,a,l,c=m.createElement("div"),d=m.createElement("div");d.style&&(d.style.backgroundClip="content-box",d.cloneNode(!0).style.backgroundClip="",p.clearCloneStyle="content-box"===d.style.backgroundClip,x.extend(p,{boxSizingReliable:function(){return e(),o},pixelBoxStyles:function(){return e(),r},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),s},reliableTrDimensions:function(){var e,i,n,o;return null==a&&(e=m.createElement("table"),i=m.createElement("tr"),n=m.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",i.style.cssText="border:1px solid",i.style.height="1px",n.style.height="9px",n.style.display="block",it.appendChild(e).appendChild(i).appendChild(n),o=t.getComputedStyle(i),a=parseInt(o.height,10)+parseInt(o.borderTopWidth,10)+parseInt(o.borderBottomWidth,10)===i.offsetHeight,it.removeChild(e)),a}}))}();var Wt=["Webkit","Moz","ms"],Bt=m.createElement("div").style,Vt={};function qt(t){var e=x.cssProps[t]||Vt[t];return e||(t in Bt?t:Vt[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),i=Wt.length;i--;)if((t=Wt[i]+e)in Bt)return t}(t)||t)}var Yt=/^(none|table(?!-c[ea]).+)/,Ut=/^--/,Xt={position:"absolute",visibility:"hidden",display:"block"},Kt={letterSpacing:"0",fontWeight:"400"};function Gt(t,e,i){var n=tt.exec(e);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):e}function Qt(t,e,i,n,o,s){var r="width"===e?1:0,a=0,l=0;if(i===(n?"border":"content"))return 0;for(;r<4;r+=2)"margin"===i&&(l+=x.css(t,i+et[r],!0,o)),n?("content"===i&&(l-=x.css(t,"padding"+et[r],!0,o)),"margin"!==i&&(l-=x.css(t,"border"+et[r]+"Width",!0,o))):(l+=x.css(t,"padding"+et[r],!0,o),"padding"!==i?l+=x.css(t,"border"+et[r]+"Width",!0,o):a+=x.css(t,"border"+et[r]+"Width",!0,o));return!n&&s>=0&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-s-l-a-.5))||0),l}function Jt(t,e,i){var n=Nt(t),o=(!p.boxSizingReliable()||i)&&"border-box"===x.css(t,"boxSizing",!1,n),s=o,r=Ht(t,e,n),a="offset"+e[0].toUpperCase()+e.slice(1);if(It.test(r)){if(!i)return r;r="auto"}return(!p.boxSizingReliable()&&o||!p.reliableTrDimensions()&&C(t,"tr")||"auto"===r||!parseFloat(r)&&"inline"===x.css(t,"display",!1,n))&&t.getClientRects().length&&(o="border-box"===x.css(t,"boxSizing",!1,n),(s=a in t)&&(r=t[a])),(r=parseFloat(r)||0)+Qt(t,e,i||(o?"border":"content"),s,n,r)+"px"}function Zt(t,e,i,n,o){return new Zt.prototype.init(t,e,i,n,o)}x.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=Ht(t,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,i,n){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,s,r,a=q(e),l=Ut.test(e),c=t.style;if(l||(e=qt(a)),r=x.cssHooks[e]||x.cssHooks[a],void 0===i)return r&&"get"in r&&void 0!==(o=r.get(t,!1,n))?o:c[e];"string"===(s=typeof i)&&(o=tt.exec(i))&&o[1]&&(i=rt(t,e,o),s="number"),null!=i&&i==i&&("number"!==s||l||(i+=o&&o[3]||(x.cssNumber[a]?"":"px")),p.clearCloneStyle||""!==i||0!==e.indexOf("background")||(c[e]="inherit"),r&&"set"in r&&void 0===(i=r.set(t,i,n))||(l?c.setProperty(e,i):c[e]=i))}},css:function(t,e,i,n){var o,s,r,a=q(e);return Ut.test(e)||(e=qt(a)),(r=x.cssHooks[e]||x.cssHooks[a])&&"get"in r&&(o=r.get(t,!0,i)),void 0===o&&(o=Ht(t,e,n)),"normal"===o&&e in Kt&&(o=Kt[e]),""===i||i?(s=parseFloat(o),!0===i||isFinite(s)?s||0:o):o}}),x.each(["height","width"],(function(t,e){x.cssHooks[e]={get:function(t,i,n){if(i)return!Yt.test(x.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?Jt(t,e,n):jt(t,Xt,(function(){return Jt(t,e,n)}))},set:function(t,i,n){var o,s=Nt(t),r=!p.scrollboxSize()&&"absolute"===s.position,a=(r||n)&&"border-box"===x.css(t,"boxSizing",!1,s),l=n?Qt(t,e,n,a,s):0;return a&&r&&(l-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(s[e])-Qt(t,e,"border",!1,s)-.5)),l&&(o=tt.exec(i))&&"px"!==(o[3]||"px")&&(t.style[e]=i,i=x.css(t,e)),Gt(0,i,l)}}})),x.cssHooks.marginLeft=Ft(p.reliableMarginLeft,(function(t,e){if(e)return(parseFloat(Ht(t,"marginLeft"))||t.getBoundingClientRect().left-jt(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),x.each({margin:"",padding:"",border:"Width"},(function(t,e){x.cssHooks[t+e]={expand:function(i){for(var n=0,o={},s="string"==typeof i?i.split(" "):[i];n<4;n++)o[t+et[n]+e]=s[n]||s[n-2]||s[0];return o}},"margin"!==t&&(x.cssHooks[t+e].set=Gt)})),x.fn.extend({css:function(t,e){return F(this,(function(t,e,i){var n,o,s={},r=0;if(Array.isArray(e)){for(n=Nt(t),o=e.length;r<o;r++)s[e[r]]=x.css(t,e[r],!1,n);return s}return void 0!==i?x.style(t,e,i):x.css(t,e)}),t,e,arguments.length>1)}}),x.Tween=Zt,Zt.prototype={constructor:Zt,init:function(t,e,i,n,o,s){this.elem=t,this.prop=i,this.easing=o||x.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=n,this.unit=s||(x.cssNumber[i]?"":"px")},cur:function(){var t=Zt.propHooks[this.prop];return t&&t.get?t.get(this):Zt.propHooks._default.get(this)},run:function(t){var e,i=Zt.propHooks[this.prop];return this.options.duration?this.pos=e=x.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):Zt.propHooks._default.set(this),this}},Zt.prototype.init.prototype=Zt.prototype,Zt.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=x.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){x.fx.step[t.prop]?x.fx.step[t.prop](t):1!==t.elem.nodeType||!x.cssHooks[t.prop]&&null==t.elem.style[qt(t.prop)]?t.elem[t.prop]=t.now:x.style(t.elem,t.prop,t.now+t.unit)}}},Zt.propHooks.scrollTop=Zt.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},x.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},x.fx=Zt.prototype.init,x.fx.step={};var te,ee,ie=/^(?:toggle|show|hide)$/,ne=/queueHooks$/;function oe(){ee&&(!1===m.hidden&&t.requestAnimationFrame?t.requestAnimationFrame(oe):t.setTimeout(oe,x.fx.interval),x.fx.tick())}function se(){return t.setTimeout((function(){te=void 0})),te=Date.now()}function re(t,e){var i,n=0,o={height:t};for(e=e?1:0;n<4;n+=2-e)o["margin"+(i=et[n])]=o["padding"+i]=t;return e&&(o.opacity=o.width=t),o}function ae(t,e,i){for(var n,o=(le.tweeners[e]||[]).concat(le.tweeners["*"]),s=0,r=o.length;s<r;s++)if(n=o[s].call(i,e,t))return n}function le(t,e,i){var n,o,s=0,r=le.prefilters.length,a=x.Deferred().always((function(){delete l.elem})),l=function(){if(o)return!1;for(var e=te||se(),i=Math.max(0,c.startTime+c.duration-e),n=1-(i/c.duration||0),s=0,r=c.tweens.length;s<r;s++)c.tweens[s].run(n);return a.notifyWith(t,[c,n,i]),n<1&&r?i:(r||a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c]),!1)},c=a.promise({elem:t,props:x.extend({},e),opts:x.extend(!0,{specialEasing:{},easing:x.easing._default},i),originalProperties:e,originalOptions:i,startTime:te||se(),duration:i.duration,tweens:[],createTween:function(e,i){var n=x.Tween(t,c.opts,e,i,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(n),n},stop:function(e){var i=0,n=e?c.tweens.length:0;if(o)return this;for(o=!0;i<n;i++)c.tweens[i].run(1);return e?(a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c,e])):a.rejectWith(t,[c,e]),this}}),d=c.props;for(!function(t,e){var i,n,o,s,r;for(i in t)if(o=e[n=q(i)],s=t[i],Array.isArray(s)&&(o=s[1],s=t[i]=s[0]),i!==n&&(t[n]=s,delete t[i]),(r=x.cssHooks[n])&&"expand"in r)for(i in s=r.expand(s),delete t[n],s)i in t||(t[i]=s[i],e[i]=o);else e[n]=o}(d,c.opts.specialEasing);s<r;s++)if(n=le.prefilters[s].call(c,t,d,c.opts))return f(n.stop)&&(x._queueHooks(c.elem,c.opts.queue).stop=n.stop.bind(n)),n;return x.map(d,ae,c),f(c.opts.start)&&c.opts.start.call(t,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),x.fx.timer(x.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c}x.Animation=x.extend(le,{tweeners:{"*":[function(t,e){var i=this.createTween(t,e);return rt(i.elem,t,tt.exec(e),i),i}]},tweener:function(t,e){f(t)?(e=t,t=["*"]):t=t.match($);for(var i,n=0,o=t.length;n<o;n++)i=t[n],le.tweeners[i]=le.tweeners[i]||[],le.tweeners[i].unshift(e)},prefilters:[function(t,e,i){var n,o,s,r,a,l,c,d,u="width"in e||"height"in e,h=this,p={},f=t.style,g=t.nodeType&&st(t),m=X.get(t,"fxshow");for(n in i.queue||(null==(r=x._queueHooks(t,"fx")).unqueued&&(r.unqueued=0,a=r.empty.fire,r.empty.fire=function(){r.unqueued||a()}),r.unqueued++,h.always((function(){h.always((function(){r.unqueued--,x.queue(t,"fx").length||r.empty.fire()}))}))),e)if(o=e[n],ie.test(o)){if(delete e[n],s=s||"toggle"===o,o===(g?"hide":"show")){if("show"!==o||!m||void 0===m[n])continue;g=!0}p[n]=m&&m[n]||x.style(t,n)}if((l=!x.isEmptyObject(e))||!x.isEmptyObject(p))for(n in u&&1===t.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=m&&m.display)&&(c=X.get(t,"display")),"none"===(d=x.css(t,"display"))&&(c?d=c:(ct([t],!0),c=t.style.display||c,d=x.css(t,"display"),ct([t]))),("inline"===d||"inline-block"===d&&null!=c)&&"none"===x.css(t,"float")&&(l||(h.done((function(){f.display=c})),null==c&&(d=f.display,c="none"===d?"":d)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",h.always((function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]}))),l=!1,p)l||(m?"hidden"in m&&(g=m.hidden):m=X.access(t,"fxshow",{display:c}),s&&(m.hidden=!g),g&&ct([t],!0),h.done((function(){for(n in g||ct([t]),X.remove(t,"fxshow"),p)x.style(t,n,p[n])}))),l=ae(g?m[n]:0,n,h),n in m||(m[n]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?le.prefilters.unshift(t):le.prefilters.push(t)}}),x.speed=function(t,e,i){var n=t&&"object"==typeof t?x.extend({},t):{complete:i||!i&&e||f(t)&&t,duration:t,easing:i&&e||e&&!f(e)&&e};return x.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in x.fx.speeds?n.duration=x.fx.speeds[n.duration]:n.duration=x.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){f(n.old)&&n.old.call(this),n.queue&&x.dequeue(this,n.queue)},n},x.fn.extend({fadeTo:function(t,e,i,n){return this.filter(st).css("opacity",0).show().end().animate({opacity:e},t,i,n)},animate:function(t,e,i,n){var o=x.isEmptyObject(t),s=x.speed(e,i,n),r=function(){var e=le(this,x.extend({},t),s);(o||X.get(this,"finish"))&&e.stop(!0)};return r.finish=r,o||!1===s.queue?this.each(r):this.queue(s.queue,r)},stop:function(t,e,i){var n=function(t){var e=t.stop;delete t.stop,e(i)};return"string"!=typeof t&&(i=e,e=t,t=void 0),e&&this.queue(t||"fx",[]),this.each((function(){var e=!0,o=null!=t&&t+"queueHooks",s=x.timers,r=X.get(this);if(o)r[o]&&r[o].stop&&n(r[o]);else for(o in r)r[o]&&r[o].stop&&ne.test(o)&&n(r[o]);for(o=s.length;o--;)s[o].elem!==this||null!=t&&s[o].queue!==t||(s[o].anim.stop(i),e=!1,s.splice(o,1));!e&&i||x.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,i=X.get(this),n=i[t+"queue"],o=i[t+"queueHooks"],s=x.timers,r=n?n.length:0;for(i.finish=!0,x.queue(this,t,[]),o&&o.stop&&o.stop.call(this,!0),e=s.length;e--;)s[e].elem===this&&s[e].queue===t&&(s[e].anim.stop(!0),s.splice(e,1));for(e=0;e<r;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete i.finish}))}}),x.each(["toggle","show","hide"],(function(t,e){var i=x.fn[e];x.fn[e]=function(t,n,o){return null==t||"boolean"==typeof t?i.apply(this,arguments):this.animate(re(e,!0),t,n,o)}})),x.each({slideDown:re("show"),slideUp:re("hide"),slideToggle:re("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){x.fn[t]=function(t,i,n){return this.animate(e,t,i,n)}})),x.timers=[],x.fx.tick=function(){var t,e=0,i=x.timers;for(te=Date.now();e<i.length;e++)(t=i[e])()||i[e]!==t||i.splice(e--,1);i.length||x.fx.stop(),te=void 0},x.fx.timer=function(t){x.timers.push(t),x.fx.start()},x.fx.interval=13,x.fx.start=function(){ee||(ee=!0,oe())},x.fx.stop=function(){ee=null},x.fx.speeds={slow:600,fast:200,_default:400},x.fn.delay=function(e,i){return e=x.fx&&x.fx.speeds[e]||e,i=i||"fx",this.queue(i,(function(i,n){var o=t.setTimeout(i,e);n.stop=function(){t.clearTimeout(o)}}))},function(){var t=m.createElement("input"),e=m.createElement("select").appendChild(m.createElement("option"));t.type="checkbox",p.checkOn=""!==t.value,p.optSelected=e.selected,(t=m.createElement("input")).value="t",t.type="radio",p.radioValue="t"===t.value}();var ce,de=x.expr.attrHandle;x.fn.extend({attr:function(t,e){return F(this,x.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){x.removeAttr(this,t)}))}}),x.extend({attr:function(t,e,i){var n,o,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===t.getAttribute?x.prop(t,e,i):(1===s&&x.isXMLDoc(t)||(o=x.attrHooks[e.toLowerCase()]||(x.expr.match.bool.test(e)?ce:void 0)),void 0!==i?null===i?void x.removeAttr(t,e):o&&"set"in o&&void 0!==(n=o.set(t,i,e))?n:(t.setAttribute(e,i+""),i):o&&"get"in o&&null!==(n=o.get(t,e))?n:null==(n=x.find.attr(t,e))?void 0:n)},attrHooks:{type:{set:function(t,e){if(!p.radioValue&&"radio"===e&&C(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},removeAttr:function(t,e){var i,n=0,o=e&&e.match($);if(o&&1===t.nodeType)for(;i=o[n++];)t.removeAttribute(i)}}),ce={set:function(t,e,i){return!1===e?x.removeAttr(t,i):t.setAttribute(i,i),i}},x.each(x.expr.match.bool.source.match(/\w+/g),(function(t,e){var i=de[e]||x.find.attr;de[e]=function(t,e,n){var o,s,r=e.toLowerCase();return n||(s=de[r],de[r]=o,o=null!=i(t,e,n)?r:null,de[r]=s),o}}));var ue=/^(?:input|select|textarea|button)$/i,he=/^(?:a|area)$/i;function pe(t){return(t.match($)||[]).join(" ")}function fe(t){return t.getAttribute&&t.getAttribute("class")||""}function ge(t){return Array.isArray(t)?t:"string"==typeof t&&t.match($)||[]}x.fn.extend({prop:function(t,e){return F(this,x.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[x.propFix[t]||t]}))}}),x.extend({prop:function(t,e,i){var n,o,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&x.isXMLDoc(t)||(e=x.propFix[e]||e,o=x.propHooks[e]),void 0!==i?o&&"set"in o&&void 0!==(n=o.set(t,i,e))?n:t[e]=i:o&&"get"in o&&null!==(n=o.get(t,e))?n:t[e]},propHooks:{tabIndex:{get:function(t){var e=x.find.attr(t,"tabindex");return e?parseInt(e,10):ue.test(t.nodeName)||he.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),p.optSelected||(x.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),x.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){x.propFix[this.toLowerCase()]=this})),x.fn.extend({addClass:function(t){var e,i,n,o,s,r,a,l=0;if(f(t))return this.each((function(e){x(this).addClass(t.call(this,e,fe(this)))}));if((e=ge(t)).length)for(;i=this[l++];)if(o=fe(i),n=1===i.nodeType&&" "+pe(o)+" "){for(r=0;s=e[r++];)n.indexOf(" "+s+" ")<0&&(n+=s+" ");o!==(a=pe(n))&&i.setAttribute("class",a)}return this},removeClass:function(t){var e,i,n,o,s,r,a,l=0;if(f(t))return this.each((function(e){x(this).removeClass(t.call(this,e,fe(this)))}));if(!arguments.length)return this.attr("class","");if((e=ge(t)).length)for(;i=this[l++];)if(o=fe(i),n=1===i.nodeType&&" "+pe(o)+" "){for(r=0;s=e[r++];)for(;n.indexOf(" "+s+" ")>-1;)n=n.replace(" "+s+" "," ");o!==(a=pe(n))&&i.setAttribute("class",a)}return this},toggleClass:function(t,e){var i=typeof t,n="string"===i||Array.isArray(t);return"boolean"==typeof e&&n?e?this.addClass(t):this.removeClass(t):f(t)?this.each((function(i){x(this).toggleClass(t.call(this,i,fe(this),e),e)})):this.each((function(){var e,o,s,r;if(n)for(o=0,s=x(this),r=ge(t);e=r[o++];)s.hasClass(e)?s.removeClass(e):s.addClass(e);else void 0!==t&&"boolean"!==i||((e=fe(this))&&X.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":X.get(this,"__className__")||""))}))},hasClass:function(t){var e,i,n=0;for(e=" "+t+" ";i=this[n++];)if(1===i.nodeType&&(" "+pe(fe(i))+" ").indexOf(e)>-1)return!0;return!1}});var me=/\r/g;x.fn.extend({val:function(t){var e,i,n,o=this[0];return arguments.length?(n=f(t),this.each((function(i){var o;1===this.nodeType&&(null==(o=n?t.call(this,i,x(this).val()):t)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=x.map(o,(function(t){return null==t?"":t+""}))),(e=x.valHooks[this.type]||x.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,o,"value")||(this.value=o))}))):o?(e=x.valHooks[o.type]||x.valHooks[o.nodeName.toLowerCase()])&&"get"in e&&void 0!==(i=e.get(o,"value"))?i:"string"==typeof(i=o.value)?i.replace(me,""):null==i?"":i:void 0}}),x.extend({valHooks:{option:{get:function(t){var e=x.find.attr(t,"value");return null!=e?e:pe(x.text(t))}},select:{get:function(t){var e,i,n,o=t.options,s=t.selectedIndex,r="select-one"===t.type,a=r?null:[],l=r?s+1:o.length;for(n=s<0?l:r?s:0;n<l;n++)if(((i=o[n]).selected||n===s)&&!i.disabled&&(!i.parentNode.disabled||!C(i.parentNode,"optgroup"))){if(e=x(i).val(),r)return e;a.push(e)}return a},set:function(t,e){for(var i,n,o=t.options,s=x.makeArray(e),r=o.length;r--;)((n=o[r]).selected=x.inArray(x.valHooks.option.get(n),s)>-1)&&(i=!0);return i||(t.selectedIndex=-1),s}}}}),x.each(["radio","checkbox"],(function(){x.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=x.inArray(x(t).val(),e)>-1}},p.checkOn||(x.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})})),p.focusin="onfocusin"in t;var ye=/^(?:focusinfocus|focusoutblur)$/,be=function(t){t.stopPropagation()};x.extend(x.event,{trigger:function(e,i,n,o){var s,r,a,l,c,u,h,p,y=[n||m],b=d.call(e,"type")?e.type:e,v=d.call(e,"namespace")?e.namespace.split("."):[];if(r=p=a=n=n||m,3!==n.nodeType&&8!==n.nodeType&&!ye.test(b+x.event.triggered)&&(b.indexOf(".")>-1&&(v=b.split("."),b=v.shift(),v.sort()),c=b.indexOf(":")<0&&"on"+b,(e=e[x.expando]?e:new x.Event(b,"object"==typeof e&&e)).isTrigger=o?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),i=null==i?[e]:x.makeArray(i,[e]),h=x.event.special[b]||{},o||!h.trigger||!1!==h.trigger.apply(n,i))){if(!o&&!h.noBubble&&!g(n)){for(l=h.delegateType||b,ye.test(l+b)||(r=r.parentNode);r;r=r.parentNode)y.push(r),a=r;a===(n.ownerDocument||m)&&y.push(a.defaultView||a.parentWindow||t)}for(s=0;(r=y[s++])&&!e.isPropagationStopped();)p=r,e.type=s>1?l:h.bindType||b,(u=(X.get(r,"events")||Object.create(null))[e.type]&&X.get(r,"handle"))&&u.apply(r,i),(u=c&&r[c])&&u.apply&&Y(r)&&(e.result=u.apply(r,i),!1===e.result&&e.preventDefault());return e.type=b,o||e.isDefaultPrevented()||h._default&&!1!==h._default.apply(y.pop(),i)||!Y(n)||c&&f(n[b])&&!g(n)&&((a=n[c])&&(n[c]=null),x.event.triggered=b,e.isPropagationStopped()&&p.addEventListener(b,be),n[b](),e.isPropagationStopped()&&p.removeEventListener(b,be),x.event.triggered=void 0,a&&(n[c]=a)),e.result}},simulate:function(t,e,i){var n=x.extend(new x.Event,i,{type:t,isSimulated:!0});x.event.trigger(n,null,e)}}),x.fn.extend({trigger:function(t,e){return this.each((function(){x.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var i=this[0];if(i)return x.event.trigger(t,e,i,!0)}}),p.focusin||x.each({focus:"focusin",blur:"focusout"},(function(t,e){var i=function(t){x.event.simulate(e,t.target,x.event.fix(t))};x.event.special[e]={setup:function(){var n=this.ownerDocument||this.document||this,o=X.access(n,e);o||n.addEventListener(t,i,!0),X.access(n,e,(o||0)+1)},teardown:function(){var n=this.ownerDocument||this.document||this,o=X.access(n,e)-1;o?X.access(n,e,o):(n.removeEventListener(t,i,!0),X.remove(n,e))}}}));var ve=t.location,xe={guid:Date.now()},_e=/\?/;x.parseXML=function(e){var i,n;if(!e||"string"!=typeof e)return null;try{i=(new t.DOMParser).parseFromString(e,"text/xml")}catch(t){}return n=i&&i.getElementsByTagName("parsererror")[0],i&&!n||x.error("Invalid XML: "+(n?x.map(n.childNodes,(function(t){return t.textContent})).join("\n"):e)),i};var we=/\[\]$/,ke=/\r?\n/g,Se=/^(?:submit|button|image|reset|file)$/i,Te=/^(?:input|select|textarea|keygen)/i;function Ce(t,e,i,n){var o;if(Array.isArray(e))x.each(e,(function(e,o){i||we.test(t)?n(t,o):Ce(t+"["+("object"==typeof o&&null!=o?e:"")+"]",o,i,n)}));else if(i||"object"!==v(e))n(t,e);else for(o in e)Ce(t+"["+o+"]",e[o],i,n)}x.param=function(t,e){var i,n=[],o=function(t,e){var i=f(e)?e():e;n[n.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==i?"":i)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!x.isPlainObject(t))x.each(t,(function(){o(this.name,this.value)}));else for(i in t)Ce(i,t[i],e,o);return n.join("&")},x.fn.extend({serialize:function(){return x.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=x.prop(this,"elements");return t?x.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!x(this).is(":disabled")&&Te.test(this.nodeName)&&!Se.test(t)&&(this.checked||!ht.test(t))})).map((function(t,e){var i=x(this).val();return null==i?null:Array.isArray(i)?x.map(i,(function(t){return{name:e.name,value:t.replace(ke,"\r\n")}})):{name:e.name,value:i.replace(ke,"\r\n")}})).get()}});var Me=/%20/g,De=/#.*$/,Ae=/([?&])_=[^&]*/,Pe=/^(.*?):[ \t]*([^\r\n]*)$/gm,Oe=/^(?:GET|HEAD)$/,Ee=/^\/\//,Le={},$e={},Re="*/".concat("*"),Ie=m.createElement("a");function Ne(t){return function(e,i){"string"!=typeof e&&(i=e,e="*");var n,o=0,s=e.toLowerCase().match($)||[];if(f(i))for(;n=s[o++];)"+"===n[0]?(n=n.slice(1)||"*",(t[n]=t[n]||[]).unshift(i)):(t[n]=t[n]||[]).push(i)}}function je(t,e,i,n){var o={},s=t===$e;function r(a){var l;return o[a]=!0,x.each(t[a]||[],(function(t,a){var c=a(e,i,n);return"string"!=typeof c||s||o[c]?s?!(l=c):void 0:(e.dataTypes.unshift(c),r(c),!1)})),l}return r(e.dataTypes[0])||!o["*"]&&r("*")}function ze(t,e){var i,n,o=x.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((o[i]?t:n||(n={}))[i]=e[i]);return n&&x.extend(!0,t,n),t}Ie.href=ve.href,x.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ve.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(ve.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Re,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":x.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?ze(ze(t,x.ajaxSettings),e):ze(x.ajaxSettings,t)},ajaxPrefilter:Ne(Le),ajaxTransport:Ne($e),ajax:function(e,i){"object"==typeof e&&(i=e,e=void 0),i=i||{};var n,o,s,r,a,l,c,d,u,h,p=x.ajaxSetup({},i),f=p.context||p,g=p.context&&(f.nodeType||f.jquery)?x(f):x.event,y=x.Deferred(),b=x.Callbacks("once memory"),v=p.statusCode||{},_={},w={},k="canceled",S={readyState:0,getResponseHeader:function(t){var e;if(c){if(!r)for(r={};e=Pe.exec(s);)r[e[1].toLowerCase()+" "]=(r[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=r[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return c?s:null},setRequestHeader:function(t,e){return null==c&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,_[t]=e),this},overrideMimeType:function(t){return null==c&&(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(c)S.always(t[S.status]);else for(e in t)v[e]=[v[e],t[e]];return this},abort:function(t){var e=t||k;return n&&n.abort(e),T(0,e),this}};if(y.promise(S),p.url=((e||p.url||ve.href)+"").replace(Ee,ve.protocol+"//"),p.type=i.method||i.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match($)||[""],null==p.crossDomain){l=m.createElement("a");try{l.href=p.url,l.href=l.href,p.crossDomain=Ie.protocol+"//"+Ie.host!=l.protocol+"//"+l.host}catch(t){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=x.param(p.data,p.traditional)),je(Le,p,i,S),c)return S;for(u in(d=x.event&&p.global)&&0==x.active++&&x.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Oe.test(p.type),o=p.url.replace(De,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Me,"+")):(h=p.url.slice(o.length),p.data&&(p.processData||"string"==typeof p.data)&&(o+=(_e.test(o)?"&":"?")+p.data,delete p.data),!1===p.cache&&(o=o.replace(Ae,"$1"),h=(_e.test(o)?"&":"?")+"_="+xe.guid+++h),p.url=o+h),p.ifModified&&(x.lastModified[o]&&S.setRequestHeader("If-Modified-Since",x.lastModified[o]),x.etag[o]&&S.setRequestHeader("If-None-Match",x.etag[o])),(p.data&&p.hasContent&&!1!==p.contentType||i.contentType)&&S.setRequestHeader("Content-Type",p.contentType),S.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Re+"; q=0.01":""):p.accepts["*"]),p.headers)S.setRequestHeader(u,p.headers[u]);if(p.beforeSend&&(!1===p.beforeSend.call(f,S,p)||c))return S.abort();if(k="abort",b.add(p.complete),S.done(p.success),S.fail(p.error),n=je($e,p,i,S)){if(S.readyState=1,d&&g.trigger("ajaxSend",[S,p]),c)return S;p.async&&p.timeout>0&&(a=t.setTimeout((function(){S.abort("timeout")}),p.timeout));try{c=!1,n.send(_,T)}catch(t){if(c)throw t;T(-1,t)}}else T(-1,"No Transport");function T(e,i,r,l){var u,h,m,_,w,k=i;c||(c=!0,a&&t.clearTimeout(a),n=void 0,s=l||"",S.readyState=e>0?4:0,u=e>=200&&e<300||304===e,r&&(_=function(t,e,i){for(var n,o,s,r,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=t.mimeType||e.getResponseHeader("Content-Type"));if(n)for(o in a)if(a[o]&&a[o].test(n)){l.unshift(o);break}if(l[0]in i)s=l[0];else{for(o in i){if(!l[0]||t.converters[o+" "+l[0]]){s=o;break}r||(r=o)}s=s||r}if(s)return s!==l[0]&&l.unshift(s),i[s]}(p,S,r)),!u&&x.inArray("script",p.dataTypes)>-1&&x.inArray("json",p.dataTypes)<0&&(p.converters["text script"]=function(){}),_=function(t,e,i,n){var o,s,r,a,l,c={},d=t.dataTypes.slice();if(d[1])for(r in t.converters)c[r.toLowerCase()]=t.converters[r];for(s=d.shift();s;)if(t.responseFields[s]&&(i[t.responseFields[s]]=e),!l&&n&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=s,s=d.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(!(r=c[l+" "+s]||c["* "+s]))for(o in c)if((a=o.split(" "))[1]===s&&(r=c[l+" "+a[0]]||c["* "+a[0]])){!0===r?r=c[o]:!0!==c[o]&&(s=a[0],d.unshift(a[1]));break}if(!0!==r)if(r&&t.throws)e=r(e);else try{e=r(e)}catch(t){return{state:"parsererror",error:r?t:"No conversion from "+l+" to "+s}}}return{state:"success",data:e}}(p,_,S,u),u?(p.ifModified&&((w=S.getResponseHeader("Last-Modified"))&&(x.lastModified[o]=w),(w=S.getResponseHeader("etag"))&&(x.etag[o]=w)),204===e||"HEAD"===p.type?k="nocontent":304===e?k="notmodified":(k=_.state,h=_.data,u=!(m=_.error))):(m=k,!e&&k||(k="error",e<0&&(e=0))),S.status=e,S.statusText=(i||k)+"",u?y.resolveWith(f,[h,k,S]):y.rejectWith(f,[S,k,m]),S.statusCode(v),v=void 0,d&&g.trigger(u?"ajaxSuccess":"ajaxError",[S,p,u?h:m]),b.fireWith(f,[S,k]),d&&(g.trigger("ajaxComplete",[S,p]),--x.active||x.event.trigger("ajaxStop")))}return S},getJSON:function(t,e,i){return x.get(t,e,i,"json")},getScript:function(t,e){return x.get(t,void 0,e,"script")}}),x.each(["get","post"],(function(t,e){x[e]=function(t,i,n,o){return f(i)&&(o=o||n,n=i,i=void 0),x.ajax(x.extend({url:t,type:e,dataType:o,data:i,success:n},x.isPlainObject(t)&&t))}})),x.ajaxPrefilter((function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")})),x._evalUrl=function(t,e,i){return x.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){x.globalEval(t,e,i)}})},x.fn.extend({wrapAll:function(t){var e;return this[0]&&(f(t)&&(t=t.call(this[0])),e=x(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return f(t)?this.each((function(e){x(this).wrapInner(t.call(this,e))})):this.each((function(){var e=x(this),i=e.contents();i.length?i.wrapAll(t):e.append(t)}))},wrap:function(t){var e=f(t);return this.each((function(i){x(this).wrapAll(e?t.call(this,i):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){x(this).replaceWith(this.childNodes)})),this}}),x.expr.pseudos.hidden=function(t){return!x.expr.pseudos.visible(t)},x.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},x.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(t){}};var He={0:200,1223:204},Fe=x.ajaxSettings.xhr();p.cors=!!Fe&&"withCredentials"in Fe,p.ajax=Fe=!!Fe,x.ajaxTransport((function(e){var i,n;if(p.cors||Fe&&!e.crossDomain)return{send:function(o,s){var r,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(r in e.xhrFields)a[r]=e.xhrFields[r];for(r in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)a.setRequestHeader(r,o[r]);i=function(t){return function(){i&&(i=n=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?s(0,"error"):s(a.status,a.statusText):s(He[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=i(),n=a.onerror=a.ontimeout=i("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&t.setTimeout((function(){i&&n()}))},i=i("abort");try{a.send(e.hasContent&&e.data||null)}catch(t){if(i)throw t}},abort:function(){i&&i()}}})),x.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),x.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return x.globalEval(t),t}}}),x.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),x.ajaxTransport("script",(function(t){var e,i;if(t.crossDomain||t.scriptAttrs)return{send:function(n,o){e=x("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",i=function(t){e.remove(),i=null,t&&o("error"===t.type?404:200,t.type)}),m.head.appendChild(e[0])},abort:function(){i&&i()}}}));var We,Be=[],Ve=/(=)\?(?=&|$)|\?\?/;x.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Be.pop()||x.expando+"_"+xe.guid++;return this[t]=!0,t}}),x.ajaxPrefilter("json jsonp",(function(e,i,n){var o,s,r,a=!1!==e.jsonp&&(Ve.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ve.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=f(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Ve,"$1"+o):!1!==e.jsonp&&(e.url+=(_e.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return r||x.error(o+" was not called"),r[0]},e.dataTypes[0]="json",s=t[o],t[o]=function(){r=arguments},n.always((function(){void 0===s?x(t).removeProp(o):t[o]=s,e[o]&&(e.jsonpCallback=i.jsonpCallback,Be.push(o)),r&&f(s)&&s(r[0]),r=s=void 0})),"script"})),p.createHTMLDocument=((We=m.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===We.childNodes.length),x.parseHTML=function(t,e,i){return"string"!=typeof t?[]:("boolean"==typeof e&&(i=e,e=!1),e||(p.createHTMLDocument?((n=(e=m.implementation.createHTMLDocument("")).createElement("base")).href=m.location.href,e.head.appendChild(n)):e=m),s=!i&&[],(o=M.exec(t))?[e.createElement(o[1])]:(o=vt([t],e,s),s&&s.length&&x(s).remove(),x.merge([],o.childNodes)));var n,o,s},x.fn.load=function(t,e,i){var n,o,s,r=this,a=t.indexOf(" ");return a>-1&&(n=pe(t.slice(a)),t=t.slice(0,a)),f(e)?(i=e,e=void 0):e&&"object"==typeof e&&(o="POST"),r.length>0&&x.ajax({url:t,type:o||"GET",dataType:"html",data:e}).done((function(t){s=arguments,r.html(n?x("<div>").append(x.parseHTML(t)).find(n):t)})).always(i&&function(t,e){r.each((function(){i.apply(this,s||[t.responseText,e,t])}))}),this},x.expr.pseudos.animated=function(t){return x.grep(x.timers,(function(e){return t===e.elem})).length},x.offset={setOffset:function(t,e,i){var n,o,s,r,a,l,c=x.css(t,"position"),d=x(t),u={};"static"===c&&(t.style.position="relative"),a=d.offset(),s=x.css(t,"top"),l=x.css(t,"left"),("absolute"===c||"fixed"===c)&&(s+l).indexOf("auto")>-1?(r=(n=d.position()).top,o=n.left):(r=parseFloat(s)||0,o=parseFloat(l)||0),f(e)&&(e=e.call(t,i,x.extend({},a))),null!=e.top&&(u.top=e.top-a.top+r),null!=e.left&&(u.left=e.left-a.left+o),"using"in e?e.using.call(t,u):d.css(u)}},x.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){x.offset.setOffset(this,t,e)}));var e,i,n=this[0];return n?n.getClientRects().length?(e=n.getBoundingClientRect(),i=n.ownerDocument.defaultView,{top:e.top+i.pageYOffset,left:e.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,i,n=this[0],o={top:0,left:0};if("fixed"===x.css(n,"position"))e=n.getBoundingClientRect();else{for(e=this.offset(),i=n.ownerDocument,t=n.offsetParent||i.documentElement;t&&(t===i.body||t===i.documentElement)&&"static"===x.css(t,"position");)t=t.parentNode;t&&t!==n&&1===t.nodeType&&((o=x(t).offset()).top+=x.css(t,"borderTopWidth",!0),o.left+=x.css(t,"borderLeftWidth",!0))}return{top:e.top-o.top-x.css(n,"marginTop",!0),left:e.left-o.left-x.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===x.css(t,"position");)t=t.offsetParent;return t||it}))}}),x.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var i="pageYOffset"===e;x.fn[t]=function(n){return F(this,(function(t,n,o){var s;if(g(t)?s=t:9===t.nodeType&&(s=t.defaultView),void 0===o)return s?s[e]:t[n];s?s.scrollTo(i?s.pageXOffset:o,i?o:s.pageYOffset):t[n]=o}),t,n,arguments.length)}})),x.each(["top","left"],(function(t,e){x.cssHooks[e]=Ft(p.pixelPosition,(function(t,i){if(i)return i=Ht(t,e),It.test(i)?x(t).position()[e]+"px":i}))})),x.each({Height:"height",Width:"width"},(function(t,e){x.each({padding:"inner"+t,content:e,"":"outer"+t},(function(i,n){x.fn[n]=function(o,s){var r=arguments.length&&(i||"boolean"!=typeof o),a=i||(!0===o||!0===s?"margin":"border");return F(this,(function(e,i,o){var s;return g(e)?0===n.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(s=e.documentElement,Math.max(e.body["scroll"+t],s["scroll"+t],e.body["offset"+t],s["offset"+t],s["client"+t])):void 0===o?x.css(e,i,a):x.style(e,i,o,a)}),e,r?o:void 0,r)}}))})),x.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){x.fn[e]=function(t){return this.on(e,t)}})),x.fn.extend({bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,n){return this.on(e,t,i,n)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)},hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),x.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){x.fn[e]=function(t,i){return arguments.length>0?this.on(e,null,t,i):this.trigger(e)}}));var qe=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;x.proxy=function(t,e){var i,n,s;if("string"==typeof e&&(i=t[e],e=t,t=i),f(t))return n=o.call(arguments,2),(s=function(){return t.apply(e||this,n.concat(o.call(arguments)))}).guid=t.guid=t.guid||x.guid++,s},x.holdReady=function(t){t?x.readyWait++:x.ready(!0)},x.isArray=Array.isArray,x.parseJSON=JSON.parse,x.nodeName=C,x.isFunction=f,x.isWindow=g,x.camelCase=q,x.type=v,x.now=Date.now,x.isNumeric=function(t){var e=x.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},x.trim=function(t){return null==t?"":(t+"").replace(qe,"")},"function"==typeof define&&define.amd&&define("jquery",[],(function(){return x}));var Ye=t.jQuery,Ue=t.$;return x.noConflict=function(e){return t.$===x&&(t.$=Ue),e&&t.jQuery===x&&(t.jQuery=Ye),x},void 0===e&&(t.jQuery=t.$=x),x})),function(t){"use strict";"function"==typeof define&&define.amd?define(["jquery"],t):"undefined"!=typeof exports?module.exports=t(require("jquery")):t(jQuery)}((function(t){"use strict";var e,i=window.Slick||{};e=0,(i=function(i,n){var o,s=this;s.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:t(i),appendDots:t(i),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(e,i){return t('<button type="button" />').text(i+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},s.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},t.extend(s,s.initials),s.activeBreakpoint=null,s.animType=null,s.animProp=null,s.breakpoints=[],s.breakpointSettings=[],s.cssTransitions=!1,s.focussed=!1,s.interrupted=!1,s.hidden="hidden",s.paused=!0,s.positionProp=null,s.respondTo=null,s.rowCount=1,s.shouldClick=!0,s.$slider=t(i),s.$slidesCache=null,s.transformType=null,s.transitionType=null,s.visibilityChange="visibilitychange",s.windowWidth=0,s.windowTimer=null,o=t(i).data("slick")||{},s.options=t.extend({},s.defaults,n,o),s.currentSlide=s.options.initialSlide,s.originalSettings=s.options,void 0!==document.mozHidden?(s.hidden="mozHidden",s.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(s.hidden="webkitHidden",s.visibilityChange="webkitvisibilitychange"),s.autoPlay=t.proxy(s.autoPlay,s),s.autoPlayClear=t.proxy(s.autoPlayClear,s),s.autoPlayIterator=t.proxy(s.autoPlayIterator,s),s.changeSlide=t.proxy(s.changeSlide,s),s.clickHandler=t.proxy(s.clickHandler,s),s.selectHandler=t.proxy(s.selectHandler,s),s.setPosition=t.proxy(s.setPosition,s),s.swipeHandler=t.proxy(s.swipeHandler,s),s.dragHandler=t.proxy(s.dragHandler,s),s.keyHandler=t.proxy(s.keyHandler,s),s.instanceUid=e++,s.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,s.registerBreakpoints(),s.init(!0)}).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},i.prototype.addSlide=i.prototype.slickAdd=function(e,i,n){var o=this;if("boolean"==typeof i)n=i,i=null;else if(i<0||i>=o.slideCount)return!1;o.unload(),"number"==typeof i?0===i&&0===o.$slides.length?t(e).appendTo(o.$slideTrack):n?t(e).insertBefore(o.$slides.eq(i)):t(e).insertAfter(o.$slides.eq(i)):!0===n?t(e).prependTo(o.$slideTrack):t(e).appendTo(o.$slideTrack),o.$slides=o.$slideTrack.children(this.options.slide),o.$slideTrack.children(this.options.slide).detach(),o.$slideTrack.append(o.$slides),o.$slides.each((function(e,i){t(i).attr("data-slick-index",e)})),o.$slidesCache=o.$slides,o.reinit()},i.prototype.animateHeight=function(){var t=this;if(1===t.options.slidesToShow&&!0===t.options.adaptiveHeight&&!1===t.options.vertical){var e=t.$slides.eq(t.currentSlide).outerHeight(!0);t.$list.animate({height:e},t.options.speed)}},i.prototype.animateSlide=function(e,i){var n={},o=this;o.animateHeight(),!0===o.options.rtl&&!1===o.options.vertical&&(e=-e),!1===o.transformsEnabled?!1===o.options.vertical?o.$slideTrack.animate({left:e},o.options.speed,o.options.easing,i):o.$slideTrack.animate({top:e},o.options.speed,o.options.easing,i):!1===o.cssTransitions?(!0===o.options.rtl&&(o.currentLeft=-o.currentLeft),t({animStart:o.currentLeft}).animate({animStart:e},{duration:o.options.speed,easing:o.options.easing,step:function(t){t=Math.ceil(t),!1===o.options.vertical?(n[o.animType]="translate("+t+"px, 0px)",o.$slideTrack.css(n)):(n[o.animType]="translate(0px,"+t+"px)",o.$slideTrack.css(n))},complete:function(){i&&i.call()}})):(o.applyTransition(),e=Math.ceil(e),!1===o.options.vertical?n[o.animType]="translate3d("+e+"px, 0px, 0px)":n[o.animType]="translate3d(0px,"+e+"px, 0px)",o.$slideTrack.css(n),i&&setTimeout((function(){o.disableTransition(),i.call()}),o.options.speed))},i.prototype.getNavTarget=function(){var e=this.options.asNavFor;return e&&null!==e&&(e=t(e).not(this.$slider)),e},i.prototype.asNavFor=function(e){var i=this.getNavTarget();null!==i&&"object"==typeof i&&i.each((function(){var i=t(this).slick("getSlick");i.unslicked||i.slideHandler(e,!0)}))},i.prototype.applyTransition=function(t){var e=this,i={};!1===e.options.fade?i[e.transitionType]=e.transformType+" "+e.options.speed+"ms "+e.options.cssEase:i[e.transitionType]="opacity "+e.options.speed+"ms "+e.options.cssEase,!1===e.options.fade?e.$slideTrack.css(i):e.$slides.eq(t).css(i)},i.prototype.autoPlay=function(){var t=this;t.autoPlayClear(),t.slideCount>t.options.slidesToShow&&(t.autoPlayTimer=setInterval(t.autoPlayIterator,t.options.autoplaySpeed))},i.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},i.prototype.autoPlayIterator=function(){var t=this,e=t.currentSlide+t.options.slidesToScroll;t.paused||t.interrupted||t.focussed||(!1===t.options.infinite&&(1===t.direction&&t.currentSlide+1===t.slideCount-1?t.direction=0:0===t.direction&&(e=t.currentSlide-t.options.slidesToScroll,t.currentSlide-1==0&&(t.direction=1))),t.slideHandler(e))},i.prototype.buildArrows=function(){var e=this;!0===e.options.arrows&&(e.$prevArrow=t(e.options.prevArrow).addClass("slick-arrow"),e.$nextArrow=t(e.options.nextArrow).addClass("slick-arrow"),e.slideCount>e.options.slidesToShow?(e.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.prependTo(e.options.appendArrows),e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.appendTo(e.options.appendArrows),!0!==e.options.infinite&&e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):e.$prevArrow.add(e.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},i.prototype.buildDots=function(){var e,i,n=this;if(!0===n.options.dots&&n.slideCount>n.options.slidesToShow){for(n.$slider.addClass("slick-dotted"),i=t("<ul />").addClass(n.options.dotsClass),e=0;e<=n.getDotCount();e+=1)i.append(t("<li />").append(n.options.customPaging.call(this,n,e)));n.$dots=i.appendTo(n.options.appendDots),n.$dots.find("li").first().addClass("slick-active")}},i.prototype.buildOut=function(){var e=this;e.$slides=e.$slider.children(e.options.slide+":not(.slick-cloned)").addClass("slick-slide"),e.slideCount=e.$slides.length,e.$slides.each((function(e,i){t(i).attr("data-slick-index",e).data("originalStyling",t(i).attr("style")||"")})),e.$slider.addClass("slick-slider"),e.$slideTrack=0===e.slideCount?t('<div class="slick-track"/>').appendTo(e.$slider):e.$slides.wrapAll('<div class="slick-track"/>').parent(),e.$list=e.$slideTrack.wrap('<div class="slick-list"/>').parent(),e.$slideTrack.css("opacity",0),!0!==e.options.centerMode&&!0!==e.options.swipeToSlide||(e.options.slidesToScroll=1),t("img[data-lazy]",e.$slider).not("[src]").addClass("slick-loading"),e.setupInfinite(),e.buildArrows(),e.buildDots(),e.updateDots(),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),!0===e.options.draggable&&e.$list.addClass("draggable")},i.prototype.buildRows=function(){var t,e,i,n,o,s,r,a=this;if(n=document.createDocumentFragment(),s=a.$slider.children(),a.options.rows>0){for(r=a.options.slidesPerRow*a.options.rows,o=Math.ceil(s.length/r),t=0;t<o;t++){var l=document.createElement("div");for(e=0;e<a.options.rows;e++){var c=document.createElement("div");for(i=0;i<a.options.slidesPerRow;i++){var d=t*r+(e*a.options.slidesPerRow+i);s.get(d)&&c.appendChild(s.get(d))}l.appendChild(c)}n.appendChild(l)}a.$slider.empty().append(n),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},i.prototype.checkResponsive=function(e,i){var n,o,s,r=this,a=!1,l=r.$slider.width(),c=window.innerWidth||t(window).width();if("window"===r.respondTo?s=c:"slider"===r.respondTo?s=l:"min"===r.respondTo&&(s=Math.min(c,l)),r.options.responsive&&r.options.responsive.length&&null!==r.options.responsive){for(n in o=null,r.breakpoints)r.breakpoints.hasOwnProperty(n)&&(!1===r.originalSettings.mobileFirst?s<r.breakpoints[n]&&(o=r.breakpoints[n]):s>r.breakpoints[n]&&(o=r.breakpoints[n]));null!==o?null!==r.activeBreakpoint?(o!==r.activeBreakpoint||i)&&(r.activeBreakpoint=o,"unslick"===r.breakpointSettings[o]?r.unslick(o):(r.options=t.extend({},r.originalSettings,r.breakpointSettings[o]),!0===e&&(r.currentSlide=r.options.initialSlide),r.refresh(e)),a=o):(r.activeBreakpoint=o,"unslick"===r.breakpointSettings[o]?r.unslick(o):(r.options=t.extend({},r.originalSettings,r.breakpointSettings[o]),!0===e&&(r.currentSlide=r.options.initialSlide),r.refresh(e)),a=o):null!==r.activeBreakpoint&&(r.activeBreakpoint=null,r.options=r.originalSettings,!0===e&&(r.currentSlide=r.options.initialSlide),r.refresh(e),a=o),e||!1===a||r.$slider.trigger("breakpoint",[r,a])}},i.prototype.changeSlide=function(e,i){var n,o,s=this,r=t(e.currentTarget);switch(r.is("a")&&e.preventDefault(),r.is("li")||(r=r.closest("li")),n=s.slideCount%s.options.slidesToScroll!=0?0:(s.slideCount-s.currentSlide)%s.options.slidesToScroll,e.data.message){case"previous":o=0===n?s.options.slidesToScroll:s.options.slidesToShow-n,s.slideCount>s.options.slidesToShow&&s.slideHandler(s.currentSlide-o,!1,i);break;case"next":o=0===n?s.options.slidesToScroll:n,s.slideCount>s.options.slidesToShow&&s.slideHandler(s.currentSlide+o,!1,i);break;case"index":var a=0===e.data.index?0:e.data.index||r.index()*s.options.slidesToScroll;s.slideHandler(s.checkNavigable(a),!1,i),r.children().trigger("focus");break;default:return}},i.prototype.checkNavigable=function(t){var e,i;if(i=0,t>(e=this.getNavigableIndexes())[e.length-1])t=e[e.length-1];else for(var n in e){if(t<e[n]){t=i;break}i=e[n]}return t},i.prototype.cleanUpEvents=function(){var e=this;e.options.dots&&null!==e.$dots&&(t("li",e.$dots).off("click.slick",e.changeSlide).off("mouseenter.slick",t.proxy(e.interrupt,e,!0)).off("mouseleave.slick",t.proxy(e.interrupt,e,!1)),!0===e.options.accessibility&&e.$dots.off("keydown.slick",e.keyHandler)),e.$slider.off("focus.slick blur.slick"),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow&&e.$prevArrow.off("click.slick",e.changeSlide),e.$nextArrow&&e.$nextArrow.off("click.slick",e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow&&e.$prevArrow.off("keydown.slick",e.keyHandler),e.$nextArrow&&e.$nextArrow.off("keydown.slick",e.keyHandler))),e.$list.off("touchstart.slick mousedown.slick",e.swipeHandler),e.$list.off("touchmove.slick mousemove.slick",e.swipeHandler),e.$list.off("touchend.slick mouseup.slick",e.swipeHandler),e.$list.off("touchcancel.slick mouseleave.slick",e.swipeHandler),e.$list.off("click.slick",e.clickHandler),t(document).off(e.visibilityChange,e.visibility),e.cleanUpSlideEvents(),!0===e.options.accessibility&&e.$list.off("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&t(e.$slideTrack).children().off("click.slick",e.selectHandler),t(window).off("orientationchange.slick.slick-"+e.instanceUid,e.orientationChange),t(window).off("resize.slick.slick-"+e.instanceUid,e.resize),t("[draggable!=true]",e.$slideTrack).off("dragstart",e.preventDefault),t(window).off("load.slick.slick-"+e.instanceUid,e.setPosition)},i.prototype.cleanUpSlideEvents=function(){var e=this;e.$list.off("mouseenter.slick",t.proxy(e.interrupt,e,!0)),e.$list.off("mouseleave.slick",t.proxy(e.interrupt,e,!1))},i.prototype.cleanUpRows=function(){var t,e=this;e.options.rows>0&&((t=e.$slides.children().children()).removeAttr("style"),e.$slider.empty().append(t))},i.prototype.clickHandler=function(t){!1===this.shouldClick&&(t.stopImmediatePropagation(),t.stopPropagation(),t.preventDefault())},i.prototype.destroy=function(e){var i=this;i.autoPlayClear(),i.touchObject={},i.cleanUpEvents(),t(".slick-cloned",i.$slider).detach(),i.$dots&&i.$dots.remove(),i.$prevArrow&&i.$prevArrow.length&&(i.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),i.htmlExpr.test(i.options.prevArrow)&&i.$prevArrow.remove()),i.$nextArrow&&i.$nextArrow.length&&(i.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),i.htmlExpr.test(i.options.nextArrow)&&i.$nextArrow.remove()),i.$slides&&(i.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each((function(){t(this).attr("style",t(this).data("originalStyling"))})),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.detach(),i.$list.detach(),i.$slider.append(i.$slides)),i.cleanUpRows(),i.$slider.removeClass("slick-slider"),i.$slider.removeClass("slick-initialized"),i.$slider.removeClass("slick-dotted"),i.unslicked=!0,e||i.$slider.trigger("destroy",[i])},i.prototype.disableTransition=function(t){var e=this,i={};i[e.transitionType]="",!1===e.options.fade?e.$slideTrack.css(i):e.$slides.eq(t).css(i)},i.prototype.fadeSlide=function(t,e){var i=this;!1===i.cssTransitions?(i.$slides.eq(t).css({zIndex:i.options.zIndex}),i.$slides.eq(t).animate({opacity:1},i.options.speed,i.options.easing,e)):(i.applyTransition(t),i.$slides.eq(t).css({opacity:1,zIndex:i.options.zIndex}),e&&setTimeout((function(){i.disableTransition(t),e.call()}),i.options.speed))},i.prototype.fadeSlideOut=function(t){var e=this;!1===e.cssTransitions?e.$slides.eq(t).animate({opacity:0,zIndex:e.options.zIndex-2},e.options.speed,e.options.easing):(e.applyTransition(t),e.$slides.eq(t).css({opacity:0,zIndex:e.options.zIndex-2}))},i.prototype.filterSlides=i.prototype.slickFilter=function(t){var e=this;null!==t&&(e.$slidesCache=e.$slides,e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.filter(t).appendTo(e.$slideTrack),e.reinit())},i.prototype.focusHandler=function(){var e=this;e.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",(function(i){i.stopImmediatePropagation();var n=t(this);setTimeout((function(){e.options.pauseOnFocus&&(e.focussed=n.is(":focus"),e.autoPlay())}),0)}))},i.prototype.getCurrent=i.prototype.slickCurrentSlide=function(){return this.currentSlide},i.prototype.getDotCount=function(){var t=this,e=0,i=0,n=0;if(!0===t.options.infinite)if(t.slideCount<=t.options.slidesToShow)++n;else for(;e<t.slideCount;)++n,e=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;else if(!0===t.options.centerMode)n=t.slideCount;else if(t.options.asNavFor)for(;e<t.slideCount;)++n,e=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;else n=1+Math.ceil((t.slideCount-t.options.slidesToShow)/t.options.slidesToScroll);return n-1},i.prototype.getLeft=function(t){var e,i,n,o,s=this,r=0;return s.slideOffset=0,i=s.$slides.first().outerHeight(!0),!0===s.options.infinite?(s.slideCount>s.options.slidesToShow&&(s.slideOffset=s.slideWidth*s.options.slidesToShow*-1,o=-1,!0===s.options.vertical&&!0===s.options.centerMode&&(2===s.options.slidesToShow?o=-1.5:1===s.options.slidesToShow&&(o=-2)),r=i*s.options.slidesToShow*o),s.slideCount%s.options.slidesToScroll!=0&&t+s.options.slidesToScroll>s.slideCount&&s.slideCount>s.options.slidesToShow&&(t>s.slideCount?(s.slideOffset=(s.options.slidesToShow-(t-s.slideCount))*s.slideWidth*-1,r=(s.options.slidesToShow-(t-s.slideCount))*i*-1):(s.slideOffset=s.slideCount%s.options.slidesToScroll*s.slideWidth*-1,r=s.slideCount%s.options.slidesToScroll*i*-1))):t+s.options.slidesToShow>s.slideCount&&(s.slideOffset=(t+s.options.slidesToShow-s.slideCount)*s.slideWidth,r=(t+s.options.slidesToShow-s.slideCount)*i),s.slideCount<=s.options.slidesToShow&&(s.slideOffset=0,r=0),!0===s.options.centerMode&&s.slideCount<=s.options.slidesToShow?s.slideOffset=s.slideWidth*Math.floor(s.options.slidesToShow)/2-s.slideWidth*s.slideCount/2:!0===s.options.centerMode&&!0===s.options.infinite?s.slideOffset+=s.slideWidth*Math.floor(s.options.slidesToShow/2)-s.slideWidth:!0===s.options.centerMode&&(s.slideOffset=0,s.slideOffset+=s.slideWidth*Math.floor(s.options.slidesToShow/2)),e=!1===s.options.vertical?t*s.slideWidth*-1+s.slideOffset:t*i*-1+r,!0===s.options.variableWidth&&(n=s.slideCount<=s.options.slidesToShow||!1===s.options.infinite?s.$slideTrack.children(".slick-slide").eq(t):s.$slideTrack.children(".slick-slide").eq(t+s.options.slidesToShow),e=!0===s.options.rtl?n[0]?-1*(s.$slideTrack.width()-n[0].offsetLeft-n.width()):0:n[0]?-1*n[0].offsetLeft:0,!0===s.options.centerMode&&(n=s.slideCount<=s.options.slidesToShow||!1===s.options.infinite?s.$slideTrack.children(".slick-slide").eq(t):s.$slideTrack.children(".slick-slide").eq(t+s.options.slidesToShow+1),e=!0===s.options.rtl?n[0]?-1*(s.$slideTrack.width()-n[0].offsetLeft-n.width()):0:n[0]?-1*n[0].offsetLeft:0,e+=(s.$list.width()-n.outerWidth())/2)),e},i.prototype.getOption=i.prototype.slickGetOption=function(t){return this.options[t]},i.prototype.getNavigableIndexes=function(){var t,e=this,i=0,n=0,o=[];for(!1===e.options.infinite?t=e.slideCount:(i=-1*e.options.slidesToScroll,n=-1*e.options.slidesToScroll,t=2*e.slideCount);i<t;)o.push(i),i=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;return o},i.prototype.getSlick=function(){return this},i.prototype.getSlideCount=function(){var e,i,n=this;return i=!0===n.options.centerMode?n.slideWidth*Math.floor(n.options.slidesToShow/2):0,!0===n.options.swipeToSlide?(n.$slideTrack.find(".slick-slide").each((function(o,s){if(s.offsetLeft-i+t(s).outerWidth()/2>-1*n.swipeLeft)return e=s,!1})),Math.abs(t(e).attr("data-slick-index")-n.currentSlide)||1):n.options.slidesToScroll},i.prototype.goTo=i.prototype.slickGoTo=function(t,e){this.changeSlide({data:{message:"index",index:parseInt(t)}},e)},i.prototype.init=function(e){var i=this;t(i.$slider).hasClass("slick-initialized")||(t(i.$slider).addClass("slick-initialized"),i.buildRows(),i.buildOut(),i.setProps(),i.startLoad(),i.loadSlider(),i.initializeEvents(),i.updateArrows(),i.updateDots(),i.checkResponsive(!0),i.focusHandler()),e&&i.$slider.trigger("init",[i]),!0===i.options.accessibility&&i.initADA(),i.options.autoplay&&(i.paused=!1,i.autoPlay())},i.prototype.initADA=function(){var e=this,i=Math.ceil(e.slideCount/e.options.slidesToShow),n=e.getNavigableIndexes().filter((function(t){return t>=0&&t<e.slideCount}));e.$slides.add(e.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==e.$dots&&(e.$slides.not(e.$slideTrack.find(".slick-cloned")).each((function(i){var o=n.indexOf(i);if(t(this).attr({role:"tabpanel",id:"slick-slide"+e.instanceUid+i,tabindex:-1}),-1!==o){var s="slick-slide-control"+e.instanceUid+o;t("#"+s).length&&t(this).attr({"aria-describedby":s})}})),e.$dots.attr("role","tablist").find("li").each((function(o){var s=n[o];t(this).attr({role:"presentation"}),t(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+e.instanceUid+o,"aria-controls":"slick-slide"+e.instanceUid+s,"aria-label":o+1+" of "+i,"aria-selected":null,tabindex:"-1"})})).eq(e.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var o=e.currentSlide,s=o+e.options.slidesToShow;o<s;o++)e.options.focusOnChange?e.$slides.eq(o).attr({tabindex:"0"}):e.$slides.eq(o).removeAttr("tabindex");e.activateADA()},i.prototype.initArrowEvents=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},t.changeSlide),t.$nextArrow.off("click.slick").on("click.slick",{message:"next"},t.changeSlide),!0===t.options.accessibility&&(t.$prevArrow.on("keydown.slick",t.keyHandler),t.$nextArrow.on("keydown.slick",t.keyHandler)))},i.prototype.initDotEvents=function(){var e=this;!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&(t("li",e.$dots).on("click.slick",{message:"index"},e.changeSlide),!0===e.options.accessibility&&e.$dots.on("keydown.slick",e.keyHandler)),!0===e.options.dots&&!0===e.options.pauseOnDotsHover&&e.slideCount>e.options.slidesToShow&&t("li",e.$dots).on("mouseenter.slick",t.proxy(e.interrupt,e,!0)).on("mouseleave.slick",t.proxy(e.interrupt,e,!1))},i.prototype.initSlideEvents=function(){var e=this;e.options.pauseOnHover&&(e.$list.on("mouseenter.slick",t.proxy(e.interrupt,e,!0)),e.$list.on("mouseleave.slick",t.proxy(e.interrupt,e,!1)))},i.prototype.initializeEvents=function(){var e=this;e.initArrowEvents(),e.initDotEvents(),e.initSlideEvents(),e.$list.on("touchstart.slick mousedown.slick",{action:"start"},e.swipeHandler),e.$list.on("touchmove.slick mousemove.slick",{action:"move"},e.swipeHandler),e.$list.on("touchend.slick mouseup.slick",{action:"end"},e.swipeHandler),e.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},e.swipeHandler),e.$list.on("click.slick",e.clickHandler),t(document).on(e.visibilityChange,t.proxy(e.visibility,e)),!0===e.options.accessibility&&e.$list.on("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&t(e.$slideTrack).children().on("click.slick",e.selectHandler),t(window).on("orientationchange.slick.slick-"+e.instanceUid,t.proxy(e.orientationChange,e)),t(window).on("resize.slick.slick-"+e.instanceUid,t.proxy(e.resize,e)),t("[draggable!=true]",e.$slideTrack).on("dragstart",e.preventDefault),t(window).on("load.slick.slick-"+e.instanceUid,e.setPosition),t(e.setPosition)},i.prototype.initUI=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.show(),t.$nextArrow.show()),!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&t.$dots.show()},i.prototype.keyHandler=function(t){var e=this;t.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===t.keyCode&&!0===e.options.accessibility?e.changeSlide({data:{message:!0===e.options.rtl?"next":"previous"}}):39===t.keyCode&&!0===e.options.accessibility&&e.changeSlide({data:{message:!0===e.options.rtl?"previous":"next"}}))},i.prototype.lazyLoad=function(){var e,i,n,o=this;function s(e){t("img[data-lazy]",e).each((function(){var e=t(this),i=t(this).attr("data-lazy"),n=t(this).attr("data-srcset"),s=t(this).attr("data-sizes")||o.$slider.attr("data-sizes"),r=document.createElement("img");r.onload=function(){e.animate({opacity:0},100,(function(){n&&(e.attr("srcset",n),s&&e.attr("sizes",s)),e.attr("src",i).animate({opacity:1},200,(function(){e.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")})),o.$slider.trigger("lazyLoaded",[o,e,i])}))},r.onerror=function(){e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),o.$slider.trigger("lazyLoadError",[o,e,i])},r.src=i}))}if(!0===o.options.centerMode?!0===o.options.infinite?n=(i=o.currentSlide+(o.options.slidesToShow/2+1))+o.options.slidesToShow+2:(i=Math.max(0,o.currentSlide-(o.options.slidesToShow/2+1)),n=o.options.slidesToShow/2+1+2+o.currentSlide):(i=o.options.infinite?o.options.slidesToShow+o.currentSlide:o.currentSlide,n=Math.ceil(i+o.options.slidesToShow),!0===o.options.fade&&(i>0&&i--,n<=o.slideCount&&n++)),e=o.$slider.find(".slick-slide").slice(i,n),"anticipated"===o.options.lazyLoad)for(var r=i-1,a=n,l=o.$slider.find(".slick-slide"),c=0;c<o.options.slidesToScroll;c++)r<0&&(r=o.slideCount-1),e=(e=e.add(l.eq(r))).add(l.eq(a)),r--,a++;s(e),o.slideCount<=o.options.slidesToShow?s(o.$slider.find(".slick-slide")):o.currentSlide>=o.slideCount-o.options.slidesToShow?s(o.$slider.find(".slick-cloned").slice(0,o.options.slidesToShow)):0===o.currentSlide&&s(o.$slider.find(".slick-cloned").slice(-1*o.options.slidesToShow))},i.prototype.loadSlider=function(){var t=this;t.setPosition(),t.$slideTrack.css({opacity:1}),t.$slider.removeClass("slick-loading"),t.initUI(),"progressive"===t.options.lazyLoad&&t.progressiveLazyLoad()},i.prototype.next=i.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},i.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},i.prototype.pause=i.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},i.prototype.play=i.prototype.slickPlay=function(){var t=this;t.autoPlay(),t.options.autoplay=!0,t.paused=!1,t.focussed=!1,t.interrupted=!1},i.prototype.postSlide=function(e){var i=this;i.unslicked||(i.$slider.trigger("afterChange",[i,e]),i.animating=!1,i.slideCount>i.options.slidesToShow&&i.setPosition(),i.swipeLeft=null,i.options.autoplay&&i.autoPlay(),!0===i.options.accessibility&&(i.initADA(),i.options.focusOnChange&&t(i.$slides.get(i.currentSlide)).attr("tabindex",0).focus()))},i.prototype.prev=i.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},i.prototype.preventDefault=function(t){t.preventDefault()},i.prototype.progressiveLazyLoad=function(e){e=e||1;var i,n,o,s,r,a=this,l=t("img[data-lazy]",a.$slider);l.length?(i=l.first(),n=i.attr("data-lazy"),o=i.attr("data-srcset"),s=i.attr("data-sizes")||a.$slider.attr("data-sizes"),(r=document.createElement("img")).onload=function(){o&&(i.attr("srcset",o),s&&i.attr("sizes",s)),i.attr("src",n).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===a.options.adaptiveHeight&&a.setPosition(),a.$slider.trigger("lazyLoaded",[a,i,n]),a.progressiveLazyLoad()},r.onerror=function(){e<3?setTimeout((function(){a.progressiveLazyLoad(e+1)}),500):(i.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),a.$slider.trigger("lazyLoadError",[a,i,n]),a.progressiveLazyLoad())},r.src=n):a.$slider.trigger("allImagesLoaded",[a])},i.prototype.refresh=function(e){var i,n,o=this;n=o.slideCount-o.options.slidesToShow,!o.options.infinite&&o.currentSlide>n&&(o.currentSlide=n),o.slideCount<=o.options.slidesToShow&&(o.currentSlide=0),i=o.currentSlide,o.destroy(!0),t.extend(o,o.initials,{currentSlide:i}),o.init(),e||o.changeSlide({data:{message:"index",index:i}},!1)},i.prototype.registerBreakpoints=function(){var e,i,n,o=this,s=o.options.responsive||null;if("array"===t.type(s)&&s.length){for(e in o.respondTo=o.options.respondTo||"window",s)if(n=o.breakpoints.length-1,s.hasOwnProperty(e)){for(i=s[e].breakpoint;n>=0;)o.breakpoints[n]&&o.breakpoints[n]===i&&o.breakpoints.splice(n,1),n--;o.breakpoints.push(i),o.breakpointSettings[i]=s[e].settings}o.breakpoints.sort((function(t,e){return o.options.mobileFirst?t-e:e-t}))}},i.prototype.reinit=function(){var e=this;e.$slides=e.$slideTrack.children(e.options.slide).addClass("slick-slide"),e.slideCount=e.$slides.length,e.currentSlide>=e.slideCount&&0!==e.currentSlide&&(e.currentSlide=e.currentSlide-e.options.slidesToScroll),e.slideCount<=e.options.slidesToShow&&(e.currentSlide=0),e.registerBreakpoints(),e.setProps(),e.setupInfinite(),e.buildArrows(),e.updateArrows(),e.initArrowEvents(),e.buildDots(),e.updateDots(),e.initDotEvents(),e.cleanUpSlideEvents(),e.initSlideEvents(),e.checkResponsive(!1,!0),!0===e.options.focusOnSelect&&t(e.$slideTrack).children().on("click.slick",e.selectHandler),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),e.setPosition(),e.focusHandler(),e.paused=!e.options.autoplay,e.autoPlay(),e.$slider.trigger("reInit",[e])},i.prototype.resize=function(){var e=this;t(window).width()!==e.windowWidth&&(clearTimeout(e.windowDelay),e.windowDelay=window.setTimeout((function(){e.windowWidth=t(window).width(),e.checkResponsive(),e.unslicked||e.setPosition()}),50))},i.prototype.removeSlide=i.prototype.slickRemove=function(t,e,i){var n=this;if(t="boolean"==typeof t?!0===(e=t)?0:n.slideCount-1:!0===e?--t:t,n.slideCount<1||t<0||t>n.slideCount-1)return!1;n.unload(),!0===i?n.$slideTrack.children().remove():n.$slideTrack.children(this.options.slide).eq(t).remove(),n.$slides=n.$slideTrack.children(this.options.slide),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.append(n.$slides),n.$slidesCache=n.$slides,n.reinit()},i.prototype.setCSS=function(t){var e,i,n=this,o={};!0===n.options.rtl&&(t=-t),e="left"==n.positionProp?Math.ceil(t)+"px":"0px",i="top"==n.positionProp?Math.ceil(t)+"px":"0px",o[n.positionProp]=t,!1===n.transformsEnabled?n.$slideTrack.css(o):(o={},!1===n.cssTransitions?(o[n.animType]="translate("+e+", "+i+")",n.$slideTrack.css(o)):(o[n.animType]="translate3d("+e+", "+i+", 0px)",n.$slideTrack.css(o)))},i.prototype.setDimensions=function(){var t=this;!1===t.options.vertical?!0===t.options.centerMode&&t.$list.css({padding:"0px "+t.options.centerPadding}):(t.$list.height(t.$slides.first().outerHeight(!0)*t.options.slidesToShow),!0===t.options.centerMode&&t.$list.css({padding:t.options.centerPadding+" 0px"})),t.listWidth=t.$list.width(),t.listHeight=t.$list.height(),!1===t.options.vertical&&!1===t.options.variableWidth?(t.slideWidth=Math.ceil(t.listWidth/t.options.slidesToShow),t.$slideTrack.width(Math.ceil(t.slideWidth*t.$slideTrack.children(".slick-slide").length))):!0===t.options.variableWidth?t.$slideTrack.width(5e3*t.slideCount):(t.slideWidth=Math.ceil(t.listWidth),t.$slideTrack.height(Math.ceil(t.$slides.first().outerHeight(!0)*t.$slideTrack.children(".slick-slide").length)));var e=t.$slides.first().outerWidth(!0)-t.$slides.first().width();!1===t.options.variableWidth&&t.$slideTrack.children(".slick-slide").width(t.slideWidth-e)},i.prototype.setFade=function(){var e,i=this;i.$slides.each((function(n,o){e=i.slideWidth*n*-1,!0===i.options.rtl?t(o).css({position:"relative",right:e,top:0,zIndex:i.options.zIndex-2,opacity:0}):t(o).css({position:"relative",left:e,top:0,zIndex:i.options.zIndex-2,opacity:0})})),i.$slides.eq(i.currentSlide).css({zIndex:i.options.zIndex-1,opacity:1})},i.prototype.setHeight=function(){var t=this;if(1===t.options.slidesToShow&&!0===t.options.adaptiveHeight&&!1===t.options.vertical){var e=t.$slides.eq(t.currentSlide).outerHeight(!0);t.$list.css("height",e)}},i.prototype.setOption=i.prototype.slickSetOption=function(){var e,i,n,o,s,r=this,a=!1;if("object"===t.type(arguments[0])?(n=arguments[0],a=arguments[1],s="multiple"):"string"===t.type(arguments[0])&&(n=arguments[0],o=arguments[1],a=arguments[2],"responsive"===arguments[0]&&"array"===t.type(arguments[1])?s="responsive":void 0!==arguments[1]&&(s="single")),"single"===s)r.options[n]=o;else if("multiple"===s)t.each(n,(function(t,e){r.options[t]=e}));else if("responsive"===s)for(i in o)if("array"!==t.type(r.options.responsive))r.options.responsive=[o[i]];else{for(e=r.options.responsive.length-1;e>=0;)r.options.responsive[e].breakpoint===o[i].breakpoint&&r.options.responsive.splice(e,1),e--;r.options.responsive.push(o[i])}a&&(r.unload(),r.reinit())},i.prototype.setPosition=function(){var t=this;t.setDimensions(),t.setHeight(),!1===t.options.fade?t.setCSS(t.getLeft(t.currentSlide)):t.setFade(),t.$slider.trigger("setPosition",[t])},i.prototype.setProps=function(){var t=this,e=document.body.style;t.positionProp=!0===t.options.vertical?"top":"left","top"===t.positionProp?t.$slider.addClass("slick-vertical"):t.$slider.removeClass("slick-vertical"),void 0===e.WebkitTransition&&void 0===e.MozTransition&&void 0===e.msTransition||!0===t.options.useCSS&&(t.cssTransitions=!0),t.options.fade&&("number"==typeof t.options.zIndex?t.options.zIndex<3&&(t.options.zIndex=3):t.options.zIndex=t.defaults.zIndex),void 0!==e.OTransform&&(t.animType="OTransform",t.transformType="-o-transform",t.transitionType="OTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(t.animType=!1)),void 0!==e.MozTransform&&(t.animType="MozTransform",t.transformType="-moz-transform",t.transitionType="MozTransition",void 0===e.perspectiveProperty&&void 0===e.MozPerspective&&(t.animType=!1)),void 0!==e.webkitTransform&&(t.animType="webkitTransform",t.transformType="-webkit-transform",t.transitionType="webkitTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(t.animType=!1)),void 0!==e.msTransform&&(t.animType="msTransform",t.transformType="-ms-transform",t.transitionType="msTransition",void 0===e.msTransform&&(t.animType=!1)),void 0!==e.transform&&!1!==t.animType&&(t.animType="transform",t.transformType="transform",t.transitionType="transition"),t.transformsEnabled=t.options.useTransform&&null!==t.animType&&!1!==t.animType},i.prototype.setSlideClasses=function(t){var e,i,n,o,s=this;if(i=s.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),s.$slides.eq(t).addClass("slick-current"),!0===s.options.centerMode){var r=s.options.slidesToShow%2==0?1:0;e=Math.floor(s.options.slidesToShow/2),!0===s.options.infinite&&(t>=e&&t<=s.slideCount-1-e?s.$slides.slice(t-e+r,t+e+1).addClass("slick-active").attr("aria-hidden","false"):(n=s.options.slidesToShow+t,i.slice(n-e+1+r,n+e+2).addClass("slick-active").attr("aria-hidden","false")),0===t?i.eq(i.length-1-s.options.slidesToShow).addClass("slick-center"):t===s.slideCount-1&&i.eq(s.options.slidesToShow).addClass("slick-center")),s.$slides.eq(t).addClass("slick-center")}else t>=0&&t<=s.slideCount-s.options.slidesToShow?s.$slides.slice(t,t+s.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):i.length<=s.options.slidesToShow?i.addClass("slick-active").attr("aria-hidden","false"):(o=s.slideCount%s.options.slidesToShow,n=!0===s.options.infinite?s.options.slidesToShow+t:t,s.options.slidesToShow==s.options.slidesToScroll&&s.slideCount-t<s.options.slidesToShow?i.slice(n-(s.options.slidesToShow-o),n+o).addClass("slick-active").attr("aria-hidden","false"):i.slice(n,n+s.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==s.options.lazyLoad&&"anticipated"!==s.options.lazyLoad||s.lazyLoad()},i.prototype.setupInfinite=function(){var e,i,n,o=this;if(!0===o.options.fade&&(o.options.centerMode=!1),!0===o.options.infinite&&!1===o.options.fade&&(i=null,o.slideCount>o.options.slidesToShow)){for(n=!0===o.options.centerMode?o.options.slidesToShow+1:o.options.slidesToShow,e=o.slideCount;e>o.slideCount-n;e-=1)i=e-1,t(o.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i-o.slideCount).prependTo(o.$slideTrack).addClass("slick-cloned");for(e=0;e<n+o.slideCount;e+=1)i=e,t(o.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i+o.slideCount).appendTo(o.$slideTrack).addClass("slick-cloned");o.$slideTrack.find(".slick-cloned").find("[id]").each((function(){t(this).attr("id","")}))}},i.prototype.interrupt=function(t){t||this.autoPlay(),this.interrupted=t},i.prototype.selectHandler=function(e){var i=this,n=t(e.target).is(".slick-slide")?t(e.target):t(e.target).parents(".slick-slide"),o=parseInt(n.attr("data-slick-index"));o||(o=0),i.slideCount<=i.options.slidesToShow?i.slideHandler(o,!1,!0):i.slideHandler(o)},i.prototype.slideHandler=function(t,e,i){var n,o,s,r,a,l,c=this;if(e=e||!1,!(!0===c.animating&&!0===c.options.waitForAnimate||!0===c.options.fade&&c.currentSlide===t))if(!1===e&&c.asNavFor(t),n=t,a=c.getLeft(n),r=c.getLeft(c.currentSlide),c.currentLeft=null===c.swipeLeft?r:c.swipeLeft,!1===c.options.infinite&&!1===c.options.centerMode&&(t<0||t>c.getDotCount()*c.options.slidesToScroll))!1===c.options.fade&&(n=c.currentSlide,!0!==i&&c.slideCount>c.options.slidesToShow?c.animateSlide(r,(function(){c.postSlide(n)})):c.postSlide(n));else if(!1===c.options.infinite&&!0===c.options.centerMode&&(t<0||t>c.slideCount-c.options.slidesToScroll))!1===c.options.fade&&(n=c.currentSlide,!0!==i&&c.slideCount>c.options.slidesToShow?c.animateSlide(r,(function(){c.postSlide(n)})):c.postSlide(n));else{if(c.options.autoplay&&clearInterval(c.autoPlayTimer),o=n<0?c.slideCount%c.options.slidesToScroll!=0?c.slideCount-c.slideCount%c.options.slidesToScroll:c.slideCount+n:n>=c.slideCount?c.slideCount%c.options.slidesToScroll!=0?0:n-c.slideCount:n,c.animating=!0,c.$slider.trigger("beforeChange",[c,c.currentSlide,o]),s=c.currentSlide,c.currentSlide=o,c.setSlideClasses(c.currentSlide),c.options.asNavFor&&(l=(l=c.getNavTarget()).slick("getSlick")).slideCount<=l.options.slidesToShow&&l.setSlideClasses(c.currentSlide),c.updateDots(),c.updateArrows(),!0===c.options.fade)return!0!==i?(c.fadeSlideOut(s),c.fadeSlide(o,(function(){c.postSlide(o)}))):c.postSlide(o),void c.animateHeight();!0!==i&&c.slideCount>c.options.slidesToShow?c.animateSlide(a,(function(){c.postSlide(o)})):c.postSlide(o)}},i.prototype.startLoad=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.hide(),t.$nextArrow.hide()),!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&t.$dots.hide(),t.$slider.addClass("slick-loading")},i.prototype.swipeDirection=function(){var t,e,i,n,o=this;return t=o.touchObject.startX-o.touchObject.curX,e=o.touchObject.startY-o.touchObject.curY,i=Math.atan2(e,t),(n=Math.round(180*i/Math.PI))<0&&(n=360-Math.abs(n)),n<=45&&n>=0||n<=360&&n>=315?!1===o.options.rtl?"left":"right":n>=135&&n<=225?!1===o.options.rtl?"right":"left":!0===o.options.verticalSwiping?n>=35&&n<=135?"down":"up":"vertical"},i.prototype.swipeEnd=function(t){var e,i,n=this;if(n.dragging=!1,n.swiping=!1,n.scrolling)return n.scrolling=!1,!1;if(n.interrupted=!1,n.shouldClick=!(n.touchObject.swipeLength>10),void 0===n.touchObject.curX)return!1;if(!0===n.touchObject.edgeHit&&n.$slider.trigger("edge",[n,n.swipeDirection()]),n.touchObject.swipeLength>=n.touchObject.minSwipe){switch(i=n.swipeDirection()){case"left":case"down":e=n.options.swipeToSlide?n.checkNavigable(n.currentSlide+n.getSlideCount()):n.currentSlide+n.getSlideCount(),n.currentDirection=0;break;case"right":case"up":e=n.options.swipeToSlide?n.checkNavigable(n.currentSlide-n.getSlideCount()):n.currentSlide-n.getSlideCount(),n.currentDirection=1}"vertical"!=i&&(n.slideHandler(e),n.touchObject={},n.$slider.trigger("swipe",[n,i]))}else n.touchObject.startX!==n.touchObject.curX&&(n.slideHandler(n.currentSlide),n.touchObject={})},i.prototype.swipeHandler=function(t){var e=this;if(!(!1===e.options.swipe||"ontouchend"in document&&!1===e.options.swipe||!1===e.options.draggable&&-1!==t.type.indexOf("mouse")))switch(e.touchObject.fingerCount=t.originalEvent&&void 0!==t.originalEvent.touches?t.originalEvent.touches.length:1,e.touchObject.minSwipe=e.listWidth/e.options.touchThreshold,!0===e.options.verticalSwiping&&(e.touchObject.minSwipe=e.listHeight/e.options.touchThreshold),t.data.action){case"start":e.swipeStart(t);break;case"move":e.swipeMove(t);break;case"end":e.swipeEnd(t)}},i.prototype.swipeMove=function(t){var e,i,n,o,s,r,a=this;return s=void 0!==t.originalEvent?t.originalEvent.touches:null,!(!a.dragging||a.scrolling||s&&1!==s.length)&&(e=a.getLeft(a.currentSlide),a.touchObject.curX=void 0!==s?s[0].pageX:t.clientX,a.touchObject.curY=void 0!==s?s[0].pageY:t.clientY,a.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(a.touchObject.curX-a.touchObject.startX,2))),r=Math.round(Math.sqrt(Math.pow(a.touchObject.curY-a.touchObject.startY,2))),!a.options.verticalSwiping&&!a.swiping&&r>4?(a.scrolling=!0,!1):(!0===a.options.verticalSwiping&&(a.touchObject.swipeLength=r),i=a.swipeDirection(),void 0!==t.originalEvent&&a.touchObject.swipeLength>4&&(a.swiping=!0,t.preventDefault()),o=(!1===a.options.rtl?1:-1)*(a.touchObject.curX>a.touchObject.startX?1:-1),!0===a.options.verticalSwiping&&(o=a.touchObject.curY>a.touchObject.startY?1:-1),n=a.touchObject.swipeLength,a.touchObject.edgeHit=!1,!1===a.options.infinite&&(0===a.currentSlide&&"right"===i||a.currentSlide>=a.getDotCount()&&"left"===i)&&(n=a.touchObject.swipeLength*a.options.edgeFriction,a.touchObject.edgeHit=!0),!1===a.options.vertical?a.swipeLeft=e+n*o:a.swipeLeft=e+n*(a.$list.height()/a.listWidth)*o,!0===a.options.verticalSwiping&&(a.swipeLeft=e+n*o),!0!==a.options.fade&&!1!==a.options.touchMove&&(!0===a.animating?(a.swipeLeft=null,!1):void a.setCSS(a.swipeLeft))))},i.prototype.swipeStart=function(t){var e,i=this;if(i.interrupted=!0,1!==i.touchObject.fingerCount||i.slideCount<=i.options.slidesToShow)return i.touchObject={},!1;void 0!==t.originalEvent&&void 0!==t.originalEvent.touches&&(e=t.originalEvent.touches[0]),i.touchObject.startX=i.touchObject.curX=void 0!==e?e.pageX:t.clientX,i.touchObject.startY=i.touchObject.curY=void 0!==e?e.pageY:t.clientY,i.dragging=!0},i.prototype.unfilterSlides=i.prototype.slickUnfilter=function(){var t=this;null!==t.$slidesCache&&(t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.appendTo(t.$slideTrack),t.reinit())},i.prototype.unload=function(){var e=this;t(".slick-cloned",e.$slider).remove(),e.$dots&&e.$dots.remove(),e.$prevArrow&&e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.remove(),e.$nextArrow&&e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.remove(),e.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},i.prototype.unslick=function(t){var e=this;e.$slider.trigger("unslick",[e,t]),e.destroy()},i.prototype.updateArrows=function(){var t=this;Math.floor(t.options.slidesToShow/2),!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&!t.options.infinite&&(t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===t.currentSlide?(t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):(t.currentSlide>=t.slideCount-t.options.slidesToShow&&!1===t.options.centerMode||t.currentSlide>=t.slideCount-1&&!0===t.options.centerMode)&&(t.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},i.prototype.updateDots=function(){var t=this;null!==t.$dots&&(t.$dots.find("li").removeClass("slick-active").end(),t.$dots.find("li").eq(Math.floor(t.currentSlide/t.options.slidesToScroll)).addClass("slick-active"))},i.prototype.visibility=function(){var t=this;t.options.autoplay&&(document[t.hidden]?t.interrupted=!0:t.interrupted=!1)},t.fn.slick=function(){var t,e,n=this,o=arguments[0],s=Array.prototype.slice.call(arguments,1),r=n.length;for(t=0;t<r;t++)if("object"==typeof o||void 0===o?n[t].slick=new i(n[t],o):e=n[t].slick[o].apply(n[t].slick,s),void 0!==e)return e;return n}})),
/*!
 * Pikaday
 *
 * Copyright Â© 2014 David Bushell | BSD & MIT license | https://github.com/Pikaday/Pikaday
 */
function(t,e){"use strict";var i;if("object"==typeof exports){try{i=require("moment")}catch(t){}module.exports=e(i)}else"function"==typeof define&&define.amd?define((function(t){try{i=t("moment")}catch(t){}return e(i)})):t.Pikaday=e(t.moment)}(this,(function(t){"use strict";var e="function"==typeof t,i=!!window.addEventListener,n=window.document,o=window.setTimeout,s=function(t,e,n,o){i?t.addEventListener(e,n,!!o):t.attachEvent("on"+e,n)},r=function(t,e,n,o){i?t.removeEventListener(e,n,!!o):t.detachEvent("on"+e,n)},a=function(t,e){return-1!==(" "+t.className+" ").indexOf(" "+e+" ")},l=function(t,e){a(t,e)||(t.className=""===t.className?e:t.className+" "+e)},c=function(t,e){var i;t.className=(i=(" "+t.className+" ").replace(" "+e+" "," ")).trim?i.trim():i.replace(/^\s+|\s+$/g,"")},d=function(t){return/Array/.test(Object.prototype.toString.call(t))},u=function(t){return/Date/.test(Object.prototype.toString.call(t))&&!isNaN(t.getTime())},h=function(t){var e=t.getDay();return 0===e||6===e},p=function(t){return t%4==0&&t%100!=0||t%400==0},f=function(t,e){return[31,p(t)?29:28,31,30,31,30,31,31,30,31,30,31][e]},g=function(t){u(t)&&t.setHours(0,0,0,0)},m=function(t,e){return t.getTime()===e.getTime()},y=function(t,e,i){var n,o;for(n in e)(o=void 0!==t[n])&&"object"==typeof e[n]&&null!==e[n]&&void 0===e[n].nodeName?u(e[n])?i&&(t[n]=new Date(e[n].getTime())):d(e[n])?i&&(t[n]=e[n].slice(0)):t[n]=y({},e[n],i):!i&&o||(t[n]=e[n]);return t},b=function(t,e,i){var o;n.createEvent?((o=n.createEvent("HTMLEvents")).initEvent(e,!0,!1),o=y(o,i),t.dispatchEvent(o)):n.createEventObject&&(o=n.createEventObject(),o=y(o,i),t.fireEvent("on"+e,o))},v=function(t){return t.month<0&&(t.year-=Math.ceil(Math.abs(t.month)/12),t.month+=12),t.month>11&&(t.year+=Math.floor(Math.abs(t.month)/12),t.month-=12),t},x={field:null,bound:void 0,ariaLabel:"Use the arrow keys to pick a date",position:"bottom left",reposition:!0,format:"YYYY-MM-DD",toString:null,parse:null,defaultDate:null,setDefaultDate:!1,firstDay:0,firstWeekOfYearMinDays:4,formatStrict:!1,minDate:null,maxDate:null,yearRange:10,showWeekNumber:!1,pickWholeWeek:!1,minYear:0,maxYear:9999,minMonth:void 0,maxMonth:void 0,startRange:null,endRange:null,isRTL:!1,yearSuffix:"",showMonthAfterYear:!1,showDaysInNextAndPreviousMonths:!1,enableSelectionDaysInNextAndPreviousMonths:!1,numberOfMonths:1,mainCalendar:"left",container:void 0,blurFieldOnSelect:!0,i18n:{previousMonth:"Previous Month",nextMonth:"Next Month",months:["January","February","March","April","May","June","July","August","September","October","November","December"],weekdays:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],weekdaysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"]},theme:null,events:[],onSelect:null,onOpen:null,onClose:null,onDraw:null,keyboardInput:!0},_=function(t,e,i){for(e+=t.firstDay;e>=7;)e-=7;return i?t.i18n.weekdaysShort[e]:t.i18n.weekdays[e]},w=function(t){var e=[],i="false";if(t.isEmpty){if(!t.showDaysInNextAndPreviousMonths)return'<td class="is-empty"></td>';e.push("is-outside-current-month"),t.enableSelectionDaysInNextAndPreviousMonths||e.push("is-selection-disabled")}return t.isDisabled&&e.push("is-disabled"),t.isToday&&e.push("is-today"),t.isSelected&&(e.push("is-selected"),i="true"),t.hasEvent&&e.push("has-event"),t.isInRange&&e.push("is-inrange"),t.isStartRange&&e.push("is-startrange"),t.isEndRange&&e.push("is-endrange"),'<td data-day="'+t.day+'" class="'+e.join(" ")+'" aria-selected="'+i+'"><button class="pika-button pika-day" type="button" data-pika-year="'+t.year+'" data-pika-month="'+t.month+'" data-pika-day="'+t.day+'">'+t.day+"</button></td>"},k=function(i,n,o,s){var r=new Date(o,n,i);return'<td class="pika-week">'+(e?t(r).isoWeek():function(t,e){t.setHours(0,0,0,0);var i=t.getDate(),n=t.getDay(),o=e,s=o-1,r=function(t){return(t+7-1)%7};t.setDate(i+s-r(n));var a=new Date(t.getFullYear(),0,o),l=(t.getTime()-a.getTime())/864e5;return 1+Math.round((l-s+r(a.getDay()))/7)}(r,s))+"</td>"},S=function(t,e,i,n){return'<tr class="pika-row'+(i?" pick-whole-week":"")+(n?" is-selected":"")+'">'+(e?t.reverse():t).join("")+"</tr>"},T=function(t,e,i,n,o,s){var r,a,l,c,u,h=t._o,p=i===h.minYear,f=i===h.maxYear,g='<div id="'+s+'" class="pika-title" role="heading" aria-live="assertive">',m=!0,y=!0;for(l=[],r=0;r<12;r++)l.push('<option value="'+(i===o?r-e:12+r-e)+'"'+(r===n?' selected="selected"':"")+(p&&r<h.minMonth||f&&r>h.maxMonth?' disabled="disabled"':"")+">"+h.i18n.months[r]+"</option>");for(c='<div class="pika-label">'+h.i18n.months[n]+'<select class="pika-select pika-select-month" tabindex="-1">'+l.join("")+"</select></div>",d(h.yearRange)?(r=h.yearRange[0],a=h.yearRange[1]+1):(r=i-h.yearRange,a=1+i+h.yearRange),l=[];r<a&&r<=h.maxYear;r++)r>=h.minYear&&l.push('<option value="'+r+'"'+(r===i?' selected="selected"':"")+">"+r+"</option>");return u='<div class="pika-label">'+i+h.yearSuffix+'<select class="pika-select pika-select-year" tabindex="-1">'+l.join("")+"</select></div>",h.showMonthAfterYear?g+=u+c:g+=c+u,p&&(0===n||h.minMonth>=n)&&(m=!1),f&&(11===n||h.maxMonth<=n)&&(y=!1),0===e&&(g+='<button class="pika-prev'+(m?"":" is-disabled")+'" type="button">'+h.i18n.previousMonth+"</button>"),e===t._o.numberOfMonths-1&&(g+='<button class="pika-next'+(y?"":" is-disabled")+'" type="button">'+h.i18n.nextMonth+"</button>"),g+"</div>"},C=function(t,e,i){return'<table cellpadding="0" cellspacing="0" class="pika-table" role="grid" aria-labelledby="'+i+'">'+function(t){var e,i=[];for(t.showWeekNumber&&i.push("<th></th>"),e=0;e<7;e++)i.push('<th scope="col"><abbr title="'+_(t,e)+'">'+_(t,e,!0)+"</abbr></th>");return"<thead><tr>"+(t.isRTL?i.reverse():i).join("")+"</tr></thead>"}(t)+("<tbody>"+e.join("")+"</tbody></table>")},M=function(r){var l=this,c=l.config(r);l._onMouseDown=function(t){if(l._v){var e=(t=t||window.event).target||t.srcElement;if(e)if(a(e,"is-disabled")||(!a(e,"pika-button")||a(e,"is-empty")||a(e.parentNode,"is-disabled")?a(e,"pika-prev")?l.prevMonth():a(e,"pika-next")&&l.nextMonth():(l.setDate(new Date(e.getAttribute("data-pika-year"),e.getAttribute("data-pika-month"),e.getAttribute("data-pika-day"))),c.bound&&o((function(){l.hide(),c.blurFieldOnSelect&&c.field&&c.field.blur()}),100))),a(e,"pika-select"))l._c=!0;else{if(!t.preventDefault)return t.returnValue=!1,!1;t.preventDefault()}}},l._onChange=function(t){var e=(t=t||window.event).target||t.srcElement;e&&(a(e,"pika-select-month")?l.gotoMonth(e.value):a(e,"pika-select-year")&&l.gotoYear(e.value))},l._onKeyChange=function(t){if(t=t||window.event,l.isVisible())switch(t.keyCode){case 13:case 27:c.field&&c.field.blur();break;case 37:l.adjustDate("subtract",1);break;case 38:l.adjustDate("subtract",7);break;case 39:l.adjustDate("add",1);break;case 40:l.adjustDate("add",7);break;case 8:case 46:l.setDate(null)}},l._parseFieldValue=function(){if(c.parse)return c.parse(c.field.value,c.format);if(e){var i=t(c.field.value,c.format,c.formatStrict);return i&&i.isValid()?i.toDate():null}return new Date(Date.parse(c.field.value))},l._onInputChange=function(t){var e;t.firedBy!==l&&(e=l._parseFieldValue(),u(e)&&l.setDate(e),l._v||l.show())},l._onInputFocus=function(){l.show()},l._onInputClick=function(){l.show()},l._onInputBlur=function(){var t=n.activeElement;do{if(a(t,"pika-single"))return}while(t=t.parentNode);l._c||(l._b=o((function(){l.hide()}),50)),l._c=!1},l._onClick=function(t){var e=(t=t||window.event).target||t.srcElement,n=e;if(e){!i&&a(e,"pika-select")&&(e.onchange||(e.setAttribute("onchange","return;"),s(e,"change",l._onChange)));do{if(a(n,"pika-single")||n===c.trigger)return}while(n=n.parentNode);l._v&&e!==c.trigger&&n!==c.trigger&&l.hide()}},l.el=n.createElement("div"),l.el.className="pika-single"+(c.isRTL?" is-rtl":"")+(c.theme?" "+c.theme:""),s(l.el,"mousedown",l._onMouseDown,!0),s(l.el,"touchend",l._onMouseDown,!0),s(l.el,"change",l._onChange),c.keyboardInput&&s(n,"keydown",l._onKeyChange),c.field&&(c.container?c.container.appendChild(l.el):c.bound?n.body.appendChild(l.el):c.field.parentNode.insertBefore(l.el,c.field.nextSibling),s(c.field,"change",l._onInputChange),c.defaultDate||(c.defaultDate=l._parseFieldValue(),c.setDefaultDate=!0));var d=c.defaultDate;u(d)?c.setDefaultDate?l.setDate(d,!0):l.gotoDate(d):l.gotoDate(new Date),c.bound?(this.hide(),l.el.className+=" is-bound",s(c.trigger,"click",l._onInputClick),s(c.trigger,"focus",l._onInputFocus),s(c.trigger,"blur",l._onInputBlur)):this.show()};return M.prototype={config:function(t){this._o||(this._o=y({},x,!0));var e=y(this._o,t,!0);e.isRTL=!!e.isRTL,e.field=e.field&&e.field.nodeName?e.field:null,e.theme="string"==typeof e.theme&&e.theme?e.theme:null,e.bound=!!(void 0!==e.bound?e.field&&e.bound:e.field),e.trigger=e.trigger&&e.trigger.nodeName?e.trigger:e.field,e.disableWeekends=!!e.disableWeekends,e.disableDayFn="function"==typeof e.disableDayFn?e.disableDayFn:null;var i=parseInt(e.numberOfMonths,10)||1;if(e.numberOfMonths=i>4?4:i,u(e.minDate)||(e.minDate=!1),u(e.maxDate)||(e.maxDate=!1),e.minDate&&e.maxDate&&e.maxDate<e.minDate&&(e.maxDate=e.minDate=!1),e.minDate&&this.setMinDate(e.minDate),e.maxDate&&this.setMaxDate(e.maxDate),d(e.yearRange)){var n=(new Date).getFullYear()-10;e.yearRange[0]=parseInt(e.yearRange[0],10)||n,e.yearRange[1]=parseInt(e.yearRange[1],10)||n}else e.yearRange=Math.abs(parseInt(e.yearRange,10))||x.yearRange,e.yearRange>100&&(e.yearRange=100);return e},toString:function(i){return i=i||this._o.format,u(this._d)?this._o.toString?this._o.toString(this._d,i):e?t(this._d).format(i):this._d.toDateString():""},getMoment:function(){return e?t(this._d):null},setMoment:function(i,n){e&&t.isMoment(i)&&this.setDate(i.toDate(),n)},getDate:function(){return u(this._d)?new Date(this._d.getTime()):null},setDate:function(t,e){if(!t)return this._d=null,this._o.field&&(this._o.field.value="",b(this._o.field,"change",{firedBy:this})),this.draw();if("string"==typeof t&&(t=new Date(Date.parse(t))),u(t)){var i=this._o.minDate,n=this._o.maxDate;u(i)&&t<i?t=i:u(n)&&t>n&&(t=n),this._d=new Date(t.getTime()),g(this._d),this.gotoDate(this._d),this._o.field&&(this._o.field.value=this.toString(),b(this._o.field,"change",{firedBy:this})),e||"function"!=typeof this._o.onSelect||this._o.onSelect.call(this,this.getDate())}},clear:function(){this.setDate(null)},gotoDate:function(t){var e=!0;if(u(t)){if(this.calendars){var i=new Date(this.calendars[0].year,this.calendars[0].month,1),n=new Date(this.calendars[this.calendars.length-1].year,this.calendars[this.calendars.length-1].month,1),o=t.getTime();n.setMonth(n.getMonth()+1),n.setDate(n.getDate()-1),e=o<i.getTime()||n.getTime()<o}e&&(this.calendars=[{month:t.getMonth(),year:t.getFullYear()}],"right"===this._o.mainCalendar&&(this.calendars[0].month+=1-this._o.numberOfMonths)),this.adjustCalendars()}},adjustDate:function(t,e){var i,n=this.getDate()||new Date,o=24*parseInt(e)*60*60*1e3;"add"===t?i=new Date(n.valueOf()+o):"subtract"===t&&(i=new Date(n.valueOf()-o)),this.setDate(i)},adjustCalendars:function(){this.calendars[0]=v(this.calendars[0]);for(var t=1;t<this._o.numberOfMonths;t++)this.calendars[t]=v({month:this.calendars[0].month+t,year:this.calendars[0].year});this.draw()},gotoToday:function(){this.gotoDate(new Date)},gotoMonth:function(t){isNaN(t)||(this.calendars[0].month=parseInt(t,10),this.adjustCalendars())},nextMonth:function(){this.calendars[0].month++,this.adjustCalendars()},prevMonth:function(){this.calendars[0].month--,this.adjustCalendars()},gotoYear:function(t){isNaN(t)||(this.calendars[0].year=parseInt(t,10),this.adjustCalendars())},setMinDate:function(t){t instanceof Date?(g(t),this._o.minDate=t,this._o.minYear=t.getFullYear(),this._o.minMonth=t.getMonth()):(this._o.minDate=x.minDate,this._o.minYear=x.minYear,this._o.minMonth=x.minMonth,this._o.startRange=x.startRange),this.draw()},setMaxDate:function(t){t instanceof Date?(g(t),this._o.maxDate=t,this._o.maxYear=t.getFullYear(),this._o.maxMonth=t.getMonth()):(this._o.maxDate=x.maxDate,this._o.maxYear=x.maxYear,this._o.maxMonth=x.maxMonth,this._o.endRange=x.endRange),this.draw()},setStartRange:function(t){this._o.startRange=t},setEndRange:function(t){this._o.endRange=t},draw:function(t){if(this._v||t){var e,i=this._o,n=i.minYear,s=i.maxYear,r=i.minMonth,a=i.maxMonth,l="";this._y<=n&&(this._y=n,!isNaN(r)&&this._m<r&&(this._m=r)),this._y>=s&&(this._y=s,!isNaN(a)&&this._m>a&&(this._m=a));for(var c=0;c<i.numberOfMonths;c++)e="pika-title-"+Math.random().toString(36).replace(/[^a-z]+/g,"").substr(0,2),l+='<div class="pika-lendar">'+T(this,c,this.calendars[c].year,this.calendars[c].month,this.calendars[0].year,e)+this.render(this.calendars[c].year,this.calendars[c].month,e)+"</div>";this.el.innerHTML=l,i.bound&&"hidden"!==i.field.type&&o((function(){i.trigger.focus()}),1),"function"==typeof this._o.onDraw&&this._o.onDraw(this),i.bound&&i.field.setAttribute("aria-label",i.ariaLabel)}},adjustPosition:function(){var t,e,i,o,s,r,a,d,u,h,p,f;if(!this._o.container){if(this.el.style.position="absolute",e=t=this._o.trigger,i=this.el.offsetWidth,o=this.el.offsetHeight,s=window.innerWidth||n.documentElement.clientWidth,r=window.innerHeight||n.documentElement.clientHeight,a=window.pageYOffset||n.body.scrollTop||n.documentElement.scrollTop,p=!0,f=!0,"function"==typeof t.getBoundingClientRect)d=(h=t.getBoundingClientRect()).left+window.pageXOffset,u=h.bottom+window.pageYOffset;else for(d=e.offsetLeft,u=e.offsetTop+e.offsetHeight;e=e.offsetParent;)d+=e.offsetLeft,u+=e.offsetTop;(this._o.reposition&&d+i>s||this._o.position.indexOf("right")>-1&&d-i+t.offsetWidth>0)&&(d=d-i+t.offsetWidth,p=!1),(this._o.reposition&&u+o>r+a||this._o.position.indexOf("top")>-1&&u-o-t.offsetHeight>0)&&(u=u-o-t.offsetHeight,f=!1),this.el.style.left=d+"px",this.el.style.top=u+"px",l(this.el,p?"left-aligned":"right-aligned"),l(this.el,f?"bottom-aligned":"top-aligned"),c(this.el,p?"right-aligned":"left-aligned"),c(this.el,f?"top-aligned":"bottom-aligned")}},render:function(t,e,i){var n=this._o,o=new Date,s=f(t,e),r=new Date(t,e,1).getDay(),a=[],l=[];g(o),n.firstDay>0&&(r-=n.firstDay)<0&&(r+=7);for(var c=0===e?11:e-1,d=11===e?0:e+1,p=0===e?t-1:t,y=11===e?t+1:t,b=f(p,c),v=s+r,x=v;x>7;)x-=7;v+=7-x;for(var _=!1,T=0,M=0;T<v;T++){var D=new Date(t,e,T-r+1),A=!!u(this._d)&&m(D,this._d),P=m(D,o),O=-1!==n.events.indexOf(D.toDateString()),E=T<r||T>=s+r,L=T-r+1,$=e,R=t,I=n.startRange&&m(n.startRange,D),N=n.endRange&&m(n.endRange,D),j=n.startRange&&n.endRange&&n.startRange<D&&D<n.endRange;E&&(T<r?(L=b+L,$=c,R=p):(L-=s,$=d,R=y));var z={day:L,month:$,year:R,hasEvent:O,isSelected:A,isToday:P,isDisabled:n.minDate&&D<n.minDate||n.maxDate&&D>n.maxDate||n.disableWeekends&&h(D)||n.disableDayFn&&n.disableDayFn(D),isEmpty:E,isStartRange:I,isEndRange:N,isInRange:j,showDaysInNextAndPreviousMonths:n.showDaysInNextAndPreviousMonths,enableSelectionDaysInNextAndPreviousMonths:n.enableSelectionDaysInNextAndPreviousMonths};n.pickWholeWeek&&A&&(_=!0),l.push(w(z)),7==++M&&(n.showWeekNumber&&l.unshift(k(T-r,e,t,n.firstWeekOfYearMinDays)),a.push(S(l,n.isRTL,n.pickWholeWeek,_)),l=[],M=0,_=!1)}return C(n,a,i)},isVisible:function(){return this._v},show:function(){this.isVisible()||(this._v=!0,this.draw(),c(this.el,"is-hidden"),this._o.bound&&(s(n,"click",this._onClick),this.adjustPosition()),"function"==typeof this._o.onOpen&&this._o.onOpen.call(this))},hide:function(){var t=this._v;!1!==t&&(this._o.bound&&r(n,"click",this._onClick),this._o.container||(this.el.style.position="static",this.el.style.left="auto",this.el.style.top="auto"),l(this.el,"is-hidden"),this._v=!1,void 0!==t&&"function"==typeof this._o.onClose&&this._o.onClose.call(this))},destroy:function(){var t=this._o;this.hide(),r(this.el,"mousedown",this._onMouseDown,!0),r(this.el,"touchend",this._onMouseDown,!0),r(this.el,"change",this._onChange),t.keyboardInput&&r(n,"keydown",this._onKeyChange),t.field&&(r(t.field,"change",this._onInputChange),t.bound&&(r(t.trigger,"click",this._onInputClick),r(t.trigger,"focus",this._onInputFocus),r(t.trigger,"blur",this._onInputBlur))),this.el.parentNode&&this.el.parentNode.removeChild(this.el)}},M})),
/*!
 * Chart.js v3.4.1
 * https://www.chartjs.org
 * (c) 2021 Chart.js Contributors
 * Released under the MIT License
 */
function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).Chart=e()}(this,(function(){"use strict";const t="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function e(e,i,n){const o=n||(t=>Array.prototype.slice.call(t));let s=!1,r=[];return function(...n){r=o(n),s||(s=!0,t.call(window,()=>{s=!1,e.apply(i,r)}))}}function i(t,e){let i;return function(){return e?(clearTimeout(i),i=setTimeout(t,e)):t(),e}}const n=t=>"start"===t?"left":"end"===t?"right":"center",o=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2,s=(t,e,i,n)=>t===(n?"left":"right")?i:"center"===t?(e+i)/2:e;var r=new class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,i,n){const o=e.listeners[n],s=e.duration;o.forEach(n=>n({chart:t,initial:e.initial,numSteps:s,currentStep:Math.min(i-e.start,s)}))}_refresh(){const e=this;e._request||(e._running=!0,e._request=t.call(window,()=>{e._update(),e._request=null,e._running&&e._refresh()}))}_update(t=Date.now()){const e=this;let i=0;e._charts.forEach((n,o)=>{if(!n.running||!n.items.length)return;const s=n.items;let r,a=s.length-1,l=!1;for(;a>=0;--a)r=s[a],r._active?(r._total>n.duration&&(n.duration=r._total),r.tick(t),l=!0):(s[a]=s[s.length-1],s.pop());l&&(o.draw(),e._notify(o,n,t,"progress")),s.length||(n.running=!1,e._notify(o,n,t,"complete"),n.initial=!1),i+=s.length}),e._lastDate=t,0===i&&(e._running=!1)}_getAnims(t){const e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce((t,e)=>Math.max(t,e._duration),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const i=e.items;let n=i.length-1;for(;n>=0;--n)i[n].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}};
/*!
 * @kurkle/color v0.1.9
 * https://github.com/kurkle/color#readme
 * (c) 2020 Jukka Kurkela
 * Released under the MIT License
 */const a={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},l="0123456789ABCDEF",c=t=>l[15&t],d=t=>l[(240&t)>>4]+l[15&t],u=t=>(240&t)>>4==(15&t);function h(t){var e=function(t){return u(t.r)&&u(t.g)&&u(t.b)&&u(t.a)}(t)?c:d;return t?"#"+e(t.r)+e(t.g)+e(t.b)+(t.a<255?e(t.a):""):t}function p(t){return t+.5|0}const f=(t,e,i)=>Math.max(Math.min(t,i),e);function g(t){return f(p(2.55*t),0,255)}function m(t){return f(p(255*t),0,255)}function y(t){return f(p(t/2.55)/100,0,1)}function b(t){return f(p(100*t),0,100)}const v=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;const x=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function _(t,e,i){const n=e*Math.min(i,1-i),o=(e,o=(e+t/30)%12)=>i-n*Math.max(Math.min(o-3,9-o,1),-1);return[o(0),o(8),o(4)]}function w(t,e,i){const n=(n,o=(n+t/60)%6)=>i-i*e*Math.max(Math.min(o,4-o,1),0);return[n(5),n(3),n(1)]}function k(t,e,i){const n=_(t,1,.5);let o;for(e+i>1&&(o=1/(e+i),e*=o,i*=o),o=0;o<3;o++)n[o]*=1-e-i,n[o]+=e;return n}function S(t){const e=t.r/255,i=t.g/255,n=t.b/255,o=Math.max(e,i,n),s=Math.min(e,i,n),r=(o+s)/2;let a,l,c;return o!==s&&(c=o-s,l=r>.5?c/(2-o-s):c/(o+s),a=o===e?(i-n)/c+(i<n?6:0):o===i?(n-e)/c+2:(e-i)/c+4,a=60*a+.5),[0|a,l||0,r]}function T(t,e,i,n){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,n)).map(m)}function C(t,e,i){return T(_,t,e,i)}function M(t){return(t%360+360)%360}function D(t){const e=x.exec(t);let i,n=255;if(!e)return;e[5]!==i&&(n=e[6]?g(+e[5]):m(+e[5]));const o=M(+e[2]),s=+e[3]/100,r=+e[4]/100;return i="hwb"===e[1]?function(t,e,i){return T(k,t,e,i)}(o,s,r):"hsv"===e[1]?function(t,e,i){return T(w,t,e,i)}(o,s,r):C(o,s,r),{r:i[0],g:i[1],b:i[2],a:n}}const A={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},P={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let O;function E(t){O||(O=function(){const t={},e=Object.keys(P),i=Object.keys(A);let n,o,s,r,a;for(n=0;n<e.length;n++){for(r=a=e[n],o=0;o<i.length;o++)s=i[o],a=a.replace(s,A[s]);s=parseInt(P[r],16),t[a]=[s>>16&255,s>>8&255,255&s]}return t}(),O.transparent=[0,0,0,0]);const e=O[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}function L(t,e,i){if(t){let n=S(t);n[e]=Math.max(0,Math.min(n[e]+n[e]*i,0===e?360:1)),n=C(n),t.r=n[0],t.g=n[1],t.b=n[2]}}function $(t,e){return t?Object.assign(e||{},t):t}function R(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=m(t[3]))):(e=$(t,{r:0,g:0,b:0,a:1})).a=m(e.a),e}function I(t){return"r"===t.charAt(0)?function(t){const e=v.exec(t);let i,n,o,s=255;if(e){if(e[7]!==i){const t=+e[7];s=255&(e[8]?g(t):255*t)}return i=+e[1],n=+e[3],o=+e[5],i=255&(e[2]?g(i):i),n=255&(e[4]?g(n):n),o=255&(e[6]?g(o):o),{r:i,g:n,b:o,a:s}}}(t):D(t)}class N{constructor(t){if(t instanceof N)return t;const e=typeof t;let i;var n,o,s;"object"===e?i=R(t):"string"===e&&(s=(n=t).length,"#"===n[0]&&(4===s||5===s?o={r:255&17*a[n[1]],g:255&17*a[n[2]],b:255&17*a[n[3]],a:5===s?17*a[n[4]]:255}:7!==s&&9!==s||(o={r:a[n[1]]<<4|a[n[2]],g:a[n[3]]<<4|a[n[4]],b:a[n[5]]<<4|a[n[6]],a:9===s?a[n[7]]<<4|a[n[8]]:255})),i=o||E(t)||I(t)),this._rgb=i,this._valid=!!i}get valid(){return this._valid}get rgb(){var t=$(this._rgb);return t&&(t.a=y(t.a)),t}set rgb(t){this._rgb=R(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${y(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):this._rgb;var t}hexString(){return this._valid?h(this._rgb):this._rgb}hslString(){return this._valid?function(t){if(!t)return;const e=S(t),i=e[0],n=b(e[1]),o=b(e[2]);return t.a<255?`hsla(${i}, ${n}%, ${o}%, ${y(t.a)})`:`hsl(${i}, ${n}%, ${o}%)`}(this._rgb):this._rgb}mix(t,e){const i=this;if(t){const n=i.rgb,o=t.rgb;let s;const r=e===s?.5:e,a=2*r-1,l=n.a-o.a,c=((a*l==-1?a:(a+l)/(1+a*l))+1)/2;s=1-c,n.r=255&c*n.r+s*o.r+.5,n.g=255&c*n.g+s*o.g+.5,n.b=255&c*n.b+s*o.b+.5,n.a=r*n.a+(1-r)*o.a,i.rgb=n}return i}clone(){return new N(this.rgb)}alpha(t){return this._rgb.a=m(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=p(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return L(this._rgb,2,t),this}darken(t){return L(this._rgb,2,-t),this}saturate(t){return L(this._rgb,1,t),this}desaturate(t){return L(this._rgb,1,-t),this}rotate(t){return function(t,e){var i=S(t);i[0]=M(i[0]+e),i=C(i),t.r=i[0],t.g=i[1],t.b=i[2]}(this._rgb,t),this}}function j(t){return new N(t)}const z=t=>t instanceof CanvasGradient||t instanceof CanvasPattern;function H(t){return z(t)?t:j(t)}function F(t){return z(t)?t:j(t).saturate(.5).darken(.1).hexString()}function W(){}const B=function(){let t=0;return function(){return t++}}();function V(t){return null==t}function q(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.substr(0,7)&&"Array]"===e.substr(-6)}function Y(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}const U=t=>("number"==typeof t||t instanceof Number)&&isFinite(+t);function X(t,e){return U(t)?t:e}function K(t,e){return void 0===t?e:t}const G=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100:t/e,Q=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function J(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function Z(t,e,i,n){let o,s,r;if(q(t))if(s=t.length,n)for(o=s-1;o>=0;o--)e.call(i,t[o],o);else for(o=0;o<s;o++)e.call(i,t[o],o);else if(Y(t))for(r=Object.keys(t),s=r.length,o=0;o<s;o++)e.call(i,t[r[o]],r[o])}function tt(t,e){let i,n,o,s;if(!t||!e||t.length!==e.length)return!1;for(i=0,n=t.length;i<n;++i)if(o=t[i],s=e[i],o.datasetIndex!==s.datasetIndex||o.index!==s.index)return!1;return!0}function et(t){if(q(t))return t.map(et);if(Y(t)){const e=Object.create(null),i=Object.keys(t),n=i.length;let o=0;for(;o<n;++o)e[i[o]]=et(t[i[o]]);return e}return t}function it(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function nt(t,e,i,n){if(!it(t))return;const o=e[t],s=i[t];Y(o)&&Y(s)?ot(o,s,n):e[t]=et(s)}function ot(t,e,i){const n=q(e)?e:[e],o=n.length;if(!Y(t))return t;const s=(i=i||{}).merger||nt;for(let r=0;r<o;++r){if(!Y(e=n[r]))continue;const o=Object.keys(e);for(let n=0,r=o.length;n<r;++n)s(o[n],t,e,i)}return t}function st(t,e){return ot(t,e,{merger:rt})}function rt(t,e,i){if(!it(t))return;const n=e[t],o=i[t];Y(n)&&Y(o)?st(n,o):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=et(o))}function at(t,e){const i=t.indexOf(".",e);return-1===i?t.length:i}function lt(t,e){if(""===e)return t;let i=0,n=at(e,i);for(;t&&n>i;)t=t[e.substr(i,n-i)],i=n+1,n=at(e,i);return t}function ct(t){return t.charAt(0).toUpperCase()+t.slice(1)}const dt=t=>void 0!==t,ut=t=>"function"==typeof t,ht=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0},pt=Object.create(null),ft=Object.create(null);function gt(t,e){if(!e)return t;const i=e.split(".");for(let e=0,n=i.length;e<n;++e){const n=i[e];t=t[n]||(t[n]=Object.create(null))}return t}function mt(t,e,i){return"string"==typeof e?ot(gt(t,e),i):ot(gt(t,""),e)}var yt=new class{constructor(t){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>F(e.backgroundColor),this.hoverBorderColor=(t,e)=>F(e.borderColor),this.hoverColor=(t,e)=>F(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.describe(t)}set(t,e){return mt(this,t,e)}get(t){return gt(this,t)}describe(t,e){return mt(ft,t,e)}override(t,e){return mt(pt,t,e)}route(t,e,i,n){const o=gt(this,t),s=gt(this,i),r="_"+e;Object.defineProperties(o,{[r]:{value:o[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[r],e=s[n];return Y(t)?Object.assign({},e,t):K(t,e)},set(t){this[r]=t}}})}}({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});const bt=Math.PI,vt=2*bt,xt=vt+bt,_t=Number.POSITIVE_INFINITY,wt=bt/180,kt=bt/2,St=bt/4,Tt=2*bt/3,Ct=Math.log10,Mt=Math.sign;function Dt(t){const e=Math.round(t);t=Ot(t,e,t/1e3)?e:t;const i=Math.pow(10,Math.floor(Ct(t))),n=t/i;return(n<=1?1:n<=2?2:n<=5?5:10)*i}function At(t){const e=[],i=Math.sqrt(t);let n;for(n=1;n<i;n++)t%n==0&&(e.push(n),e.push(t/n));return i===(0|i)&&e.push(i),e.sort((t,e)=>t-e).pop(),e}function Pt(t){return!isNaN(parseFloat(t))&&isFinite(t)}function Ot(t,e,i){return Math.abs(t-e)<i}function Et(t,e){const i=Math.round(t);return i-e<=t&&i+e>=t}function Lt(t,e,i){let n,o,s;for(n=0,o=t.length;n<o;n++)s=t[n][i],isNaN(s)||(e.min=Math.min(e.min,s),e.max=Math.max(e.max,s))}function $t(t){return t*(bt/180)}function Rt(t){return t*(180/bt)}function It(t){if(!U(t))return;let e=1,i=0;for(;Math.round(t*e)/e!==t;)e*=10,i++;return i}function Nt(t,e){const i=e.x-t.x,n=e.y-t.y,o=Math.sqrt(i*i+n*n);let s=Math.atan2(n,i);return s<-.5*bt&&(s+=vt),{angle:s,distance:o}}function jt(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function zt(t,e){return(t-e+xt)%vt-bt}function Ht(t){return(t%vt+vt)%vt}function Ft(t,e,i,n){const o=Ht(t),s=Ht(e),r=Ht(i),a=Ht(s-o),l=Ht(r-o),c=Ht(o-s),d=Ht(o-r);return o===s||o===r||n&&s===r||a>l&&c<d}function Wt(t,e,i){return Math.max(e,Math.min(i,t))}function Bt(t){return Wt(t,-32768,32767)}function Vt(t){return!t||V(t.size)||V(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}function qt(t,e,i,n,o){let s=e[o];return s||(s=e[o]=t.measureText(o).width,i.push(o)),s>n&&(n=s),n}function Yt(t,e,i,n){let o=(n=n||{}).data=n.data||{},s=n.garbageCollect=n.garbageCollect||[];n.font!==e&&(o=n.data={},s=n.garbageCollect=[],n.font=e),t.save(),t.font=e;let r=0;const a=i.length;let l,c,d,u,h;for(l=0;l<a;l++)if(u=i[l],null!=u&&!0!==q(u))r=qt(t,o,s,r,u);else if(q(u))for(c=0,d=u.length;c<d;c++)h=u[c],null==h||q(h)||(r=qt(t,o,s,r,h));t.restore();const p=s.length/2;if(p>i.length){for(l=0;l<p;l++)delete o[s[l]];s.splice(0,p)}return r}function Ut(t,e,i){const n=t.currentDevicePixelRatio,o=0!==i?Math.max(i/2,.5):0;return Math.round((e-o)*n)/n+o}function Xt(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function Kt(t,e,i,n){let o,s,r,a,l;const c=e.pointStyle,d=e.rotation,u=e.radius;let h=(d||0)*wt;if(c&&"object"==typeof c&&(o=c.toString(),"[object HTMLImageElement]"===o||"[object HTMLCanvasElement]"===o))return t.save(),t.translate(i,n),t.rotate(h),t.drawImage(c,-c.width/2,-c.height/2,c.width,c.height),void t.restore();if(!(isNaN(u)||u<=0)){switch(t.beginPath(),c){default:t.arc(i,n,u,0,vt),t.closePath();break;case"triangle":t.moveTo(i+Math.sin(h)*u,n-Math.cos(h)*u),h+=Tt,t.lineTo(i+Math.sin(h)*u,n-Math.cos(h)*u),h+=Tt,t.lineTo(i+Math.sin(h)*u,n-Math.cos(h)*u),t.closePath();break;case"rectRounded":l=.516*u,a=u-l,s=Math.cos(h+St)*a,r=Math.sin(h+St)*a,t.arc(i-s,n-r,l,h-bt,h-kt),t.arc(i+r,n-s,l,h-kt,h),t.arc(i+s,n+r,l,h,h+kt),t.arc(i-r,n+s,l,h+kt,h+bt),t.closePath();break;case"rect":if(!d){a=Math.SQRT1_2*u,t.rect(i-a,n-a,2*a,2*a);break}h+=St;case"rectRot":s=Math.cos(h)*u,r=Math.sin(h)*u,t.moveTo(i-s,n-r),t.lineTo(i+r,n-s),t.lineTo(i+s,n+r),t.lineTo(i-r,n+s),t.closePath();break;case"crossRot":h+=St;case"cross":s=Math.cos(h)*u,r=Math.sin(h)*u,t.moveTo(i-s,n-r),t.lineTo(i+s,n+r),t.moveTo(i+r,n-s),t.lineTo(i-r,n+s);break;case"star":s=Math.cos(h)*u,r=Math.sin(h)*u,t.moveTo(i-s,n-r),t.lineTo(i+s,n+r),t.moveTo(i+r,n-s),t.lineTo(i-r,n+s),h+=St,s=Math.cos(h)*u,r=Math.sin(h)*u,t.moveTo(i-s,n-r),t.lineTo(i+s,n+r),t.moveTo(i+r,n-s),t.lineTo(i-r,n+s);break;case"line":s=Math.cos(h)*u,r=Math.sin(h)*u,t.moveTo(i-s,n-r),t.lineTo(i+s,n+r);break;case"dash":t.moveTo(i,n),t.lineTo(i+Math.cos(h)*u,n+Math.sin(h)*u)}t.fill(),e.borderWidth>0&&t.stroke()}}function Gt(t,e,i){return i=i||.5,t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function Qt(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function Jt(t){t.restore()}function Zt(t,e,i,n,o){if(!e)return t.lineTo(i.x,i.y);if("middle"===o){const n=(e.x+i.x)/2;t.lineTo(n,e.y),t.lineTo(n,i.y)}else"after"===o!=!!n?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y);t.lineTo(i.x,i.y)}function te(t,e,i,n){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(n?e.cp1x:e.cp2x,n?e.cp1y:e.cp2y,n?i.cp2x:i.cp1x,n?i.cp2y:i.cp1y,i.x,i.y)}function ee(t,e,i,n,o,s={}){const r=q(e)?e:[e],a=s.strokeWidth>0&&""!==s.strokeColor;let l,c;for(t.save(),t.font=o.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]);V(e.rotation)||t.rotate(e.rotation);e.color&&(t.fillStyle=e.color);e.textAlign&&(t.textAlign=e.textAlign);e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,s),l=0;l<r.length;++l)c=r[l],a&&(s.strokeColor&&(t.strokeStyle=s.strokeColor),V(s.strokeWidth)||(t.lineWidth=s.strokeWidth),t.strokeText(c,i,n,s.maxWidth)),t.fillText(c,i,n,s.maxWidth),ie(t,i,n,c,s),n+=o.lineHeight;t.restore()}function ie(t,e,i,n,o){if(o.strikethrough||o.underline){const s=t.measureText(n),r=e-s.actualBoundingBoxLeft,a=e+s.actualBoundingBoxRight,l=i-s.actualBoundingBoxAscent,c=i+s.actualBoundingBoxDescent,d=o.strikethrough?(l+c)/2:c;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=o.decorationWidth||2,t.moveTo(r,d),t.lineTo(a,d),t.stroke()}}function ne(t,e){const{x:i,y:n,w:o,h:s,radius:r}=e;t.arc(i+r.topLeft,n+r.topLeft,r.topLeft,-kt,bt,!0),t.lineTo(i,n+s-r.bottomLeft),t.arc(i+r.bottomLeft,n+s-r.bottomLeft,r.bottomLeft,bt,kt,!0),t.lineTo(i+o-r.bottomRight,n+s),t.arc(i+o-r.bottomRight,n+s-r.bottomRight,r.bottomRight,kt,0,!0),t.lineTo(i+o,n+r.topRight),t.arc(i+o-r.topRight,n+r.topRight,r.topRight,0,-kt,!0),t.lineTo(i+r.topLeft,n)}function oe(t,e,i){i=i||(i=>t[i]<e);let n,o=t.length-1,s=0;for(;o-s>1;)n=s+o>>1,i(n)?s=n:o=n;return{lo:s,hi:o}}const se=(t,e,i)=>oe(t,i,n=>t[n][e]<i),re=(t,e,i)=>oe(t,i,n=>t[n][e]>=i);function ae(t,e,i){let n=0,o=t.length;for(;n<o&&t[n]<e;)n++;for(;o>n&&t[o-1]>i;)o--;return n>0||o<t.length?t.slice(n,o):t}const le=["push","pop","shift","splice","unshift"];function ce(t,e){t._chartjs?t._chartjs.listeners.push(e):(Object.defineProperty(t,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[e]}}),le.forEach(e=>{const i="_onData"+ct(e),n=t[e];Object.defineProperty(t,e,{configurable:!0,enumerable:!1,value(...e){const o=n.apply(this,e);return t._chartjs.listeners.forEach(t=>{"function"==typeof t[i]&&t[i](...e)}),o}})}))}function de(t,e){const i=t._chartjs;if(!i)return;const n=i.listeners,o=n.indexOf(e);-1!==o&&n.splice(o,1),n.length>0||(le.forEach(e=>{delete t[e]}),delete t._chartjs)}function ue(t){const e=new Set;let i,n;for(i=0,n=t.length;i<n;++i)e.add(t[i]);return e.size===n?t:Array.from(e)}function he(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function pe(t,e,i){let n;return"string"==typeof t?(n=parseInt(t,10),-1!==t.indexOf("%")&&(n=n/100*e.parentNode[i])):n=t,n}const fe=t=>window.getComputedStyle(t,null);function ge(t,e){return fe(t).getPropertyValue(e)}const me=["top","right","bottom","left"];function ye(t,e,i){const n={};i=i?"-"+i:"";for(let o=0;o<4;o++){const s=me[o];n[s]=parseFloat(t[e+"-"+s+i])||0}return n.width=n.left+n.right,n.height=n.top+n.bottom,n}function be(t,e){const{canvas:i,currentDevicePixelRatio:n}=e,o=fe(i),s="border-box"===o.boxSizing,r=ye(o,"padding"),a=ye(o,"border","width"),{x:l,y:c,box:d}=function(t,e){const i=t.native||t,n=i.touches,o=n&&n.length?n[0]:i,{offsetX:s,offsetY:r}=o;let a,l,c=!1;if(((t,e,i)=>(t>0||e>0)&&(!i||!i.shadowRoot))(s,r,i.target))a=s,l=r;else{const t=e.getBoundingClientRect();a=o.clientX-t.left,l=o.clientY-t.top,c=!0}return{x:a,y:l,box:c}}(t,i),u=r.left+(d&&a.left),h=r.top+(d&&a.top);let{width:p,height:f}=e;return s&&(p-=r.width+a.width,f-=r.height+a.height),{x:Math.round((l-u)/p*i.width/n),y:Math.round((c-h)/f*i.height/n)}}const ve=t=>Math.round(10*t)/10;function xe(t,e,i,n){const o=fe(t),s=ye(o,"margin"),r=pe(o.maxWidth,t,"clientWidth")||_t,a=pe(o.maxHeight,t,"clientHeight")||_t,l=function(t,e,i){let n,o;if(void 0===e||void 0===i){const s=he(t);if(s){const t=s.getBoundingClientRect(),r=fe(s),a=ye(r,"border","width"),l=ye(r,"padding");e=t.width-l.width-a.width,i=t.height-l.height-a.height,n=pe(r.maxWidth,s,"clientWidth"),o=pe(r.maxHeight,s,"clientHeight")}else e=t.clientWidth,i=t.clientHeight}return{width:e,height:i,maxWidth:n||_t,maxHeight:o||_t}}(t,e,i);let{width:c,height:d}=l;if("content-box"===o.boxSizing){const t=ye(o,"border","width"),e=ye(o,"padding");c-=e.width+t.width,d-=e.height+t.height}return c=Math.max(0,c-s.width),d=Math.max(0,n?Math.floor(c/n):d-s.height),c=ve(Math.min(c,r,l.maxWidth)),d=ve(Math.min(d,a,l.maxHeight)),c&&!d&&(d=ve(c/2)),{width:c,height:d}}function _e(t,e,i){const n=e||1,o=Math.floor(t.height*n),s=Math.floor(t.width*n);t.height=o/n,t.width=s/n;const r=t.canvas;return r.style&&(i||!r.style.height&&!r.style.width)&&(r.style.height=t.height+"px",r.style.width=t.width+"px"),(t.currentDevicePixelRatio!==n||r.height!==o||r.width!==s)&&(t.currentDevicePixelRatio=n,r.height=o,r.width=s,t.ctx.setTransform(n,0,0,n,0,0),!0)}const we=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function ke(t,e){const i=ge(t,e),n=i&&i.match(/^(\d+)(\.\d+)?px$/);return n?+n[1]:void 0}function Se(t,e){return"native"in t?{x:t.x,y:t.y}:be(t,e)}function Te(t,e,i,n){const{controller:o,data:s,_sorted:r}=t,a=o._cachedMeta.iScale;if(a&&e===a.axis&&r&&s.length){const t=a._reversePixels?re:se;if(!n)return t(s,e,i);if(o._sharedOptions){const n=s[0],o="function"==typeof n.getRange&&n.getRange(e);if(o){const n=t(s,e,i-o),r=t(s,e,i+o);return{lo:n.lo,hi:r.hi}}}}return{lo:0,hi:s.length-1}}function Ce(t,e,i,n,o){const s=t.getSortedVisibleDatasetMetas(),r=i[e];for(let t=0,i=s.length;t<i;++t){const{index:i,data:a}=s[t],{lo:l,hi:c}=Te(s[t],e,r,o);for(let t=l;t<=c;++t){const e=a[t];e.skip||n(e,i,t)}}}function Me(t,e,i,n){const o=[];if(!Gt(e,t.chartArea,t._minPadding))return o;return Ce(t,i,e,(function(t,i,s){t.inRange(e.x,e.y,n)&&o.push({element:t,datasetIndex:i,index:s})}),!0),o}function De(t,e,i,n,o){const s=function(t){const e=-1!==t.indexOf("x"),i=-1!==t.indexOf("y");return function(t,n){const o=e?Math.abs(t.x-n.x):0,s=i?Math.abs(t.y-n.y):0;return Math.sqrt(Math.pow(o,2)+Math.pow(s,2))}}(i);let r=Number.POSITIVE_INFINITY,a=[];if(!Gt(e,t.chartArea,t._minPadding))return a;return Ce(t,i,e,(function(i,l,c){if(n&&!i.inRange(e.x,e.y,o))return;const d=i.getCenterPoint(o);if(!Gt(d,t.chartArea,t._minPadding))return;const u=s(e,d);u<r?(a=[{element:i,datasetIndex:l,index:c}],r=u):u===r&&a.push({element:i,datasetIndex:l,index:c})})),a}function Ae(t,e,i,n){const o=Se(e,t),s=[],r=i.axis,a="x"===r?"inXRange":"inYRange";let l=!1;return function(t,e){const i=t.getSortedVisibleDatasetMetas();let n,o,s;for(let t=0,r=i.length;t<r;++t){({index:n,data:o}=i[t]);for(let t=0,i=o.length;t<i;++t)s=o[t],s.skip||e(s,n,t)}}(t,(t,e,i)=>{t[a](o[r],n)&&s.push({element:t,datasetIndex:e,index:i}),t.inRange(o.x,o.y,n)&&(l=!0)}),i.intersect&&!l?[]:s}var Pe={modes:{index(t,e,i,n){const o=Se(e,t),s=i.axis||"x",r=i.intersect?Me(t,o,s,n):De(t,o,s,!1,n),a=[];return r.length?(t.getSortedVisibleDatasetMetas().forEach(t=>{const e=r[0].index,i=t.data[e];i&&!i.skip&&a.push({element:i,datasetIndex:t.index,index:e})}),a):[]},dataset(t,e,i,n){const o=Se(e,t),s=i.axis||"xy";let r=i.intersect?Me(t,o,s,n):De(t,o,s,!1,n);if(r.length>0){const e=r[0].datasetIndex,i=t.getDatasetMeta(e).data;r=[];for(let t=0;t<i.length;++t)r.push({element:i[t],datasetIndex:e,index:t})}return r},point:(t,e,i,n)=>Me(t,Se(e,t),i.axis||"xy",n),nearest:(t,e,i,n)=>De(t,Se(e,t),i.axis||"xy",i.intersect,n),x:(t,e,i,n)=>(i.axis="x",Ae(t,e,i,n)),y:(t,e,i,n)=>(i.axis="y",Ae(t,e,i,n))}};const Oe=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),Ee=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function Le(t,e){const i=(""+t).match(Oe);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}function $e(t,e){const i={},n=Y(e),o=n?Object.keys(e):e,s=Y(t)?n?i=>K(t[i],t[e[i]]):e=>t[e]:()=>t;for(const t of o)i[t]=+s(t)||0;return i}function Re(t){return $e(t,{top:"y",right:"x",bottom:"y",left:"x"})}function Ie(t){return $e(t,["topLeft","topRight","bottomLeft","bottomRight"])}function Ne(t){const e=Re(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function je(t,e){t=t||{},e=e||yt.font;let i=K(t.size,e.size);"string"==typeof i&&(i=parseInt(i,10));let n=K(t.style,e.style);n&&!(""+n).match(Ee)&&(console.warn('Invalid font style specified: "'+n+'"'),n="");const o={family:K(t.family,e.family),lineHeight:Le(K(t.lineHeight,e.lineHeight),i),size:i,style:n,weight:K(t.weight,e.weight),string:""};return o.string=Vt(o),o}function ze(t,e,i,n){let o,s,r,a=!0;for(o=0,s=t.length;o<s;++o)if(r=t[o],void 0!==r&&(void 0!==e&&"function"==typeof r&&(r=r(e),a=!1),void 0!==i&&q(r)&&(r=r[i%r.length],a=!1),void 0!==r))return n&&!a&&(n.cacheable=!1),r}function He(t,e){const{min:i,max:n}=t;return{min:i-Math.abs(Q(e,i)),max:n+Q(e,n)}}const Fe=["left","top","right","bottom"];function We(t,e){return t.filter(t=>t.pos===e)}function Be(t,e){return t.filter(t=>-1===Fe.indexOf(t.pos)&&t.box.axis===e)}function Ve(t,e){return t.sort((t,i)=>{const n=e?i:t,o=e?t:i;return n.weight===o.weight?n.index-o.index:n.weight-o.weight})}function qe(t,e,i,n){return Math.max(t[i],e[i])+Math.max(t[n],e[n])}function Ye(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function Ue(t,e,i){const n=i.box,o=t.maxPadding;Y(i.pos)||(i.size&&(t[i.pos]-=i.size),i.size=i.horizontal?n.height:n.width,t[i.pos]+=i.size),n.getPadding&&Ye(o,n.getPadding());const s=Math.max(0,e.outerWidth-qe(o,t,"left","right")),r=Math.max(0,e.outerHeight-qe(o,t,"top","bottom")),a=s!==t.w,l=r!==t.h;return t.w=s,t.h=r,i.horizontal?{same:a,other:l}:{same:l,other:a}}function Xe(t,e){const i=e.maxPadding;function n(t){const n={left:0,top:0,right:0,bottom:0};return t.forEach(t=>{n[t]=Math.max(e[t],i[t])}),n}return n(t?["left","right"]:["top","bottom"])}function Ke(t,e,i){const n=[];let o,s,r,a,l,c;for(o=0,s=t.length,l=0;o<s;++o){r=t[o],a=r.box,a.update(r.width||e.w,r.height||e.h,Xe(r.horizontal,e));const{same:s,other:d}=Ue(e,i,r);l|=s&&n.length,c=c||d,a.fullSize||n.push(r)}return l&&Ke(n,e,i)||c}function Ge(t,e,i){const n=i.padding;let o,s,r,a,l=e.x,c=e.y;for(o=0,s=t.length;o<s;++o)r=t[o],a=r.box,r.horizontal?(a.left=a.fullSize?n.left:e.left,a.right=a.fullSize?i.outerWidth-n.right:e.left+e.w,a.top=c,a.bottom=c+a.height,a.width=a.right-a.left,c=a.bottom):(a.left=l,a.right=l+a.width,a.top=a.fullSize?n.top:e.top,a.bottom=a.fullSize?i.outerHeight-n.bottom:e.top+e.h,a.height=a.bottom-a.top,l=a.right);e.x=l,e.y=c}yt.set("layout",{padding:{top:0,right:0,bottom:0,left:0}});var Qe={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const i=t.boxes?t.boxes.indexOf(e):-1;-1!==i&&t.boxes.splice(i,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(t,e,i,n){if(!t)return;const o=Ne(t.options.layout.padding),s=Math.max(e-o.width,0),r=Math.max(i-o.height,0),a=function(t){const e=function(t){const e=[];let i,n,o;for(i=0,n=(t||[]).length;i<n;++i)o=t[i],e.push({index:i,box:o,pos:o.position,horizontal:o.isHorizontal(),weight:o.weight});return e}(t),i=Ve(e.filter(t=>t.box.fullSize),!0),n=Ve(We(e,"left"),!0),o=Ve(We(e,"right")),s=Ve(We(e,"top"),!0),r=Ve(We(e,"bottom")),a=Be(e,"x"),l=Be(e,"y");return{fullSize:i,leftAndTop:n.concat(s),rightAndBottom:o.concat(l).concat(r).concat(a),chartArea:We(e,"chartArea"),vertical:n.concat(o).concat(l),horizontal:s.concat(r).concat(a)}}(t.boxes),l=a.vertical,c=a.horizontal;Z(t.boxes,t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()});const d=l.reduce((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1,0)||1,u=Object.freeze({outerWidth:e,outerHeight:i,padding:o,availableWidth:s,availableHeight:r,vBoxMaxWidth:s/2/d,hBoxMaxHeight:r/2}),h=Object.assign({},o);Ye(h,Ne(n));const p=Object.assign({maxPadding:h,w:s,h:r,x:o.left,y:o.top},o);!function(t,e){let i,n,o;for(i=0,n=t.length;i<n;++i)o=t[i],o.horizontal?(o.width=o.box.fullSize&&e.availableWidth,o.height=e.hBoxMaxHeight):(o.width=e.vBoxMaxWidth,o.height=o.box.fullSize&&e.availableHeight)}(l.concat(c),u),Ke(a.fullSize,p,u),Ke(l,p,u),Ke(c,p,u)&&Ke(l,p,u),function(t){const e=t.maxPadding;function i(i){const n=Math.max(e[i]-t[i],0);return t[i]+=n,n}t.y+=i("top"),t.x+=i("left"),i("right"),i("bottom")}(p),Ge(a.leftAndTop,p,u),p.x+=p.w,p.y+=p.h,Ge(a.rightAndBottom,p,u),t.chartArea={left:p.left,top:p.top,right:p.left+p.w,bottom:p.top+p.h,height:p.h,width:p.w},Z(a.chartArea,e=>{const i=e.box;Object.assign(i,t.chartArea),i.update(p.w,p.h)})}};class Je{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,n){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,n?Math.floor(e/n):i)}}isAttached(t){return!0}}class Ze extends Je{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}}const ti={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},ei=t=>null===t||""===t;const ii=!!we&&{passive:!0};function ni(t,e,i){t.canvas.removeEventListener(e,i,ii)}function oi(t,e,i){const n=t.canvas,o=n&&he(n)||n,s=new MutationObserver(t=>{const e=he(o);t.forEach(t=>{for(let n=0;n<t.addedNodes.length;n++){const s=t.addedNodes[n];s!==o&&s!==e||i(t.target)}})});return s.observe(document,{childList:!0,subtree:!0}),s}function si(t,e,i){const n=t.canvas,o=n&&he(n);if(!o)return;const s=new MutationObserver(t=>{t.forEach(t=>{for(let e=0;e<t.removedNodes.length;e++)if(t.removedNodes[e]===n){i();break}})});return s.observe(o,{childList:!0}),s}const ri=new Map;let ai=0;function li(){const t=window.devicePixelRatio;t!==ai&&(ai=t,ri.forEach((e,i)=>{i.currentDevicePixelRatio!==t&&e()}))}function ci(t,i,n){const o=t.canvas,s=o&&he(o);if(!s)return;const r=e((t,e)=>{const i=s.clientWidth;n(t,e),i<s.clientWidth&&n()},window),a=new ResizeObserver(t=>{const e=t[0],i=e.contentRect.width,n=e.contentRect.height;0===i&&0===n||r(i,n)});return a.observe(s),function(t,e){ri.size||window.addEventListener("resize",li),ri.set(t,e)}(t,r),a}function di(t,e,i){i&&i.disconnect(),"resize"===e&&function(t){ri.delete(t),ri.size||window.removeEventListener("resize",li)}(t)}function ui(t,i,n){const o=t.canvas,s=e(e=>{null!==t.ctx&&n(function(t,e){const i=ti[t.type]||t.type,{x:n,y:o}=be(t,e);return{type:i,chart:e,native:t,x:void 0!==n?n:null,y:void 0!==o?o:null}}(e,t))},t,t=>{const e=t[0];return[e,e.offsetX,e.offsetY]});return function(t,e,i){t.addEventListener(e,i,ii)}(o,i,s),s}class hi extends Je{acquireContext(t,e){const i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(function(t,e){const i=t.style,n=t.getAttribute("height"),o=t.getAttribute("width");if(t.$chartjs={initial:{height:n,width:o,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",ei(o)){const e=ke(t,"width");void 0!==e&&(t.width=e)}if(ei(n))if(""===t.style.height)t.height=t.width/(e||2);else{const e=ke(t,"height");void 0!==e&&(t.height=e)}}(t,e),i):null}releaseContext(t){const e=t.canvas;if(!e.$chartjs)return!1;const i=e.$chartjs.initial;["height","width"].forEach(t=>{const n=i[t];V(n)?e.removeAttribute(t):e.setAttribute(t,n)});const n=i.style||{};return Object.keys(n).forEach(t=>{e.style[t]=n[t]}),e.width=e.width,delete e.$chartjs,!0}addEventListener(t,e,i){this.removeEventListener(t,e);const n=t.$proxies||(t.$proxies={}),o={attach:oi,detach:si,resize:ci}[e]||ui;n[e]=o(t,e,i)}removeEventListener(t,e){const i=t.$proxies||(t.$proxies={}),n=i[e];if(!n)return;({attach:di,detach:di,resize:di}[e]||ni)(t,e,n),i[e]=void 0}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,n){return xe(t,e,i,n)}isAttached(t){const e=he(t);return!(!e||!he(e))}}var pi=Object.freeze({__proto__:null,BasePlatform:Je,BasicPlatform:Ze,DomPlatform:hi});const fi=t=>0===t||1===t,gi=(t,e,i)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*vt/i),mi=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*vt/i)+1,yi={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*kt),easeOutSine:t=>Math.sin(t*kt),easeInOutSine:t=>-.5*(Math.cos(bt*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>fi(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>fi(t)?t:gi(t,.075,.3),easeOutElastic:t=>fi(t)?t:mi(t,.075,.3),easeInOutElastic(t){const e=.1125;return fi(t)?t:t<.5?.5*gi(2*t,e,.45):.5+.5*mi(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-yi.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*yi.easeInBounce(2*t):.5*yi.easeOutBounce(2*t-1)+.5},bi={boolean:(t,e,i)=>i>.5?e:t,color(t,e,i){const n=H(t||"transparent"),o=n.valid&&H(e||"transparent");return o&&o.valid?o.mix(n,i).hexString():e},number:(t,e,i)=>t+(e-t)*i};class vi{constructor(t,e,i,n){const o=e[i];n=ze([t.to,n,o,t.from]);const s=ze([t.from,o,n]);this._active=!0,this._fn=t.fn||bi[t.type||typeof s],this._easing=yi[t.easing]||yi.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=s,this._to=n,this._promises=void 0}active(){return this._active}update(t,e,i){const n=this;if(n._active){n._notify(!1);const o=n._target[n._prop],s=i-n._start,r=n._duration-s;n._start=i,n._duration=Math.floor(Math.max(r,t.duration)),n._total+=s,n._loop=!!t.loop,n._to=ze([t.to,e,o,t.from]),n._from=ze([t.from,o,e])}}cancel(){const t=this;t._active&&(t.tick(Date.now()),t._active=!1,t._notify(!1))}tick(t){const e=this,i=t-e._start,n=e._duration,o=e._prop,s=e._from,r=e._loop,a=e._to;let l;if(e._active=s!==a&&(r||i<n),!e._active)return e._target[o]=a,void e._notify(!0);i<0?e._target[o]=s:(l=i/n%2,l=r&&l>1?2-l:l,l=e._easing(Math.min(1,Math.max(0,l))),e._target[o]=e._fn(s,a,l))}wait(){const t=this._promises||(this._promises=[]);return new Promise((e,i)=>{t.push({res:e,rej:i})})}_notify(t){const e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}yt.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const xi=Object.keys(yt.animation);yt.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),yt.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),yt.describe("animations",{_fallback:"animation"}),yt.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}});class _i{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!Y(t))return;const e=this._properties;Object.getOwnPropertyNames(t).forEach(i=>{const n=t[i];if(!Y(n))return;const o={};for(const t of xi)o[t]=n[t];(q(n.properties)&&n.properties||[i]).forEach(t=>{t!==i&&e.has(t)||e.set(t,o)})})}_animateOptions(t,e){const i=e.options,n=function(t,e){if(!e)return;let i=t.options;if(!i)return void(t.options=e);i.$shared&&(t.options=i=Object.assign({},i,{$shared:!1,$animations:{}}));return i}(t,i);if(!n)return[];const o=this._createAnimations(n,i);return i.$shared&&function(t,e){const i=[],n=Object.keys(e);for(let e=0;e<n.length;e++){const o=t[n[e]];o&&o.active()&&i.push(o.wait())}return Promise.all(i)}(t.options.$animations,i).then(()=>{t.options=i},()=>{}),o}_createAnimations(t,e){const i=this._properties,n=[],o=t.$animations||(t.$animations={}),s=Object.keys(e),r=Date.now();let a;for(a=s.length-1;a>=0;--a){const l=s[a];if("$"===l.charAt(0))continue;if("options"===l){n.push(...this._animateOptions(t,e));continue}const c=e[l];let d=o[l];const u=i.get(l);if(d){if(u&&d.active()){d.update(u,c,r);continue}d.cancel()}u&&u.duration?(o[l]=d=new vi(u,t,l,c),n.push(d)):t[l]=c}return n}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const i=this._createAnimations(t,e);return i.length?(r.add(this._chart,i),!0):void 0}}function wi(t,e){const i=t&&t.options||{},n=i.reverse,o=void 0===i.min?e:0,s=void 0===i.max?e:0;return{start:n?s:o,end:n?o:s}}function ki(t,e){const i=[],n=t._getSortedDatasetMetas(e);let o,s;for(o=0,s=n.length;o<s;++o)i.push(n[o].index);return i}function Si(t,e,i,n){const o=t.keys,s="single"===n.mode;let r,a,l,c;if(null!==e){for(r=0,a=o.length;r<a;++r){if(l=+o[r],l===i){if(n.all)continue;break}c=t.values[l],U(c)&&(s||0===e||Mt(e)===Mt(c))&&(e+=c)}return e}}function Ti(t,e){const i=t&&t.options.stacked;return i||void 0===i&&void 0!==e.stack}function Ci(t,e,i){const n=t[e]||(t[e]={});return n[i]||(n[i]={})}function Mi(t,e,i){for(const n of e.getMatchingVisibleMetas("bar").reverse()){const e=t[n.index];if(i&&e>0||!i&&e<0)return n.index}return null}function Di(t,e){const{chart:i,_cachedMeta:n}=t,o=i._stacks||(i._stacks={}),{iScale:s,vScale:r,index:a}=n,l=s.axis,c=r.axis,d=function(t,e,i){return`${t.id}.${e.id}.${i.stack||i.type}`}(s,r,n),u=e.length;let h;for(let t=0;t<u;++t){const i=e[t],{[l]:n,[c]:s}=i;h=(i._stacks||(i._stacks={}))[c]=Ci(o,d,n),h[a]=s,h._top=Mi(h,r,!0),h._bottom=Mi(h,r,!1)}}function Ai(t,e){const i=t.scales;return Object.keys(i).filter(t=>i[t].axis===e).shift()}function Pi(t,e){const i=t.vScale&&t.vScale.axis;if(i){e=e||t._parsed;for(const n of e){const e=n._stacks;if(!e||void 0===e[i]||void 0===e[i][t.index])return;delete e[i][t.index]}}}const Oi=t=>"reset"===t||"none"===t,Ei=(t,e)=>e?t:Object.assign({},t);class Li{constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.$context=void 0,this._syncList=[],this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=Ti(t.vScale,t),this.addElements()}updateIndex(t){this.index!==t&&Pi(this._cachedMeta),this.index=t}linkScales(){const t=this,e=t.chart,i=t._cachedMeta,n=t.getDataset(),o=(t,e,i,n)=>"x"===t?e:"r"===t?n:i,s=i.xAxisID=K(n.xAxisID,Ai(e,"x")),r=i.yAxisID=K(n.yAxisID,Ai(e,"y")),a=i.rAxisID=K(n.rAxisID,Ai(e,"r")),l=i.indexAxis,c=i.iAxisID=o(l,s,r,a),d=i.vAxisID=o(l,r,s,a);i.xScale=t.getScaleForId(s),i.yScale=t.getScaleForId(r),i.rScale=t.getScaleForId(a),i.iScale=t.getScaleForId(c),i.vScale=t.getScaleForId(d)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&de(this._data,this),t._stacked&&Pi(t)}_dataCheck(){const t=this,e=t.getDataset(),i=e.data||(e.data=[]),n=t._data;if(Y(i))t._data=function(t){const e=Object.keys(t),i=new Array(e.length);let n,o,s;for(n=0,o=e.length;n<o;++n)s=e[n],i[n]={x:s,y:t[s]};return i}(i);else if(n!==i){if(n){de(n,t);const e=t._cachedMeta;Pi(e),e._parsed=[]}i&&Object.isExtensible(i)&&ce(i,t),t._syncList=[],t._data=i}}addElements(){const t=this,e=t._cachedMeta;t._dataCheck(),t.datasetElementType&&(e.dataset=new t.datasetElementType)}buildOrUpdateElements(t){const e=this,i=e._cachedMeta,n=e.getDataset();let o=!1;e._dataCheck();const s=i._stacked;i._stacked=Ti(i.vScale,i),i.stack!==n.stack&&(o=!0,Pi(i),i.stack=n.stack),e._resyncElements(t),(o||s!==i._stacked)&&Di(e,i._parsed)}configure(){const t=this,e=t.chart.config,i=e.datasetScopeKeys(t._type),n=e.getOptionScopes(t.getDataset(),i,!0);t.options=e.createResolver(n,t.getContext()),t._parsing=t.options.parsing}parse(t,e){const i=this,{_cachedMeta:n,_data:o}=i,{iScale:s,_stacked:r}=n,a=s.axis;let l,c,d,u=0===t&&e===o.length||n._sorted,h=t>0&&n._parsed[t-1];if(!1===i._parsing)n._parsed=o,n._sorted=!0,d=o;else{d=q(o[t])?i.parseArrayData(n,o,t,e):Y(o[t])?i.parseObjectData(n,o,t,e):i.parsePrimitiveData(n,o,t,e);const s=()=>null===c[a]||h&&c[a]<h[a];for(l=0;l<e;++l)n._parsed[l+t]=c=d[l],u&&(s()&&(u=!1),h=c);n._sorted=u}r&&Di(i,d)}parsePrimitiveData(t,e,i,n){const{iScale:o,vScale:s}=t,r=o.axis,a=s.axis,l=o.getLabels(),c=o===s,d=new Array(n);let u,h,p;for(u=0,h=n;u<h;++u)p=u+i,d[u]={[r]:c||o.parse(l[p],p),[a]:s.parse(e[p],p)};return d}parseArrayData(t,e,i,n){const{xScale:o,yScale:s}=t,r=new Array(n);let a,l,c,d;for(a=0,l=n;a<l;++a)c=a+i,d=e[c],r[a]={x:o.parse(d[0],c),y:s.parse(d[1],c)};return r}parseObjectData(t,e,i,n){const{xScale:o,yScale:s}=t,{xAxisKey:r="x",yAxisKey:a="y"}=this._parsing,l=new Array(n);let c,d,u,h;for(c=0,d=n;c<d;++c)u=c+i,h=e[u],l[c]={x:o.parse(lt(h,r),u),y:s.parse(lt(h,a),u)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){const n=this.chart,o=this._cachedMeta,s=e[t.axis];return Si({keys:ki(n,!0),values:e._stacks[t.axis]},s,o.index,{mode:i})}updateRangeFromParsed(t,e,i,n){const o=i[e.axis];let s=null===o?NaN:o;const r=n&&i._stacks[e.axis];n&&r&&(n.values=r,t.min=Math.min(t.min,s),t.max=Math.max(t.max,s),s=Si(n,o,this._cachedMeta.index,{all:!0})),t.min=Math.min(t.min,s),t.max=Math.max(t.max,s)}getMinMax(t,e){const i=this,n=i._cachedMeta,o=n._parsed,s=n._sorted&&t===n.iScale,r=o.length,a=i._getOtherScale(t),l=e&&n._stacked&&{keys:ki(i.chart,!0),values:null},c={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:d,max:u}=function(t){const{min:e,max:i,minDefined:n,maxDefined:o}=t.getUserBounds();return{min:n?e:Number.NEGATIVE_INFINITY,max:o?i:Number.POSITIVE_INFINITY}}(a);let h,p,f,g;function m(){return f=o[h],p=f[t.axis],g=f[a.axis],!U(p)||d>g||u<g}for(h=0;h<r&&(m()||(i.updateRangeFromParsed(c,t,f,l),!s));++h);if(s)for(h=r-1;h>=0;--h)if(!m()){i.updateRangeFromParsed(c,t,f,l);break}return c}getAllParsedValues(t){const e=this._cachedMeta._parsed,i=[];let n,o,s;for(n=0,o=e.length;n<o;++n)s=e[n][t.axis],U(s)&&i.push(s);return i}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,i=e.iScale,n=e.vScale,o=this.getParsed(t);return{label:i?""+i.getLabelForValue(o[i.axis]):"",value:n?""+n.getLabelForValue(o[n.axis]):""}}_update(t){const e=this,i=e._cachedMeta;e.configure(),e._cachedDataOpts={},e.update(t||"default"),i._clip=function(t){let e,i,n,o;return Y(t)?(e=t.top,i=t.right,n=t.bottom,o=t.left):e=i=n=o=t,{top:e,right:i,bottom:n,left:o,disabled:!1===t}}(K(e.options.clip,function(t,e,i){if(!1===i)return!1;const n=wi(t,i),o=wi(e,i);return{top:o.end,right:n.end,bottom:o.start,left:n.start}}(i.xScale,i.yScale,e.getMaxOverflow())))}update(t){}draw(){const t=this,e=t._ctx,i=t.chart,n=t._cachedMeta,o=n.data||[],s=i.chartArea,r=[],a=t._drawStart||0,l=t._drawCount||o.length-a;let c;for(n.dataset&&n.dataset.draw(e,s,a,l),c=a;c<a+l;++c){const t=o[c];t.active?r.push(t):t.draw(e,s)}for(c=0;c<r.length;++c)r[c].draw(e,s)}getStyle(t,e){const i=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(i):this.resolveDataElementOptions(t||0,i)}getContext(t,e,i){const n=this,o=n.getDataset();let s;if(t>=0&&t<n._cachedMeta.data.length){const e=n._cachedMeta.data[t];s=e.$context||(e.$context=function(t,e,i){return Object.assign(Object.create(t),{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:i,index:e,mode:"default",type:"data"})}(n.getContext(),t,e)),s.parsed=n.getParsed(t),s.raw=o.data[t],s.index=s.dataIndex=t}else s=n.$context||(n.$context=function(t,e){return Object.assign(Object.create(t),{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(n.chart.getContext(),n.index)),s.dataset=o,s.index=s.datasetIndex=n.index;return s.active=!!e,s.mode=i,s}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const n=this,o="active"===e,s=n._cachedDataOpts,r=t+"-"+e,a=s[r],l=n.enableOptionSharing&&dt(i);if(a)return Ei(a,l);const c=n.chart.config,d=c.datasetElementScopeKeys(n._type,t),u=o?[t+"Hover","hover",t,""]:[t,""],h=c.getOptionScopes(n.getDataset(),d),p=Object.keys(yt.elements[t]),f=c.resolveNamedOptions(h,p,()=>n.getContext(i,o),u);return f.$shared&&(f.$shared=l,s[r]=Object.freeze(Ei(f,l))),f}_resolveAnimations(t,e,i){const n=this,o=n.chart,s=n._cachedDataOpts,r="animation-"+e,a=s[r];if(a)return a;let l;if(!1!==o.options.animation){const o=n.chart.config,s=o.datasetAnimationScopeKeys(n._type,e),r=o.getOptionScopes(n.getDataset(),s);l=o.createResolver(r,n.getContext(t,i,e))}const c=new _i(o,l&&l.animations);return l&&l._cacheable&&(s[r]=Object.freeze(c)),c}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||Oi(t)||this.chart._animationsDisabled}updateElement(t,e,i,n){Oi(n)?Object.assign(t,i):this._resolveAnimations(e,n).update(t,i)}updateSharedOptions(t,e,i){t&&!Oi(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,n){t.active=n;const o=this.getStyle(e,n);this._resolveAnimations(e,i,n).update(t,{options:!n&&this.getSharedOptions(o)||o})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this,i=e._data,n=e._cachedMeta.data;for(const[t,i,n]of e._syncList)e[t](i,n);e._syncList=[];const o=n.length,s=i.length,r=Math.min(s,o);r&&e.parse(0,r),s>o?e._insertElements(o,s-o,t):s<o&&e._removeElements(s,o-s)}_insertElements(t,e,i=!0){const n=this,o=n._cachedMeta,s=o.data,r=t+e;let a;const l=t=>{for(t.length+=e,a=t.length-1;a>=r;a--)t[a]=t[a-e]};for(l(s),a=t;a<r;++a)s[a]=new n.dataElementType;n._parsing&&l(o._parsed),n.parse(t,e),i&&n.updateElements(s,t,e,"reset")}updateElements(t,e,i,n){}_removeElements(t,e){const i=this._cachedMeta;if(this._parsing){const n=i._parsed.splice(t,e);i._stacked&&Pi(i,n)}i.data.splice(t,e)}_onDataPush(){const t=arguments.length;this._syncList.push(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._syncList.push(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._syncList.push(["_removeElements",0,1])}_onDataSplice(t,e){this._syncList.push(["_removeElements",t,e]),this._syncList.push(["_insertElements",t,arguments.length-2])}_onDataUnshift(){this._syncList.push(["_insertElements",0,arguments.length])}}Li.defaults={},Li.prototype.datasetElementType=null,Li.prototype.dataElementType=null;class $i{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}hasValue(){return Pt(this.x)&&Pt(this.y)}getProps(t,e){const i=this,n=this.$animations;if(!e||!n)return i;const o={};return t.forEach(t=>{o[t]=n[t]&&n[t].active()?n[t]._to:i[t]}),o}}$i.defaults={},$i.defaultRoutes=void 0;const Ri=new Map;function Ii(t,e,i){return function(t,e){e=e||{};const i=t+JSON.stringify(e);let n=Ri.get(i);return n||(n=new Intl.NumberFormat(t,e),Ri.set(i,n)),n}(e,i).format(t)}const Ni={values:t=>q(t)?t:""+t,numeric(t,e,i){if(0===t)return"0";const n=this.chart.options.locale;let o,s=t;if(i.length>1){const e=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(e<1e-4||e>1e15)&&(o="scientific"),s=function(t,e){let i=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;Math.abs(i)>=1&&t!==Math.floor(t)&&(i=t-Math.floor(t));return i}(t,i)}const r=Ct(Math.abs(s)),a=Math.max(Math.min(-1*Math.floor(r),20),0),l={notation:o,minimumFractionDigits:a,maximumFractionDigits:a};return Object.assign(l,this.options.ticks.format),Ii(t,n,l)},logarithmic(t,e,i){if(0===t)return"0";const n=t/Math.pow(10,Math.floor(Ct(t)));return 1===n||2===n||5===n?Ni.numeric.call(this,t,e,i):""}};var ji={formatters:Ni};function zi(t,e){const i=t.options.ticks,n=i.maxTicksLimit||function(t){const e=t.options.offset,i=t._tickSize(),n=t._length/i+(e?0:1),o=t._maxLength/i;return Math.floor(Math.min(n,o))}(t),o=i.major.enabled?function(t){const e=[];let i,n;for(i=0,n=t.length;i<n;i++)t[i].major&&e.push(i);return e}(e):[],s=o.length,r=o[0],a=o[s-1],l=[];if(s>n)return function(t,e,i,n){let o,s=0,r=i[0];for(n=Math.ceil(n),o=0;o<t.length;o++)o===r&&(e.push(t[o]),s++,r=i[s*n])}(e,l,o,s/n),l;const c=function(t,e,i){const n=function(t){const e=t.length;let i,n;if(e<2)return!1;for(n=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==n)return!1;return n}(t),o=e.length/i;if(!n)return Math.max(o,1);const s=At(n);for(let t=0,e=s.length-1;t<e;t++){const e=s[t];if(e>o)return e}return Math.max(o,1)}(o,e,n);if(s>0){let t,i;const n=s>1?Math.round((a-r)/(s-1)):null;for(Hi(e,l,c,V(n)?0:r-n,r),t=0,i=s-1;t<i;t++)Hi(e,l,c,o[t],o[t+1]);return Hi(e,l,c,a,V(n)?e.length:a+n),l}return Hi(e,l,c),l}function Hi(t,e,i,n,o){const s=K(n,0),r=Math.min(K(o,t.length),t.length);let a,l,c,d=0;for(i=Math.ceil(i),o&&(a=o-n,i=a/Math.floor(a/i)),c=s;c<0;)d++,c=Math.round(s+d*i);for(l=Math.max(s,0);l<r;l++)l===c&&(e.push(t[l]),d++,c=Math.round(s+d*i))}yt.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:ji.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),yt.route("scale.ticks","color","","color"),yt.route("scale.grid","color","","borderColor"),yt.route("scale.grid","borderColor","","borderColor"),yt.route("scale.title","color","","color"),yt.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t}),yt.describe("scales",{_fallback:"scale"}),yt.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t});const Fi=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i;function Wi(t,e){const i=[],n=t.length/e,o=t.length;let s=0;for(;s<o;s+=n)i.push(t[Math.floor(s)]);return i}function Bi(t,e,i){const n=t.ticks.length,o=Math.min(e,n-1),s=t._startPixel,r=t._endPixel;let a,l=t.getPixelForTick(o);if(!(i&&(a=1===n?Math.max(l-s,r-l):0===e?(t.getPixelForTick(1)-l)/2:(l-t.getPixelForTick(o-1))/2,l+=o<e?a:-a,l<s-1e-6||l>r+1e-6)))return l}function Vi(t){return t.drawTicks?t.tickLength:0}function qi(t,e){if(!t.display)return 0;const i=je(t.font,e),n=Ne(t.padding);return(q(t.text)?t.text.length:1)*i.lineHeight+n.height}function Yi(t,e,i){let o=n(t);return(i&&"right"!==e||!i&&"right"===e)&&(o=(t=>"left"===t?"right":"right"===t?"left":t)(o)),o}class Ui extends $i{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){const e=this;e.options=t.setContext(e.getContext()),e.axis=t.axis,e._userMin=e.parse(t.min),e._userMax=e.parse(t.max),e._suggestedMin=e.parse(t.suggestedMin),e._suggestedMax=e.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:n}=this;return t=X(t,Number.POSITIVE_INFINITY),e=X(e,Number.NEGATIVE_INFINITY),i=X(i,Number.POSITIVE_INFINITY),n=X(n,Number.NEGATIVE_INFINITY),{min:X(t,i),max:X(e,n),minDefined:U(t),maxDefined:U(e)}}getMinMax(t){const e=this;let i,{min:n,max:o,minDefined:s,maxDefined:r}=e.getUserBounds();if(s&&r)return{min:n,max:o};const a=e.getMatchingVisibleMetas();for(let l=0,c=a.length;l<c;++l)i=a[l].controller.getMinMax(e,t),s||(n=Math.min(n,i.min)),r||(o=Math.max(o,i.max));return{min:X(n,X(o,n)),max:X(o,X(n,o))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){J(this.options.beforeUpdate,[this])}update(t,e,i){const n=this,o=n.options.ticks,s=o.sampleSize;n.beforeUpdate(),n.maxWidth=t,n.maxHeight=e,n._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),n.ticks=null,n._labelSizes=null,n._gridLineItems=null,n._labelItems=null,n.beforeSetDimensions(),n.setDimensions(),n.afterSetDimensions(),n._maxLength=n.isHorizontal()?n.width+i.left+i.right:n.height+i.top+i.bottom,n._dataLimitsCached||(n.beforeDataLimits(),n.determineDataLimits(),n.afterDataLimits(),n._range=He(n,n.options.grace),n._dataLimitsCached=!0),n.beforeBuildTicks(),n.ticks=n.buildTicks()||[],n.afterBuildTicks();const r=s<n.ticks.length;n._convertTicksToLabels(r?Wi(n.ticks,s):n.ticks),n.configure(),n.beforeCalculateLabelRotation(),n.calculateLabelRotation(),n.afterCalculateLabelRotation(),o.display&&(o.autoSkip||"auto"===o.source)&&(n.ticks=zi(n,n.ticks),n._labelSizes=null),r&&n._convertTicksToLabels(n.ticks),n.beforeFit(),n.fit(),n.afterFit(),n.afterUpdate()}configure(){const t=this;let e,i,n=t.options.reverse;t.isHorizontal()?(e=t.left,i=t.right):(e=t.top,i=t.bottom,n=!n),t._startPixel=e,t._endPixel=i,t._reversePixels=n,t._length=i-e,t._alignToPixels=t.options.alignToPixels}afterUpdate(){J(this.options.afterUpdate,[this])}beforeSetDimensions(){J(this.options.beforeSetDimensions,[this])}setDimensions(){const t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0}afterSetDimensions(){J(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),J(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){J(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this,i=e.options.ticks;let n,o,s;for(n=0,o=t.length;n<o;n++)s=t[n],s.label=J(i.callback,[s.value,n,t],e)}afterTickToLabelConversion(){J(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){J(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this,e=t.options,i=e.ticks,n=t.ticks.length,o=i.minRotation||0,s=i.maxRotation;let r,a,l,c=o;if(!t._isVisible()||!i.display||o>=s||n<=1||!t.isHorizontal())return void(t.labelRotation=o);const d=t._getLabelSizes(),u=d.widest.width,h=d.highest.height,p=Wt(t.chart.width-u,0,t.maxWidth);r=e.offset?t.maxWidth/n:p/(n-1),u+6>r&&(r=p/(n-(e.offset?.5:1)),a=t.maxHeight-Vi(e.grid)-i.padding-qi(e.title,t.chart.options.font),l=Math.sqrt(u*u+h*h),c=Rt(Math.min(Math.asin(Math.min((d.highest.height+6)/r,1)),Math.asin(Math.min(a/l,1))-Math.asin(h/l))),c=Math.max(o,Math.min(s,c))),t.labelRotation=c}afterCalculateLabelRotation(){J(this.options.afterCalculateLabelRotation,[this])}beforeFit(){J(this.options.beforeFit,[this])}fit(){const t=this,e={width:0,height:0},{chart:i,options:{ticks:n,title:o,grid:s}}=t,r=t._isVisible(),a=t.isHorizontal();if(r){const r=qi(o,i.options.font);if(a?(e.width=t.maxWidth,e.height=Vi(s)+r):(e.height=t.maxHeight,e.width=Vi(s)+r),n.display&&t.ticks.length){const{first:i,last:o,widest:s,highest:r}=t._getLabelSizes(),l=2*n.padding,c=$t(t.labelRotation),d=Math.cos(c),u=Math.sin(c);if(a){const i=n.mirror?0:u*s.width+d*r.height;e.height=Math.min(t.maxHeight,e.height+i+l)}else{const i=n.mirror?0:d*s.width+u*r.height;e.width=Math.min(t.maxWidth,e.width+i+l)}t._calculatePadding(i,o,u,d)}}t._handleMargins(),a?(t.width=t._length=i.width-t._margins.left-t._margins.right,t.height=e.height):(t.width=e.width,t.height=t._length=i.height-t._margins.top-t._margins.bottom)}_calculatePadding(t,e,i,n){const o=this,{ticks:{align:s,padding:r},position:a}=o.options,l=0!==o.labelRotation,c="top"!==a&&"x"===o.axis;if(o.isHorizontal()){const a=o.getPixelForTick(0)-o.left,d=o.right-o.getPixelForTick(o.ticks.length-1);let u=0,h=0;l?c?(u=n*t.width,h=i*e.height):(u=i*t.height,h=n*e.width):"start"===s?h=e.width:"end"===s?u=t.width:(u=t.width/2,h=e.width/2),o.paddingLeft=Math.max((u-a+r)*o.width/(o.width-a),0),o.paddingRight=Math.max((h-d+r)*o.width/(o.width-d),0)}else{let i=e.height/2,n=t.height/2;"start"===s?(i=0,n=t.height):"end"===s&&(i=e.height,n=0),o.paddingTop=i+r,o.paddingBottom=n+r}}_handleMargins(){const t=this;t._margins&&(t._margins.left=Math.max(t.paddingLeft,t._margins.left),t._margins.top=Math.max(t.paddingTop,t._margins.top),t._margins.right=Math.max(t.paddingRight,t._margins.right),t._margins.bottom=Math.max(t.paddingBottom,t._margins.bottom))}afterFit(){J(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,i;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,i=t.length;e<i;e++)V(t[e].label)&&(t.splice(e,1),i--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){const t=this;let e=t._labelSizes;if(!e){const i=t.options.ticks.sampleSize;let n=t.ticks;i<n.length&&(n=Wi(n,i)),t._labelSizes=e=t._computeLabelSizes(n,n.length)}return e}_computeLabelSizes(t,e){const{ctx:i,_longestTextCache:n}=this,o=[],s=[];let r,a,l,c,d,u,h,p,f,g,m,y=0,b=0;for(r=0;r<e;++r){if(c=t[r].label,d=this._resolveTickFontOptions(r),i.font=u=d.string,h=n[u]=n[u]||{data:{},gc:[]},p=d.lineHeight,f=g=0,V(c)||q(c)){if(q(c))for(a=0,l=c.length;a<l;++a)m=c[a],V(m)||q(m)||(f=qt(i,h.data,h.gc,f,m),g+=p)}else f=qt(i,h.data,h.gc,f,c),g=p;o.push(f),s.push(g),y=Math.max(f,y),b=Math.max(g,b)}!function(t,e){Z(t,t=>{const i=t.gc,n=i.length/2;let o;if(n>e){for(o=0;o<n;++o)delete t.data[i[o]];i.splice(0,n)}})}(n,e);const v=o.indexOf(y),x=s.indexOf(b),_=t=>({width:o[t]||0,height:s[t]||0});return{first:_(0),last:_(e-1),widest:_(v),highest:_(x),widths:o,heights:s}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){const e=this;e._reversePixels&&(t=1-t);const i=e._startPixel+t*e._length;return Bt(e._alignToPixels?Ut(e.chart,i,0):i)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this,i=e.ticks||[];if(t>=0&&t<i.length){const n=i[t];return n.$context||(n.$context=function(t,e,i){return Object.assign(Object.create(t),{tick:i,index:e,type:"tick"})}(e.getContext(),t,n))}return e.$context||(e.$context=(n=e.chart.getContext(),o=e,Object.assign(Object.create(n),{scale:o,type:"scale"})));var n,o}_tickSize(){const t=this.options.ticks,e=$t(this.labelRotation),i=Math.abs(Math.cos(e)),n=Math.abs(Math.sin(e)),o=this._getLabelSizes(),s=t.autoSkipPadding||0,r=o?o.widest.width+s:0,a=o?o.highest.height+s:0;return this.isHorizontal()?a*i>r*n?r/i:a/n:a*n<r*i?a/i:r/n}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this,i=e.axis,n=e.chart,o=e.options,{grid:s,position:r}=o,a=s.offset,l=e.isHorizontal(),c=e.ticks.length+(a?1:0),d=Vi(s),u=[],h=s.setContext(e.getContext()),p=h.drawBorder?h.borderWidth:0,f=p/2,g=function(t){return Ut(n,t,p)};let m,y,b,v,x,_,w,k,S,T,C,M;if("top"===r)m=g(e.bottom),_=e.bottom-d,k=m-f,T=g(t.top)+f,M=t.bottom;else if("bottom"===r)m=g(e.top),T=t.top,M=g(t.bottom)-f,_=m+f,k=e.top+d;else if("left"===r)m=g(e.right),x=e.right-d,w=m-f,S=g(t.left)+f,C=t.right;else if("right"===r)m=g(e.left),S=t.left,C=g(t.right)-f,x=m+f,w=e.left+d;else if("x"===i){if("center"===r)m=g((t.top+t.bottom)/2+.5);else if(Y(r)){const t=Object.keys(r)[0],i=r[t];m=g(e.chart.scales[t].getPixelForValue(i))}T=t.top,M=t.bottom,_=m+f,k=_+d}else if("y"===i){if("center"===r)m=g((t.left+t.right)/2);else if(Y(r)){const t=Object.keys(r)[0],i=r[t];m=g(e.chart.scales[t].getPixelForValue(i))}x=m-f,w=x-d,S=t.left,C=t.right}const D=K(o.ticks.maxTicksLimit,c),A=Math.max(1,Math.ceil(c/D));for(y=0;y<c;y+=A){const t=s.setContext(e.getContext(y)),i=t.lineWidth,o=t.color,r=s.borderDash||[],c=t.borderDashOffset,d=t.tickWidth,h=t.tickColor,p=t.tickBorderDash||[],f=t.tickBorderDashOffset;b=Bi(e,y,a),void 0!==b&&(v=Ut(n,b,i),l?x=w=S=C=v:_=k=T=M=v,u.push({tx1:x,ty1:_,tx2:w,ty2:k,x1:S,y1:T,x2:C,y2:M,width:i,color:o,borderDash:r,borderDashOffset:c,tickWidth:d,tickColor:h,tickBorderDash:p,tickBorderDashOffset:f}))}return e._ticksLength=c,e._borderValue=m,u}_computeLabelItems(t){const e=this,i=e.axis,n=e.options,{position:o,ticks:s}=n,r=e.isHorizontal(),a=e.ticks,{align:l,crossAlign:c,padding:d,mirror:u}=s,h=Vi(n.grid),p=h+d,f=u?-d:p,g=-$t(e.labelRotation),m=[];let y,b,v,x,_,w,k,S,T,C,M,D,A="middle";if("top"===o)w=e.bottom-f,k=e._getXAxisLabelAlignment();else if("bottom"===o)w=e.top+f,k=e._getXAxisLabelAlignment();else if("left"===o){const t=e._getYAxisLabelAlignment(h);k=t.textAlign,_=t.x}else if("right"===o){const t=e._getYAxisLabelAlignment(h);k=t.textAlign,_=t.x}else if("x"===i){if("center"===o)w=(t.top+t.bottom)/2+p;else if(Y(o)){const t=Object.keys(o)[0],i=o[t];w=e.chart.scales[t].getPixelForValue(i)+p}k=e._getXAxisLabelAlignment()}else if("y"===i){if("center"===o)_=(t.left+t.right)/2-p;else if(Y(o)){const t=Object.keys(o)[0],i=o[t];_=e.chart.scales[t].getPixelForValue(i)}k=e._getYAxisLabelAlignment(h).textAlign}"y"===i&&("start"===l?A="top":"end"===l&&(A="bottom"));const P=e._getLabelSizes();for(y=0,b=a.length;y<b;++y){v=a[y],x=v.label;const t=s.setContext(e.getContext(y));S=e.getPixelForTick(y)+s.labelOffset,T=e._resolveTickFontOptions(y),C=T.lineHeight,M=q(x)?x.length:1;const i=M/2,n=t.color,l=t.textStrokeColor,d=t.textStrokeWidth;let h;if(r?(_=S,D="top"===o?"near"===c||0!==g?-M*C+C/2:"center"===c?-P.highest.height/2-i*C+C:-P.highest.height+C/2:"near"===c||0!==g?C/2:"center"===c?P.highest.height/2-i*C:P.highest.height-M*C,u&&(D*=-1)):(w=S,D=(1-M)*C/2),t.showLabelBackdrop){const e=Ne(t.backdropPadding),i=P.heights[y],n=P.widths[y];let o=w+D-e.top,s=_-e.left;switch(A){case"middle":o-=i/2;break;case"bottom":o-=i}switch(k){case"center":s-=n/2;break;case"right":s-=n}h={left:s,top:o,width:n+e.width,height:i+e.height,color:t.backdropColor}}m.push({rotation:g,label:x,font:T,color:n,strokeColor:l,strokeWidth:d,textOffset:D,textAlign:k,textBaseline:A,translation:[_,w],backdrop:h})}return m}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-$t(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align&&(i="right"),i}_getYAxisLabelAlignment(t){const e=this,{position:i,ticks:{crossAlign:n,mirror:o,padding:s}}=e.options,r=t+s,a=e._getLabelSizes().widest.width;let l,c;return"left"===i?o?(l="left",c=e.right+s):(c=e.right-r,"near"===n?l="right":"center"===n?(l="center",c-=a/2):(l="left",c=e.left)):"right"===i?o?(l="right",c=e.left+s):(c=e.left+r,"near"===n?l="left":"center"===n?(l="center",c+=a/2):(l="right",c=e.right)):l="right",{textAlign:l,x:c}}_computeLabelArea(){const t=this;if(t.options.ticks.mirror)return;const e=t.chart,i=t.options.position;return"left"===i||"right"===i?{top:0,left:t.left,bottom:e.height,right:t.right}:"top"===i||"bottom"===i?{top:t.top,left:0,bottom:t.bottom,right:e.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:i,top:n,width:o,height:s}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,n,o,s),t.restore())}getLineWidthForValue(t){const e=this,i=e.options.grid;if(!e._isVisible()||!i.display)return 0;const n=e.ticks.findIndex(e=>e.value===t);if(n>=0){return i.setContext(e.getContext(n)).lineWidth}return 0}drawGrid(t){const e=this,i=e.options.grid,n=e.ctx,o=e._gridLineItems||(e._gridLineItems=e._computeGridLineItems(t));let s,r;const a=(t,e,i)=>{i.width&&i.color&&(n.save(),n.lineWidth=i.width,n.strokeStyle=i.color,n.setLineDash(i.borderDash||[]),n.lineDashOffset=i.borderDashOffset,n.beginPath(),n.moveTo(t.x,t.y),n.lineTo(e.x,e.y),n.stroke(),n.restore())};if(i.display)for(s=0,r=o.length;s<r;++s){const t=o[s];i.drawOnChartArea&&a({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),i.drawTicks&&a({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const t=this,{chart:e,ctx:i,options:{grid:n}}=t,o=n.setContext(t.getContext()),s=n.drawBorder?o.borderWidth:0;if(!s)return;const r=n.setContext(t.getContext(0)).lineWidth,a=t._borderValue;let l,c,d,u;t.isHorizontal()?(l=Ut(e,t.left,s)-s/2,c=Ut(e,t.right,r)+r/2,d=u=a):(d=Ut(e,t.top,s)-s/2,u=Ut(e,t.bottom,r)+r/2,l=c=a),i.save(),i.lineWidth=o.borderWidth,i.strokeStyle=o.borderColor,i.beginPath(),i.moveTo(l,d),i.lineTo(c,u),i.stroke(),i.restore()}drawLabels(t){const e=this;if(!e.options.ticks.display)return;const i=e.ctx,n=e._computeLabelArea();n&&Qt(i,n);const o=e._labelItems||(e._labelItems=e._computeLabelItems(t));let s,r;for(s=0,r=o.length;s<r;++s){const t=o[s],e=t.font,n=t.label;t.backdrop&&(i.fillStyle=t.backdrop.color,i.fillRect(t.backdrop.left,t.backdrop.top,t.backdrop.width,t.backdrop.height)),ee(i,n,0,t.textOffset,e,t)}n&&Jt(i)}drawTitle(){const{ctx:t,options:{position:e,title:i,reverse:n}}=this;if(!i.display)return;const s=je(i.font),r=Ne(i.padding),a=i.align;let l=s.lineHeight/2;"bottom"===e?(l+=r.bottom,q(i.text)&&(l+=s.lineHeight*(i.text.length-1))):l+=r.top;const{titleX:c,titleY:d,maxWidth:u,rotation:h}=function(t,e,i,n){const{top:s,left:r,bottom:a,right:l}=t;let c,d,u,h=0;return t.isHorizontal()?(d=o(n,r,l),u=Fi(t,i,e),c=l-r):(d=Fi(t,i,e),u=o(n,a,s),h="left"===i?-kt:kt),{titleX:d,titleY:u,maxWidth:c,rotation:h}}(this,l,e,a);ee(t,i.text,0,0,s,{color:i.color,maxWidth:u,rotation:h,textAlign:Yi(a,e,n),textBaseline:"middle",translation:[c,d]})}draw(t){const e=this;e._isVisible()&&(e.drawBackground(),e.drawGrid(t),e.drawBorder(),e.drawTitle(),e.drawLabels(t))}_layers(){const t=this,e=t.options,i=e.ticks&&e.ticks.z||0,n=e.grid&&e.grid.z||0;return t._isVisible()&&t.draw===Ui.prototype.draw?[{z:n,draw(e){t.drawBackground(),t.drawGrid(e),t.drawTitle()}},{z:n+1,draw(){t.drawBorder()}},{z:i,draw(e){t.drawLabels(e)}}]:[{z:i,draw(e){t.draw(e)}}]}getMatchingVisibleMetas(t){const e=this,i=e.chart.getSortedVisibleDatasetMetas(),n=e.axis+"AxisID",o=[];let s,r;for(s=0,r=i.length;s<r;++s){const r=i[s];r[n]!==e.id||t&&r.type!==t||o.push(r)}return o}_resolveTickFontOptions(t){return je(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}function Xi(t,e=[""],i=t,n,o=(()=>t[0])){dt(n)||(n=rn("_fallback",t));const s={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:i,_fallback:n,_getTarget:o,override:o=>Xi([o,...t],e,i,n)};return new Proxy(s,{deleteProperty:(e,i)=>(delete e[i],delete e._keys,delete t[0][i],!0),get:(i,n)=>Zi(i,n,()=>function(t,e,i,n){let o;for(const s of e)if(o=rn(Qi(s,t),i),dt(o))return Ji(t,o)?on(i,n,t,o):o}(n,e,t,i)),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>an(t).includes(e),ownKeys:t=>an(t),set:(t,e,i)=>((t._storage||(t._storage=o()))[e]=i,delete t[e],delete t._keys,!0)})}function Ki(t,e,i,n){const o={_cacheable:!1,_proxy:t,_context:e,_subProxy:i,_stack:new Set,_descriptors:Gi(t,n),setContext:e=>Ki(t,e,i,n),override:o=>Ki(t.override(o),e,i,n)};return new Proxy(o,{deleteProperty:(e,i)=>(delete e[i],delete t[i],!0),get:(t,e,i)=>Zi(t,e,()=>function(t,e,i){const{_proxy:n,_context:o,_subProxy:s,_descriptors:r}=t;let a=n[e];ut(a)&&r.isScriptable(e)&&(a=function(t,e,i,n){const{_proxy:o,_context:s,_subProxy:r,_stack:a}=i;if(a.has(t))throw new Error("Recursion detected: "+Array.from(a).join("->")+"->"+t);a.add(t),e=e(s,r||n),a.delete(t),Y(e)&&(e=on(o._scopes,o,t,e));return e}(e,a,t,i));q(a)&&a.length&&(a=function(t,e,i,n){const{_proxy:o,_context:s,_subProxy:r,_descriptors:a}=i;if(dt(s.index)&&n(t))e=e[s.index%e.length];else if(Y(e[0])){const i=e,n=o._scopes.filter(t=>t!==i);e=[];for(const l of i){const i=on(n,o,t,l);e.push(Ki(i,s,r&&r[t],a))}}return e}(e,a,t,r.isIndexable));Ji(e,a)&&(a=Ki(a,o,s&&s[e],r));return a}(t,e,i)),getOwnPropertyDescriptor:(e,i)=>e._descriptors.allKeys?Reflect.has(t,i)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,i),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,i)=>Reflect.has(t,i),ownKeys:()=>Reflect.ownKeys(t),set:(e,i,n)=>(t[i]=n,delete e[i],!0)})}function Gi(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:n=e.indexable,_allKeys:o=e.allKeys}=t;return{allKeys:o,scriptable:i,indexable:n,isScriptable:ut(i)?i:()=>i,isIndexable:ut(n)?n:()=>n}}const Qi=(t,e)=>t?t+ct(e):e,Ji=(t,e)=>Y(e)&&"adapters"!==t;function Zi(t,e,i){let n=t[e];return dt(n)||(n=i(),dt(n)&&(t[e]=n)),n}function tn(t,e,i){return ut(t)?t(e,i):t}const en=(t,e)=>!0===t?e:"string"==typeof t?lt(e,t):void 0;function nn(t,e,i,n){for(const o of e){const e=en(i,o);if(e){t.add(e);const o=tn(e._fallback,i,e);if(dt(o)&&o!==i&&o!==n)return o}else if(!1===e&&dt(n)&&i!==n)return null}return!1}function on(t,e,i,n){const o=e._rootScopes,s=tn(e._fallback,i,n),r=[...t,...o],a=new Set;a.add(n);let l=sn(a,r,i,s||i);return null!==l&&((!dt(s)||s===i||(l=sn(a,r,s,l),null!==l))&&Xi(Array.from(a),[""],o,s,()=>function(t,e,i){const n=t._getTarget();e in n||(n[e]={});const o=n[e];if(q(o)&&Y(i))return i;return o}(e,i,n)))}function sn(t,e,i,n){for(;i;)i=nn(t,e,i,n);return i}function rn(t,e){for(const i of e){if(!i)continue;const e=i[t];if(dt(e))return e}}function an(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const i of t)for(const t of Object.keys(i).filter(t=>!t.startsWith("_")))e.add(t);return Array.from(e)}(t._scopes)),e}const ln=Number.EPSILON||1e-14,cn=(t,e)=>e<t.length&&!t[e].skip&&t[e],dn=t=>"x"===t?"y":"x";function un(t,e,i,n){const o=t.skip?e:t,s=e,r=i.skip?e:i,a=jt(s,o),l=jt(r,s);let c=a/(a+l),d=l/(a+l);c=isNaN(c)?0:c,d=isNaN(d)?0:d;const u=n*c,h=n*d;return{previous:{x:s.x-u*(r.x-o.x),y:s.y-u*(r.y-o.y)},next:{x:s.x+h*(r.x-o.x),y:s.y+h*(r.y-o.y)}}}function hn(t,e="x"){const i=dn(e),n=t.length,o=Array(n).fill(0),s=Array(n);let r,a,l,c=cn(t,0);for(r=0;r<n;++r)if(a=l,l=c,c=cn(t,r+1),l){if(c){const t=c[e]-l[e];o[r]=0!==t?(c[i]-l[i])/t:0}s[r]=a?c?Mt(o[r-1])!==Mt(o[r])?0:(o[r-1]+o[r])/2:o[r-1]:o[r]}!function(t,e,i){const n=t.length;let o,s,r,a,l,c=cn(t,0);for(let d=0;d<n-1;++d)l=c,c=cn(t,d+1),l&&c&&(Ot(e[d],0,ln)?i[d]=i[d+1]=0:(o=i[d]/e[d],s=i[d+1]/e[d],a=Math.pow(o,2)+Math.pow(s,2),a<=9||(r=3/Math.sqrt(a),i[d]=o*r*e[d],i[d+1]=s*r*e[d])))}(t,o,s),function(t,e,i="x"){const n=dn(i),o=t.length;let s,r,a,l=cn(t,0);for(let c=0;c<o;++c){if(r=a,a=l,l=cn(t,c+1),!a)continue;const o=a[i],d=a[n];r&&(s=(o-r[i])/3,a["cp1"+i]=o-s,a["cp1"+n]=d-s*e[c]),l&&(s=(l[i]-o)/3,a["cp2"+i]=o+s,a["cp2"+n]=d+s*e[c])}}(t,s,e)}function pn(t,e,i){return Math.max(Math.min(t,i),e)}function fn(t,e,i,n,o){let s,r,a,l;if(e.spanGaps&&(t=t.filter(t=>!t.skip)),"monotone"===e.cubicInterpolationMode)hn(t,o);else{let i=n?t[t.length-1]:t[0];for(s=0,r=t.length;s<r;++s)a=t[s],l=un(i,a,t[Math.min(s+1,r-(n?0:1))%r],e.tension),a.cp1x=l.previous.x,a.cp1y=l.previous.y,a.cp2x=l.next.x,a.cp2y=l.next.y,i=a}e.capBezierPoints&&function(t,e){let i,n,o,s,r,a=Gt(t[0],e);for(i=0,n=t.length;i<n;++i)r=s,s=a,a=i<n-1&&Gt(t[i+1],e),s&&(o=t[i],r&&(o.cp1x=pn(o.cp1x,e.left,e.right),o.cp1y=pn(o.cp1y,e.top,e.bottom)),a&&(o.cp2x=pn(o.cp2x,e.left,e.right),o.cp2y=pn(o.cp2y,e.top,e.bottom)))}(t,i)}function gn(t,e,i,n){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function mn(t,e,i,n){return{x:t.x+i*(e.x-t.x),y:"middle"===n?i<.5?t.y:e.y:"after"===n?i<1?t.y:e.y:i>0?e.y:t.y}}function yn(t,e,i,n){const o={x:t.cp2x,y:t.cp2y},s={x:e.cp1x,y:e.cp1y},r=gn(t,o,i),a=gn(o,s,i),l=gn(s,e,i),c=gn(r,a,i),d=gn(a,l,i);return gn(c,d,i)}function bn(t,e,i){return t?function(t,e){return{x:i=>t+t+e-i,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,i):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function vn(t,e){let i,n;"ltr"!==e&&"rtl"!==e||(i=t.canvas.style,n=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=n)}function xn(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function _n(t){return"angle"===t?{between:Ft,compare:zt,normalize:Ht}:{between:(t,e,i)=>t>=Math.min(e,i)&&t<=Math.max(i,e),compare:(t,e)=>t-e,normalize:t=>t}}function wn({start:t,end:e,count:i,loop:n,style:o}){return{start:t%i,end:e%i,loop:n&&(e-t+1)%i==0,style:o}}function kn(t,e,i){if(!i)return[t];const{property:n,start:o,end:s}=i,r=e.length,{compare:a,between:l,normalize:c}=_n(n),{start:d,end:u,loop:h,style:p}=function(t,e,i){const{property:n,start:o,end:s}=i,{between:r,normalize:a}=_n(n),l=e.length;let c,d,{start:u,end:h,loop:p}=t;if(p){for(u+=l,h+=l,c=0,d=l;c<d&&r(a(e[u%l][n]),o,s);++c)u--,h--;u%=l,h%=l}return h<u&&(h+=l),{start:u,end:h,loop:p,style:t.style}}(t,e,i),f=[];let g,m,y,b=!1,v=null;const x=()=>b||l(o,y,g)&&0!==a(o,y),_=()=>!b||0===a(s,g)||l(s,y,g);for(let t=d,i=d;t<=u;++t)m=e[t%r],m.skip||(g=c(m[n]),g!==y&&(b=l(g,o,s),null===v&&x()&&(v=0===a(g,o)?t:i),null!==v&&_()&&(f.push(wn({start:v,end:t,loop:h,count:r,style:p})),v=null),i=t,y=g));return null!==v&&f.push(wn({start:v,end:u,loop:h,count:r,style:p})),f}function Sn(t,e){const i=[],n=t.segments;for(let o=0;o<n.length;o++){const s=kn(n[o],t.points,e);s.length&&i.push(...s)}return i}function Tn(t,e){const i=t.points,n=t.options.spanGaps,o=i.length;if(!o)return[];const s=!!t._loop,{start:r,end:a}=function(t,e,i,n){let o=0,s=e-1;if(i&&!n)for(;o<e&&!t[o].skip;)o++;for(;o<e&&t[o].skip;)o++;for(o%=e,i&&(s+=o);s>o&&t[s%e].skip;)s--;return s%=e,{start:o,end:s}}(i,o,s,n);if(!0===n)return Cn([{start:r,end:a,loop:s}],i,e);return Cn(function(t,e,i,n){const o=t.length,s=[];let r,a=e,l=t[e];for(r=e+1;r<=i;++r){const i=t[r%o];i.skip||i.stop?l.skip||(n=!1,s.push({start:e%o,end:(r-1)%o,loop:n}),e=a=i.stop?r:null):(a=r,l.skip&&(e=r)),l=i}return null!==a&&s.push({start:e%o,end:a%o,loop:n}),s}(i,r,a<r?a+o:a,!!t._fullLoop&&0===r&&a===o-1),i,e)}function Cn(t,e,i){return i&&i.setContext&&e?function(t,e,i){const n=e.length,o=[];let s=t[0].start,r=s;for(const l of t){let t,c,d=e[s%n];for(r=s+1;r<=l.end;r++){const u=e[r%n];a=i.setContext({type:"segment",p0:d,p1:u}),c={backgroundColor:a.backgroundColor,borderCapStyle:a.borderCapStyle,borderDash:a.borderDash,borderDashOffset:a.borderDashOffset,borderJoinStyle:a.borderJoinStyle,borderWidth:a.borderWidth,borderColor:a.borderColor},Mn(c,t)&&(o.push({start:s,end:r-1,loop:l.loop,style:t}),t=c,s=r-1),d=u,t=c}s<r-1&&(o.push({start:s,end:r-1,loop:l.loop,style:c}),s=r-1)}var a;return o}(t,e,i):t}function Mn(t,e){return e&&JSON.stringify(t)!==JSON.stringify(e)}var Dn=Object.freeze({__proto__:null,easingEffects:yi,color:H,getHoverColor:F,noop:W,uid:B,isNullOrUndef:V,isArray:q,isObject:Y,isFinite:U,finiteOrDefault:X,valueOrDefault:K,toPercentage:G,toDimension:Q,callback:J,each:Z,_elementsEqual:tt,clone:et,_merger:nt,merge:ot,mergeIf:st,_mergerIf:rt,_deprecated:function(t,e,i,n){void 0!==e&&console.warn(t+': "'+i+'" is deprecated. Please use "'+n+'" instead')},resolveObjectKey:lt,_capitalize:ct,defined:dt,isFunction:ut,setsEqual:ht,toFontString:Vt,_measureText:qt,_longestText:Yt,_alignPixel:Ut,clearCanvas:Xt,drawPoint:Kt,_isPointInArea:Gt,clipArea:Qt,unclipArea:Jt,_steppedLineTo:Zt,_bezierCurveTo:te,renderText:ee,addRoundedRectPath:ne,_lookup:oe,_lookupByKey:se,_rlookupByKey:re,_filterBetween:ae,listenArrayEvents:ce,unlistenArrayEvents:de,_arrayUnique:ue,_createResolver:Xi,_attachContext:Ki,_descriptors:Gi,splineCurve:un,splineCurveMonotone:hn,_updateBezierControlPoints:fn,_getParentNode:he,getStyle:ge,getRelativePosition:be,getMaximumSize:xe,retinaScale:_e,supportsEventListenerOptions:we,readUsedSize:ke,fontString:function(t,e,i){return e+" "+t+"px "+i},requestAnimFrame:t,throttled:e,debounce:i,_toLeftRightCenter:n,_alignStartEnd:o,_textX:s,_pointInLine:gn,_steppedInterpolation:mn,_bezierInterpolation:yn,formatNumber:Ii,toLineHeight:Le,_readValueToProps:$e,toTRBL:Re,toTRBLCorners:Ie,toPadding:Ne,toFont:je,resolve:ze,_addGrace:He,PI:bt,TAU:vt,PITAU:xt,INFINITY:_t,RAD_PER_DEG:wt,HALF_PI:kt,QUARTER_PI:St,TWO_THIRDS_PI:Tt,log10:Ct,sign:Mt,niceNum:Dt,_factorize:At,isNumber:Pt,almostEquals:Ot,almostWhole:Et,_setMinAndMaxByKey:Lt,toRadians:$t,toDegrees:Rt,_decimalPlaces:It,getAngleFromPoint:Nt,distanceBetweenPoints:jt,_angleDiff:zt,_normalizeAngle:Ht,_angleBetween:Ft,_limitValue:Wt,_int16Range:Bt,getRtlAdapter:bn,overrideTextDirection:vn,restoreTextDirection:xn,_boundSegment:kn,_boundSegments:Sn,_computeSegments:Tn});class An{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=this,i=Object.getPrototypeOf(t);let n;(function(t){return"id"in t&&"defaults"in t})(i)&&(n=e.register(i));const o=e.items,s=t.id,r=e.scope+"."+s;if(!s)throw new Error("class does not have id: "+t);return s in o||(o[s]=t,function(t,e,i){const n=ot(Object.create(null),[i?yt.get(i):{},yt.get(e),t.defaults]);yt.set(e,n),t.defaultRoutes&&function(t,e){Object.keys(e).forEach(i=>{const n=i.split("."),o=n.pop(),s=[t].concat(n).join("."),r=e[i].split("."),a=r.pop(),l=r.join(".");yt.route(s,o,l,a)})}(e,t.defaultRoutes);t.descriptors&&yt.describe(e,t.descriptors)}(t,r,n),e.override&&yt.override(t.id,t.overrides)),r}get(t){return this.items[t]}unregister(t){const e=this.items,i=t.id,n=this.scope;i in e&&delete e[i],n&&i in yt[n]&&(delete yt[n][i],this.override&&delete pt[i])}}var Pn=new class{constructor(){this.controllers=new An(Li,"datasets",!0),this.elements=new An($i,"elements"),this.plugins=new An(Object,"plugins"),this.scales=new An(Ui,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,i){const n=this;[...e].forEach(e=>{const o=i||n._getRegistryForType(e);i||o.isForType(e)||o===n.plugins&&e.id?n._exec(t,o,e):Z(e,e=>{const o=i||n._getRegistryForType(e);n._exec(t,o,e)})})}_exec(t,e,i){const n=ct(t);J(i["before"+n],[],i),e[t](i),J(i["after"+n],[],i)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const i=this._typedRegistries[e];if(i.isForType(t))return i}return this.plugins}_get(t,e,i){const n=e.get(t);if(void 0===n)throw new Error('"'+t+'" is not a registered '+i+".");return n}};class On{constructor(){this._init=[]}notify(t,e,i,n){const o=this;"beforeInit"===e&&(o._init=o._createDescriptors(t,!0),o._notify(o._init,t,"install"));const s=n?o._descriptors(t).filter(n):o._descriptors(t),r=o._notify(s,t,e,i);return"destroy"===e&&(o._notify(s,t,"stop"),o._notify(o._init,t,"uninstall")),r}_notify(t,e,i,n){n=n||{};for(const o of t){const t=o.plugin;if(!1===J(t[i],[e,n,o.options],t)&&n.cancelable)return!1}return!0}invalidate(){V(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const i=t&&t.config,n=K(i.options&&i.options.plugins,{}),o=function(t){const e=[],i=Object.keys(Pn.plugins.items);for(let t=0;t<i.length;t++)e.push(Pn.getPlugin(i[t]));const n=t.plugins||[];for(let t=0;t<n.length;t++){const i=n[t];-1===e.indexOf(i)&&e.push(i)}return e}(i);return!1!==n||e?function(t,e,i,n){const o=[],s=t.getContext();for(let r=0;r<e.length;r++){const a=e[r],l=a.id,c=En(i[l],n);null!==c&&o.push({plugin:a,options:Ln(t.config,a,c,s)})}return o}(t,o,n,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],i=this._cache,n=(t,e)=>t.filter(t=>!e.some(e=>t.plugin.id===e.plugin.id));this._notify(n(e,i),t,"stop"),this._notify(n(i,e),t,"start")}}function En(t,e){return e||!1!==t?!0===t?{}:t:null}function Ln(t,e,i,n){const o=t.pluginScopeKeys(e),s=t.getOptionScopes(i,o);return t.createResolver(s,n,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function $n(t,e){const i=yt.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function Rn(t,e){return"x"===t||"y"===t?t:e.axis||("top"===(i=e.position)||"bottom"===i?"x":"left"===i||"right"===i?"y":void 0)||t.charAt(0).toLowerCase();var i}function In(t){const e=t.options||(t.options={});e.plugins=K(e.plugins,{}),e.scales=function(t,e){const i=pt[t.type]||{scales:{}},n=e.scales||{},o=$n(t.type,e),s=Object.create(null),r=Object.create(null);return Object.keys(n).forEach(t=>{const e=n[t],a=Rn(t,e),l=function(t,e){return t===e?"_index_":"_value_"}(a,o),c=i.scales||{};s[a]=s[a]||t,r[t]=st(Object.create(null),[{axis:a},e,c[a],c[l]])}),t.data.datasets.forEach(i=>{const o=i.type||t.type,a=i.indexAxis||$n(o,e),l=(pt[o]||{}).scales||{};Object.keys(l).forEach(t=>{const e=function(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}(t,a),o=i[e+"AxisID"]||s[e]||e;r[o]=r[o]||Object.create(null),st(r[o],[{axis:e},n[o],l[t]])})}),Object.keys(r).forEach(t=>{const e=r[t];st(e,[yt.scales[e.type],yt.scale])}),r}(t,e)}function Nn(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const jn=new Map,zn=new Set;function Hn(t,e){let i=jn.get(t);return i||(i=e(),jn.set(t,i),zn.add(i)),i}const Fn=(t,e,i)=>{const n=lt(e,i);void 0!==n&&t.add(n)};class Wn{constructor(t){this._config=function(t){return(t=t||{}).data=Nn(t.data),In(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=Nn(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),In(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return Hn(t,()=>[["datasets."+t,""]])}datasetAnimationScopeKeys(t,e){return Hn(`${t}.transition.${e}`,()=>[[`datasets.${t}.transitions.${e}`,"transitions."+e],["datasets."+t,""]])}datasetElementScopeKeys(t,e){return Hn(`${t}-${e}`,()=>[[`datasets.${t}.elements.${e}`,"datasets."+t,"elements."+e,""]])}pluginScopeKeys(t){const e=t.id;return Hn(`${this.type}-plugin-${e}`,()=>[["plugins."+e,...t.additionalOptionScopes||[]]])}_cachedScopes(t,e){const i=this._scopeCache;let n=i.get(t);return n&&!e||(n=new Map,i.set(t,n)),n}getOptionScopes(t,e,i){const{options:n,type:o}=this,s=this._cachedScopes(t,i),r=s.get(e);if(r)return r;const a=new Set;e.forEach(e=>{t&&(a.add(t),e.forEach(e=>Fn(a,t,e))),e.forEach(t=>Fn(a,n,t)),e.forEach(t=>Fn(a,pt[o]||{},t)),e.forEach(t=>Fn(a,yt,t)),e.forEach(t=>Fn(a,ft,t))});const l=Array.from(a);return zn.has(e)&&s.set(e,l),l}chartOptionScopes(){const{options:t,type:e}=this;return[t,pt[e]||{},yt.datasets[e]||{},{type:e},yt,ft]}resolveNamedOptions(t,e,i,n=[""]){const o={$shared:!0},{resolver:s,subPrefixes:r}=Bn(this._resolverCache,t,n);let a=s;if(function(t,e){const{isScriptable:i,isIndexable:n}=Gi(t);for(const o of e)if(i(o)&&ut(t[o])||n(o)&&q(t[o]))return!0;return!1}(s,e)){o.$shared=!1;a=Ki(s,i=ut(i)?i():i,this.createResolver(t,i,r))}for(const t of e)o[t]=a[t];return o}createResolver(t,e,i=[""],n){const{resolver:o}=Bn(this._resolverCache,t,i);return Y(e)?Ki(o,e,void 0,n):o}}function Bn(t,e,i){let n=t.get(e);n||(n=new Map,t.set(e,n));const o=i.join();let s=n.get(o);if(!s){s={resolver:Xi(e,i),subPrefixes:i.filter(t=>!t.toLowerCase().includes("hover"))},n.set(o,s)}return s}const Vn=["top","bottom","left","right","chartArea"];function qn(t,e){return"top"===t||"bottom"===t||-1===Vn.indexOf(t)&&"x"===e}function Yn(t,e){return function(i,n){return i[t]===n[t]?i[e]-n[e]:i[t]-n[t]}}function Un(t){const e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),J(i&&i.onComplete,[t],e)}function Xn(t){const e=t.chart,i=e.options.animation;J(i&&i.onProgress,[t],e)}function Kn(){return"undefined"!=typeof window&&"undefined"!=typeof document}function Gn(t){return Kn()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const Qn={},Jn=t=>{const e=Gn(t);return Object.values(Qn).filter(t=>t.canvas===e).pop()};class Zn{constructor(t,e){const n=this;this.config=e=new Wn(e);const o=Gn(t),s=Jn(o);if(s)throw new Error("Canvas is already in use. Chart with ID '"+s.id+"' must be destroyed before the canvas can be reused.");const a=e.createResolver(e.chartOptionScopes(),n.getContext());this.platform=n._initializePlatform(o,e);const l=n.platform.acquireContext(o,a.aspectRatio),c=l&&l.canvas,d=c&&c.height,u=c&&c.width;this.id=B(),this.ctx=l,this.canvas=c,this.width=u,this.height=d,this._options=a,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this.scale=void 0,this._plugins=new On,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=i(()=>this.update("resize"),a.resizeDelay||0),Qn[n.id]=n,l&&c?(r.listen(n,"complete",Un),r.listen(n,"progress",Xn),n._initialize(),n.attached&&n.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:n,_aspectRatio:o}=this;return V(t)?e&&o?o:n?i/n:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}_initialize(){const t=this;return t.notifyPlugins("beforeInit"),t.options.responsive?t.resize():_e(t,t.options.devicePixelRatio),t.bindEvents(),t.notifyPlugins("afterInit"),t}_initializePlatform(t,e){return e.platform?new e.platform:!Kn()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?new Ze:new hi}clear(){return Xt(this.canvas,this.ctx),this}stop(){return r.stop(this),this}resize(t,e){r.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const i=this,n=i.options,o=i.canvas,s=n.maintainAspectRatio&&i.aspectRatio,r=i.platform.getMaximumSize(o,t,e,s),a=n.devicePixelRatio||i.platform.getDevicePixelRatio();i.width=r.width,i.height=r.height,i._aspectRatio=i.aspectRatio,_e(i,a,!0)&&(i.notifyPlugins("resize",{size:r}),J(n.onResize,[i,r],i),i.attached&&i._doResize()&&i.render())}ensureScalesHaveIDs(){Z(this.options.scales||{},(t,e)=>{t.id=e})}buildOrUpdateScales(){const t=this,e=t.options,i=e.scales,n=t.scales,o=Object.keys(n).reduce((t,e)=>(t[e]=!1,t),{});let s=[];i&&(s=s.concat(Object.keys(i).map(t=>{const e=i[t],n=Rn(t,e),o="r"===n,s="x"===n;return{options:e,dposition:o?"chartArea":s?"bottom":"left",dtype:o?"radialLinear":s?"category":"linear"}}))),Z(s,i=>{const s=i.options,r=s.id,a=Rn(r,s),l=K(s.type,i.dtype);void 0!==s.position&&qn(s.position,a)===qn(i.dposition)||(s.position=i.dposition),o[r]=!0;let c=null;if(r in n&&n[r].type===l)c=n[r];else{c=new(Pn.getScale(l))({id:r,type:l,ctx:t.ctx,chart:t}),n[c.id]=c}c.init(s,e)}),Z(o,(t,e)=>{t||delete n[e]}),Z(n,e=>{Qe.configure(t,e,e.options),Qe.addBox(t,e)})}_updateMetasets(){const t=this,e=t._metasets,i=t.data.datasets.length,n=e.length;if(e.sort((t,e)=>t.index-e.index),n>i){for(let e=i;e<n;++e)t._destroyDatasetMeta(e);e.splice(i,n-i)}t._sortedMetasets=e.slice(0).sort(Yn("order","index"))}_removeUnreferencedMetasets(){const t=this,{_metasets:e,data:{datasets:i}}=t;e.length>i.length&&delete t._stacks,e.forEach((e,n)=>{0===i.filter(t=>t===e._dataset).length&&t._destroyDatasetMeta(n)})}buildOrUpdateControllers(){const t=this,e=[],i=t.data.datasets;let n,o;for(t._removeUnreferencedMetasets(),n=0,o=i.length;n<o;n++){const o=i[n];let s=t.getDatasetMeta(n);const r=o.type||t.config.type;if(s.type&&s.type!==r&&(t._destroyDatasetMeta(n),s=t.getDatasetMeta(n)),s.type=r,s.indexAxis=o.indexAxis||$n(r,t.options),s.order=o.order||0,s.index=n,s.label=""+o.label,s.visible=t.isDatasetVisible(n),s.controller)s.controller.updateIndex(n),s.controller.linkScales();else{const i=Pn.getController(r),{datasetElementType:o,dataElementType:a}=yt.datasets[r];Object.assign(i.prototype,{dataElementType:Pn.getElement(a),datasetElementType:o&&Pn.getElement(o)}),s.controller=new i(t,n),e.push(s.controller)}}return t._updateMetasets(),e}_resetElements(){const t=this;Z(t.data.datasets,(e,i)=>{t.getDatasetMeta(i).controller.reset()},t)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this,i=e.config;i.update(),e._options=i.createResolver(i.chartOptionScopes(),e.getContext()),Z(e.scales,t=>{Qe.removeBox(e,t)});const n=e._animationsDisabled=!e.options.animation;e.ensureScalesHaveIDs(),e.buildOrUpdateScales();const o=new Set(Object.keys(e._listeners)),s=new Set(e.options.events);if(ht(o,s)&&!!this._responsiveListeners===e.options.responsive||(e.unbindEvents(),e.bindEvents()),e._plugins.invalidate(),!1===e.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const r=e.buildOrUpdateControllers();e.notifyPlugins("beforeElementsUpdate");let a=0;for(let t=0,i=e.data.datasets.length;t<i;t++){const{controller:i}=e.getDatasetMeta(t),o=!n&&-1===r.indexOf(i);i.buildOrUpdateElements(o),a=Math.max(+i.getMaxOverflow(),a)}e._minPadding=a,e._updateLayout(a),n||Z(r,t=>{t.reset()}),e._updateDatasets(t),e.notifyPlugins("afterUpdate",{mode:t}),e._layers.sort(Yn("z","_idx")),e._lastEvent&&e._eventHandler(e._lastEvent,!0),e.render()}_updateLayout(t){const e=this;if(!1===e.notifyPlugins("beforeLayout",{cancelable:!0}))return;Qe.update(e,e.width,e.height,t);const i=e.chartArea,n=i.width<=0||i.height<=0;e._layers=[],Z(e.boxes,t=>{n&&"chartArea"===t.position||(t.configure&&t.configure(),e._layers.push(...t._layers()))},e),e._layers.forEach((t,e)=>{t._idx=e}),e.notifyPlugins("afterLayout")}_updateDatasets(t){const e=this,i="function"==typeof t;if(!1!==e.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let n=0,o=e.data.datasets.length;n<o;++n)e._updateDataset(n,i?t({datasetIndex:n}):t);e.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const i=this.getDatasetMeta(t),n={meta:i,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",n)&&(i.controller._update(e),n.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",n))}render(){const t=this;!1!==t.notifyPlugins("beforeRender",{cancelable:!0})&&(r.has(t)?t.attached&&!r.running(t)&&r.start(t):(t.draw(),Un({chart:t})))}draw(){const t=this;let e;if(t._resizeBeforeDraw){const{width:e,height:i}=t._resizeBeforeDraw;t._resize(e,i),t._resizeBeforeDraw=null}if(t.clear(),t.width<=0||t.height<=0)return;if(!1===t.notifyPlugins("beforeDraw",{cancelable:!0}))return;const i=t._layers;for(e=0;e<i.length&&i[e].z<=0;++e)i[e].draw(t.chartArea);for(t._drawDatasets();e<i.length;++e)i[e].draw(t.chartArea);t.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,i=[];let n,o;for(n=0,o=e.length;n<o;++n){const o=e[n];t&&!o.visible||i.push(o)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){const t=this;if(!1===t.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const e=t.getSortedVisibleDatasetMetas();for(let i=e.length-1;i>=0;--i)t._drawDataset(e[i]);t.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this,i=e.ctx,n=t._clip,o=!n.disabled,s=e.chartArea,r={meta:t,index:t.index,cancelable:!0};!1!==e.notifyPlugins("beforeDatasetDraw",r)&&(o&&Qt(i,{left:!1===n.left?0:s.left-n.left,right:!1===n.right?e.width:s.right+n.right,top:!1===n.top?0:s.top-n.top,bottom:!1===n.bottom?e.height:s.bottom+n.bottom}),t.controller.draw(),o&&Jt(i),r.cancelable=!1,e.notifyPlugins("afterDatasetDraw",r))}getElementsAtEventForMode(t,e,i,n){const o=Pe.modes[e];return"function"==typeof o?o(this,t,i,n):[]}getDatasetMeta(t){const e=this.data.datasets[t],i=this._metasets;let n=i.filter(t=>t&&t._dataset===e).pop();return n||(n={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(n)),n}getContext(){return this.$context||(this.$context={chart:this,type:"chart"})}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const i=this.getDatasetMeta(t);return"boolean"==typeof i.hidden?!i.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateDatasetVisibility(t,e){const i=e?"show":"hide",n=this.getDatasetMeta(t),o=n.controller._resolveAnimations(void 0,i);this.setDatasetVisibility(t,e),o.update(n,{visible:e}),this.update(e=>e.datasetIndex===t?i:void 0)}hide(t){this._updateDatasetVisibility(t,!1)}show(t){this._updateDatasetVisibility(t,!0)}_destroyDatasetMeta(t){const e=this,i=e._metasets&&e._metasets[t];i&&i.controller&&(i.controller._destroy(),delete e._metasets[t])}destroy(){const t=this,{canvas:e,ctx:i}=t;let n,o;for(t.stop(),r.remove(t),n=0,o=t.data.datasets.length;n<o;++n)t._destroyDatasetMeta(n);t.config.clearCache(),e&&(t.unbindEvents(),Xt(e,i),t.platform.releaseContext(i),t.canvas=null,t.ctx=null),t.notifyPlugins("destroy"),delete Qn[t.id]}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this,e=t._listeners,i=t.platform,n=function(e,i,n){e.offsetX=i,e.offsetY=n,t._eventHandler(e)};Z(t.options.events,o=>((n,o)=>{i.addEventListener(t,n,o),e[n]=o})(o,n))}bindResponsiveEvents(){const t=this;t._responsiveListeners||(t._responsiveListeners={});const e=t._responsiveListeners,i=t.platform,n=(n,o)=>{i.addEventListener(t,n,o),e[n]=o},o=(n,o)=>{e[n]&&(i.removeEventListener(t,n,o),delete e[n])},s=(e,i)=>{t.canvas&&t.resize(e,i)};let r;const a=()=>{o("attach",a),t.attached=!0,t.resize(),n("resize",s),n("detach",r)};r=()=>{t.attached=!1,o("resize",s),n("attach",a)},i.isAttached(t.canvas)?a():r()}unbindEvents(){const t=this;Z(t._listeners,(e,i)=>{t.platform.removeEventListener(t,i,e)}),t._listeners={},Z(t._responsiveListeners,(e,i)=>{t.platform.removeEventListener(t,i,e)}),t._responsiveListeners=void 0}updateHoverStyle(t,e,i){const n=i?"set":"remove";let o,s,r,a;for("dataset"===e&&(o=this.getDatasetMeta(t[0].datasetIndex),o.controller["_"+n+"DatasetHoverStyle"]()),r=0,a=t.length;r<a;++r){s=t[r];const e=s&&this.getDatasetMeta(s.datasetIndex).controller;e&&e[n+"HoverStyle"](s.element,s.datasetIndex,s.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this,i=e._active||[],n=t.map(({datasetIndex:t,index:i})=>{const n=e.getDatasetMeta(t);if(!n)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:n.data[i],index:i}});!tt(n,i)&&(e._active=n,e._updateHoverStyles(n,i))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}_updateHoverStyles(t,e,i){const n=this,o=n.options.hover,s=(t,e)=>t.filter(t=>!e.some(e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)),r=s(e,t),a=i?t:s(t,e);r.length&&n.updateHoverStyle(r,o.mode,!1),a.length&&o.mode&&n.updateHoverStyle(a,o.mode,!0)}_eventHandler(t,e){const i=this,n={event:t,replay:e,cancelable:!0},o=e=>(e.options.events||this.options.events).includes(t.type);if(!1===i.notifyPlugins("beforeEvent",n,o))return;const s=i._handleEvent(t,e);return n.cancelable=!1,i.notifyPlugins("afterEvent",n,o),(s||n.changed)&&i.render(),i}_handleEvent(t,e){const i=this,{_active:n=[],options:o}=i,s=o.hover,r=e;let a=[],l=!1,c=null;return"mouseout"!==t.type&&(a=i.getElementsAtEventForMode(t,s.mode,s,r),c="click"===t.type?i._lastEvent:t),i._lastEvent=null,Gt(t,i.chartArea,i._minPadding)&&(J(o.onHover,[t,a,i],i),"mouseup"!==t.type&&"click"!==t.type&&"contextmenu"!==t.type||J(o.onClick,[t,a,i],i)),l=!tt(a,n),(l||e)&&(i._active=a,i._updateHoverStyles(a,n,e)),i._lastEvent=c,l}}const to=()=>Z(Zn.instances,t=>t._plugins.invalidate());function eo(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}Object.defineProperties(Zn,{defaults:{enumerable:!0,value:yt},instances:{enumerable:!0,value:Qn},overrides:{enumerable:!0,value:pt},registry:{enumerable:!0,value:Pn},version:{enumerable:!0,value:"3.4.1"},getChart:{enumerable:!0,value:Jn},register:{enumerable:!0,value:(...t)=>{Pn.add(...t),to()}},unregister:{enumerable:!0,value:(...t)=>{Pn.remove(...t),to()}}});class io{constructor(t){this.options=t||{}}formats(){return eo()}parse(t,e){return eo()}format(t,e){return eo()}add(t,e,i){return eo()}diff(t,e,i){return eo()}startOf(t,e,i){return eo()}endOf(t,e){return eo()}}io.override=function(t){Object.assign(io.prototype,t)};var no={_date:io};function oo(t){const e=function(t){if(!t._cache.$bar){const e=t.getMatchingVisibleMetas("bar");let i=[];for(let n=0,o=e.length;n<o;n++)i=i.concat(e[n].controller.getAllParsedValues(t));t._cache.$bar=ue(i.sort((t,e)=>t-e))}return t._cache.$bar}(t);let i,n,o,s,r=t._length;const a=()=>{32767!==o&&-32768!==o&&(dt(s)&&(r=Math.min(r,Math.abs(o-s)||r)),s=o)};for(i=0,n=e.length;i<n;++i)o=t.getPixelForValue(e[i]),a();for(s=void 0,i=0,n=t.ticks.length;i<n;++i)o=t.getPixelForTick(i),a();return r}function so(t,e,i,n){return q(t)?function(t,e,i,n){const o=i.parse(t[0],n),s=i.parse(t[1],n),r=Math.min(o,s),a=Math.max(o,s);let l=r,c=a;Math.abs(r)>Math.abs(a)&&(l=a,c=r),e[i.axis]=c,e._custom={barStart:l,barEnd:c,start:o,end:s,min:r,max:a}}(t,e,i,n):e[i.axis]=i.parse(t,n),e}function ro(t,e,i,n){const o=t.iScale,s=t.vScale,r=o.getLabels(),a=o===s,l=[];let c,d,u,h;for(c=i,d=i+n;c<d;++c)h=e[c],u={},u[o.axis]=a||o.parse(r[c],c),l.push(so(h,u,s,c));return l}function ao(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}class lo extends Li{parsePrimitiveData(t,e,i,n){return ro(t,e,i,n)}parseArrayData(t,e,i,n){return ro(t,e,i,n)}parseObjectData(t,e,i,n){const{iScale:o,vScale:s}=t,{xAxisKey:r="x",yAxisKey:a="y"}=this._parsing,l="x"===o.axis?r:a,c="x"===s.axis?r:a,d=[];let u,h,p,f;for(u=i,h=i+n;u<h;++u)f=e[u],p={},p[o.axis]=o.parse(lt(f,l),u),d.push(so(lt(f,c),p,s,u));return d}updateRangeFromParsed(t,e,i,n){super.updateRangeFromParsed(t,e,i,n);const o=i._custom;o&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,o.min),t.max=Math.max(t.max,o.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:i,vScale:n}=e,o=this.getParsed(t),s=o._custom,r=ao(s)?"["+s.start+", "+s.end+"]":""+n.getLabelForValue(o[n.axis]);return{label:""+i.getLabelForValue(o[i.axis]),value:r}}initialize(){this.enableOptionSharing=!0,super.initialize();this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,i,n){const o=this,s="reset"===n,r=o._cachedMeta.vScale,a=r.getBasePixel(),l=r.isHorizontal(),c=o._getRuler(),d=o.resolveDataElementOptions(e,n),u=o.getSharedOptions(d),h=o.includeOptions(n,u);o.updateSharedOptions(u,n,d);for(let d=e;d<e+i;d++){const e=o.getParsed(d),i=s||V(e[r.axis])?{base:a,head:a}:o._calculateBarValuePixels(d),p=o._calculateBarIndexPixels(d,c),f=(e._stacks||{})[r.axis],g={horizontal:l,base:i.base,enableBorderRadius:!f||ao(e._custom)||o.index===f._top||o.index===f._bottom,x:l?i.head:p.center,y:l?p.center:i.head,height:l?p.size:Math.abs(i.size),width:l?Math.abs(i.size):p.size};h&&(g.options=u||o.resolveDataElementOptions(d,t[d].active?"active":n)),o.updateElement(t[d],d,g,n)}}_getStacks(t,e){const i=this._cachedMeta.iScale,n=i.getMatchingVisibleMetas(this._type),o=i.options.stacked,s=n.length,r=[];let a,l;for(a=0;a<s;++a)if(l=n[a],l.controller.options.grouped){if(void 0!==e){const t=l.controller.getParsed(e)[l.controller._cachedMeta.vScale.axis];if(V(t)||isNaN(t))continue}if((!1===o||-1===r.indexOf(l.stack)||void 0===o&&void 0===l.stack)&&r.push(l.stack),l.index===t)break}return r.length||r.push(void 0),r}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){const n=this._getStacks(t,i),o=void 0!==e?n.indexOf(e):-1;return-1===o?n.length-1:o}_getRuler(){const t=this,e=t.options,i=t._cachedMeta,n=i.iScale,o=[];let s,r;for(s=0,r=i.data.length;s<r;++s)o.push(n.getPixelForValue(t.getParsed(s)[n.axis],s));const a=e.barThickness;return{min:a||oo(n),pixels:o,start:n._startPixel,end:n._endPixel,stackCount:t._getStackCount(),scale:n,grouped:e.grouped,ratio:a?1:e.categoryPercentage*e.barPercentage}}_calculateBarValuePixels(t){const{vScale:e,_stacked:i}=this._cachedMeta,{base:n,minBarLength:o}=this.options,s=this.getParsed(t),r=s._custom,a=ao(r);let l,c,d=s[e.axis],u=0,h=i?this.applyStack(e,s,i):d;h!==d&&(u=h-d,h=d),a&&(d=r.barStart,h=r.barEnd-r.barStart,0!==d&&Mt(d)!==Mt(r.barEnd)&&(u=0),u+=d);const p=V(n)||a?u:n;let f=e.getPixelForValue(p);l=this.chart.getDataVisibility(t)?e.getPixelForValue(u+h):f,c=l-f,void 0!==o&&Math.abs(c)<o&&(c=c<0?-o:o,0===d&&(f-=c/2),l=f+c);const g=n||0;if(f===e.getPixelForValue(g)){const t=e.getLineWidthForValue(g)/2;c>0?(f+=t,c-=t):c<0&&(f-=t,c+=t)}return{size:c,base:f,head:l,center:l+c/2}}_calculateBarIndexPixels(t,e){const i=this,n=e.scale,o=i.options,s=o.skipNull,r=K(o.maxBarThickness,1/0);let a,l;if(e.grouped){const n=s?i._getStackCount(t):e.stackCount,c="flex"===o.barThickness?function(t,e,i,n){const o=e.pixels,s=o[t];let r=t>0?o[t-1]:null,a=t<o.length-1?o[t+1]:null;const l=i.categoryPercentage;null===r&&(r=s-(null===a?e.end-e.start:a-s)),null===a&&(a=s+s-r);const c=s-(s-Math.min(r,a))/2*l;return{chunk:Math.abs(a-r)/2*l/n,ratio:i.barPercentage,start:c}}(t,e,o,n):function(t,e,i,n){const o=i.barThickness;let s,r;return V(o)?(s=e.min*i.categoryPercentage,r=i.barPercentage):(s=o*n,r=1),{chunk:s/n,ratio:r,start:e.pixels[t]-s/2}}(t,e,o,n),d=i._getStackIndex(i.index,i._cachedMeta.stack,s?t:void 0);a=c.start+c.chunk*d+c.chunk/2,l=Math.min(r,c.chunk*c.ratio)}else a=n.getPixelForValue(i.getParsed(t)[n.axis],t),l=Math.min(r,e.min*e.ratio);return{base:a-l/2,head:a+l/2,center:a,size:l}}draw(){const t=this,e=t._cachedMeta,i=e.vScale,n=e.data,o=n.length;let s=0;for(;s<o;++s)null!==t.getParsed(s)[i.axis]&&n[s].draw(t._ctx)}}lo.id="bar",lo.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},lo.overrides={interaction:{mode:"index"},scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class co extends Li{initialize(){this.enableOptionSharing=!0,super.initialize()}parseObjectData(t,e,i,n){const{xScale:o,yScale:s}=t,{xAxisKey:r="x",yAxisKey:a="y"}=this._parsing,l=[];let c,d,u;for(c=i,d=i+n;c<d;++c)u=e[c],l.push({x:o.parse(lt(u,r),c),y:s.parse(lt(u,a),c),_custom:u&&u.r&&+u.r});return l}getMaxOverflow(){const{data:t,_parsed:e}=this._cachedMeta;let i=0;for(let n=t.length-1;n>=0;--n)i=Math.max(i,t[n].size()/2,e[n]._custom);return i>0&&i}getLabelAndValue(t){const e=this._cachedMeta,{xScale:i,yScale:n}=e,o=this.getParsed(t),s=i.getLabelForValue(o.x),r=n.getLabelForValue(o.y),a=o._custom;return{label:e.label,value:"("+s+", "+r+(a?", "+a:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,i,n){const o=this,s="reset"===n,{iScale:r,vScale:a}=o._cachedMeta,l=o.resolveDataElementOptions(e,n),c=o.getSharedOptions(l),d=o.includeOptions(n,c),u=r.axis,h=a.axis;for(let l=e;l<e+i;l++){const e=t[l],i=!s&&o.getParsed(l),c={},p=c[u]=s?r.getPixelForDecimal(.5):r.getPixelForValue(i[u]),f=c[h]=s?a.getBasePixel():a.getPixelForValue(i[h]);c.skip=isNaN(p)||isNaN(f),d&&(c.options=o.resolveDataElementOptions(l,e.active?"active":n),s&&(c.options.radius=0)),o.updateElement(e,l,c,n)}o.updateSharedOptions(c,n,l)}resolveDataElementOptions(t,e){const i=this.getParsed(t);let n=super.resolveDataElementOptions(t,e);n.$shared&&(n=Object.assign({},n,{$shared:!1}));const o=n.radius;return"active"!==e&&(n.radius=0),n.radius+=K(i&&i._custom,o),n}}co.id="bubble",co.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},co.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class uo extends Li{constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const i=this.getDataset().data,n=this._cachedMeta;let o,s;for(o=t,s=t+e;o<s;++o)n._parsed[o]=+i[o]}_getRotation(){return $t(this.options.rotation-90)}_getCircumference(){return $t(this.options.circumference)}_getRotationExtents(){let t=vt,e=-vt;const i=this;for(let n=0;n<i.chart.data.datasets.length;++n)if(i.chart.isDatasetVisible(n)){const o=i.chart.getDatasetMeta(n).controller,s=o._getRotation(),r=o._getCircumference();t=Math.min(t,s),e=Math.max(e,s+r)}return{rotation:t,circumference:e-t}}update(t){const e=this,i=e.chart,{chartArea:n}=i,o=e._cachedMeta,s=o.data,r=e.getMaxBorderWidth()+e.getMaxOffset(s)+e.options.spacing,a=Math.max((Math.min(n.width,n.height)-r)/2,0),l=Math.min(G(e.options.cutout,a),1),c=e._getRingWeight(e.index),{circumference:d,rotation:u}=e._getRotationExtents(),{ratioX:h,ratioY:p,offsetX:f,offsetY:g}=function(t,e,i){let n=1,o=1,s=0,r=0;if(e<vt){const a=t,l=a+e,c=Math.cos(a),d=Math.sin(a),u=Math.cos(l),h=Math.sin(l),p=(t,e,n)=>Ft(t,a,l,!0)?1:Math.max(e,e*i,n,n*i),f=(t,e,n)=>Ft(t,a,l,!0)?-1:Math.min(e,e*i,n,n*i),g=p(0,c,u),m=p(kt,d,h),y=f(bt,c,u),b=f(bt+kt,d,h);n=(g-y)/2,o=(m-b)/2,s=-(g+y)/2,r=-(m+b)/2}return{ratioX:n,ratioY:o,offsetX:s,offsetY:r}}(u,d,l),m=(n.width-r)/h,y=(n.height-r)/p,b=Math.max(Math.min(m,y)/2,0),v=Q(e.options.radius,b),x=(v-Math.max(v*l,0))/e._getVisibleDatasetWeightTotal();e.offsetX=f*v,e.offsetY=g*v,o.total=e.calculateTotal(),e.outerRadius=v-x*e._getRingWeightOffset(e.index),e.innerRadius=Math.max(e.outerRadius-x*c,0),e.updateElements(s,0,s.length,t)}_circumference(t,e){const i=this.options,n=this._cachedMeta,o=this._getCircumference();return e&&i.animation.animateRotate||!this.chart.getDataVisibility(t)||null===n._parsed[t]?0:this.calculateCircumference(n._parsed[t]*o/vt)}updateElements(t,e,i,n){const o=this,s="reset"===n,r=o.chart,a=r.chartArea,l=r.options.animation,c=(a.left+a.right)/2,d=(a.top+a.bottom)/2,u=s&&l.animateScale,h=u?0:o.innerRadius,p=u?0:o.outerRadius,f=o.resolveDataElementOptions(e,n),g=o.getSharedOptions(f),m=o.includeOptions(n,g);let y,b=o._getRotation();for(y=0;y<e;++y)b+=o._circumference(y,s);for(y=e;y<e+i;++y){const e=o._circumference(y,s),i=t[y],r={x:c+o.offsetX,y:d+o.offsetY,startAngle:b,endAngle:b+e,circumference:e,outerRadius:p,innerRadius:h};m&&(r.options=g||o.resolveDataElementOptions(y,i.active?"active":n)),b+=e,o.updateElement(i,y,r,n)}o.updateSharedOptions(g,n,f)}calculateTotal(){const t=this._cachedMeta,e=t.data;let i,n=0;for(i=0;i<e.length;i++){const e=t._parsed[i];null!==e&&!isNaN(e)&&this.chart.getDataVisibility(i)&&(n+=Math.abs(e))}return n}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?vt*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,n=i.data.labels||[],o=Ii(e._parsed[t],i.options.locale);return{label:n[t]||"",value:o}}getMaxBorderWidth(t){const e=this;let i=0;const n=e.chart;let o,s,r,a,l;if(!t)for(o=0,s=n.data.datasets.length;o<s;++o)if(n.isDatasetVisible(o)){r=n.getDatasetMeta(o),t=r.data,a=r.controller,a!==e&&a.configure();break}if(!t)return 0;for(o=0,s=t.length;o<s;++o)l=a.resolveDataElementOptions(o),"inner"!==l.borderAlign&&(i=Math.max(i,l.borderWidth||0,l.hoverBorderWidth||0));return i}getMaxOffset(t){let e=0;for(let i=0,n=t.length;i<n;++i){const t=this.resolveDataElementOptions(i);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let i=0;i<t;++i)this.chart.isDatasetVisible(i)&&(e+=this._getRingWeight(i));return e}_getRingWeight(t){return Math.max(K(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}uo.id="doughnut",uo.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"},uo.descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t},uo.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i}}=t.legend.options;return e.labels.map((e,n)=>{const o=t.getDatasetMeta(0).controller.getStyle(n);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(n),index:n}})}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}},tooltip:{callbacks:{title:()=>"",label(t){let e=t.label;const i=": "+t.formattedValue;return q(e)?(e=e.slice(),e[0]+=i):e+=i,e}}}}};class ho extends Li{initialize(){this.enableOptionSharing=!0,super.initialize()}update(t){const e=this,i=e._cachedMeta,{dataset:n,data:o=[],_dataset:s}=i,r=e.chart._animationsDisabled;let{start:a,count:l}=function(t,e,i){const n=e.length;let o=0,s=n;if(t._sorted){const{iScale:r,_parsed:a}=t,l=r.axis,{min:c,max:d,minDefined:u,maxDefined:h}=r.getUserBounds();u&&(o=Wt(Math.min(se(a,r.axis,c).lo,i?n:se(e,l,r.getPixelForValue(c)).lo),0,n-1)),s=h?Wt(Math.max(se(a,r.axis,d).hi+1,i?0:se(e,l,r.getPixelForValue(d)).hi+1),o,n)-o:n-o}return{start:o,count:s}}(i,o,r);e._drawStart=a,e._drawCount=l,function(t){const{xScale:e,yScale:i,_scaleRanges:n}=t,o={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};if(!n)return t._scaleRanges=o,!0;const s=n.xmin!==e.min||n.xmax!==e.max||n.ymin!==i.min||n.ymax!==i.max;return Object.assign(n,o),s}(i)&&(a=0,l=o.length),n._decimated=!!s._decimated,n.points=o;const c=e.resolveDatasetElementOptions(t);e.options.showLine||(c.borderWidth=0),c.segment=e.options.segment,e.updateElement(n,void 0,{animated:!r,options:c},t),e.updateElements(o,a,l,t)}updateElements(t,e,i,n){const o=this,s="reset"===n,{iScale:r,vScale:a,_stacked:l}=o._cachedMeta,c=o.resolveDataElementOptions(e,n),d=o.getSharedOptions(c),u=o.includeOptions(n,d),h=r.axis,p=a.axis,f=o.options.spanGaps,g=Pt(f)?f:Number.POSITIVE_INFINITY,m=o.chart._animationsDisabled||s||"none"===n;let y=e>0&&o.getParsed(e-1);for(let c=e;c<e+i;++c){const e=t[c],i=o.getParsed(c),f=m?e:{},b=V(i[p]),v=f[h]=r.getPixelForValue(i[h],c),x=f[p]=s||b?a.getBasePixel():a.getPixelForValue(l?o.applyStack(a,i,l):i[p],c);f.skip=isNaN(v)||isNaN(x)||b,f.stop=c>0&&i[h]-y[h]>g,f.parsed=i,u&&(f.options=d||o.resolveDataElementOptions(c,e.active?"active":n)),m||o.updateElement(e,c,f,n),y=i}o.updateSharedOptions(d,n,c)}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,i=e.options&&e.options.borderWidth||0,n=t.data||[];if(!n.length)return i;const o=n[0].size(this.resolveDataElementOptions(0)),s=n[n.length-1].size(this.resolveDataElementOptions(n.length-1));return Math.max(i,o,s)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}}ho.id="line",ho.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},ho.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class po extends Li{constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,n=i.data.labels||[],o=Ii(e._parsed[t].r,i.options.locale);return{label:n[t]||"",value:o}}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}_updateRadius(){const t=this,e=t.chart,i=e.chartArea,n=e.options,o=Math.min(i.right-i.left,i.bottom-i.top),s=Math.max(o/2,0),r=(s-Math.max(n.cutoutPercentage?s/100*n.cutoutPercentage:1,0))/e.getVisibleDatasetCount();t.outerRadius=s-r*t.index,t.innerRadius=t.outerRadius-r}updateElements(t,e,i,n){const o=this,s="reset"===n,r=o.chart,a=o.getDataset(),l=r.options.animation,c=o._cachedMeta.rScale,d=c.xCenter,u=c.yCenter,h=c.getIndexAngle(0)-.5*bt;let p,f=h;const g=360/o.countVisibleElements();for(p=0;p<e;++p)f+=o._computeAngle(p,n,g);for(p=e;p<e+i;p++){const e=t[p];let i=f,m=f+o._computeAngle(p,n,g),y=r.getDataVisibility(p)?c.getDistanceFromCenterForValue(a.data[p]):0;f=m,s&&(l.animateScale&&(y=0),l.animateRotate&&(i=m=h));const b={x:d,y:u,innerRadius:0,outerRadius:y,startAngle:i,endAngle:m,options:o.resolveDataElementOptions(p,e.active?"active":n)};o.updateElement(e,p,b,n)}}countVisibleElements(){const t=this.getDataset(),e=this._cachedMeta;let i=0;return e.data.forEach((e,n)=>{!isNaN(t.data[n])&&this.chart.getDataVisibility(n)&&i++}),i}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?$t(this.resolveDataElementOptions(t,e).angle||i):0}}po.id="polarArea",po.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},po.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i}}=t.legend.options;return e.labels.map((e,n)=>{const o=t.getDatasetMeta(0).controller.getStyle(n);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(n),index:n}})}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}},tooltip:{callbacks:{title:()=>"",label:t=>t.chart.data.labels[t.dataIndex]+": "+t.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class fo extends uo{}fo.id="pie",fo.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class go extends Li{getLabelAndValue(t){const e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}update(t){const e=this,i=e._cachedMeta,n=i.dataset,o=i.data||[],s=i.iScale.getLabels();if(n.points=o,"resize"!==t){const i=e.resolveDatasetElementOptions(t);e.options.showLine||(i.borderWidth=0);const r={_loop:!0,_fullLoop:s.length===o.length,options:i};e.updateElement(n,void 0,r,t)}e.updateElements(o,0,o.length,t)}updateElements(t,e,i,n){const o=this,s=o.getDataset(),r=o._cachedMeta.rScale,a="reset"===n;for(let l=e;l<e+i;l++){const e=t[l],i=o.resolveDataElementOptions(l,e.active?"active":n),c=r.getPointPositionForValue(l,s.data[l]),d=a?r.xCenter:c.x,u=a?r.yCenter:c.y,h={x:d,y:u,angle:c.angle,skip:isNaN(d)||isNaN(u),options:i};o.updateElement(e,l,h,n)}}}go.id="radar",go.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},go.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class mo extends ho{}mo.id="scatter",mo.defaults={showLine:!1,fill:!1},mo.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:t=>"("+t.label+", "+t.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};var yo=Object.freeze({__proto__:null,BarController:lo,BubbleController:co,DoughnutController:uo,LineController:ho,PolarAreaController:po,PieController:fo,RadarController:go,ScatterController:mo});function bo(t,e,i){const{startAngle:n,pixelMargin:o,x:s,y:r,outerRadius:a,innerRadius:l}=e;let c=o/a;t.beginPath(),t.arc(s,r,a,n-c,i+c),l>o?(c=o/l,t.arc(s,r,l,i+c,n-c,!0)):t.arc(s,r,o,i+kt,n-kt),t.closePath(),t.clip()}function vo(t,e,i,n){const o=$e(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]);const s=(i-e)/2,r=Math.min(s,n*e/2),a=t=>{const e=(i-Math.min(s,t))*n/2;return Wt(t,0,Math.min(s,e))};return{outerStart:a(o.outerStart),outerEnd:a(o.outerEnd),innerStart:Wt(o.innerStart,0,r),innerEnd:Wt(o.innerEnd,0,r)}}function xo(t,e,i,n){return{x:i+t*Math.cos(e),y:n+t*Math.sin(e)}}function _o(t,e,i,n,o){const{x:s,y:r,startAngle:a,pixelMargin:l,innerRadius:c}=e,d=Math.max(e.outerRadius+n+i-l,0),u=c>0?c+n+i+l:0;let h=0;const p=o-a;if(n){const t=((c>0?c-n:0)+(d>0?d-n:0))/2;h=(p-(0!==t?p*t/(t+n):p))/2}const f=(p-Math.max(.001,p*d-i/bt)/d)/2,g=a+f+h,m=o-f-h,{outerStart:y,outerEnd:b,innerStart:v,innerEnd:x}=vo(e,u,d,m-g),_=d-y,w=d-b,k=g+y/_,S=m-b/w,T=u+v,C=u+x,M=g+v/T,D=m-x/C;if(t.beginPath(),t.arc(s,r,d,k,S),b>0){const e=xo(w,S,s,r);t.arc(e.x,e.y,b,S,m+kt)}const A=xo(C,m,s,r);if(t.lineTo(A.x,A.y),x>0){const e=xo(C,D,s,r);t.arc(e.x,e.y,x,m+kt,D+Math.PI)}if(t.arc(s,r,u,m-x/u,g+v/u,!0),v>0){const e=xo(T,M,s,r);t.arc(e.x,e.y,v,M+Math.PI,g-kt)}const P=xo(_,g,s,r);if(t.lineTo(P.x,P.y),y>0){const e=xo(_,k,s,r);t.arc(e.x,e.y,y,g-kt,k)}t.closePath()}function wo(t,e,i,n,o){const{options:s}=e,r="inner"===s.borderAlign;s.borderWidth&&(r?(t.lineWidth=2*s.borderWidth,t.lineJoin="round"):(t.lineWidth=s.borderWidth,t.lineJoin="bevel"),e.fullCircles&&function(t,e,i){const{x:n,y:o,startAngle:s,pixelMargin:r,fullCircles:a}=e,l=Math.max(e.outerRadius-r,0),c=e.innerRadius+r;let d;for(i&&bo(t,e,s+vt),t.beginPath(),t.arc(n,o,c,s+vt,s,!0),d=0;d<a;++d)t.stroke();for(t.beginPath(),t.arc(n,o,l,s,s+vt),d=0;d<a;++d)t.stroke()}(t,e,r),r&&bo(t,e,o),_o(t,e,i,n,o),t.stroke())}class ko extends $i{constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){const n=this.getProps(["x","y"],i),{angle:o,distance:s}=Nt(n,{x:t,y:e}),{startAngle:r,endAngle:a,innerRadius:l,outerRadius:c,circumference:d}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),u=this.options.spacing/2;return(d>=vt||Ft(o,r,a))&&(s>=l+u&&s<=c+u)}getCenterPoint(t){const{x:e,y:i,startAngle:n,endAngle:o,innerRadius:s,outerRadius:r}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],t),{offset:a,spacing:l}=this.options,c=(n+o)/2,d=(s+r+l+a)/2;return{x:e+Math.cos(c)*d,y:i+Math.sin(c)*d}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const e=this,{options:i,circumference:n}=e,o=(i.offset||0)/2,s=(i.spacing||0)/2;if(e.pixelMargin="inner"===i.borderAlign?.33:0,e.fullCircles=n>vt?Math.floor(n/vt):0,0===n||e.innerRadius<0||e.outerRadius<0)return;t.save();let r=0;if(o){r=o/2;const i=(e.startAngle+e.endAngle)/2;t.translate(Math.cos(i)*r,Math.sin(i)*r),e.circumference>=bt&&(r=o)}t.fillStyle=i.backgroundColor,t.strokeStyle=i.borderColor;const a=function(t,e,i,n){const{fullCircles:o,startAngle:s,circumference:r}=e;let a=e.endAngle;if(o){_o(t,e,i,n,s+vt);for(let e=0;e<o;++e)t.fill();isNaN(r)||(a=s+r%vt,r%vt==0&&(a+=vt))}return _o(t,e,i,n,a),t.fill(),a}(t,e,r,s);wo(t,e,r,s,a),t.restore()}}function So(t,e,i=e){t.lineCap=K(i.borderCapStyle,e.borderCapStyle),t.setLineDash(K(i.borderDash,e.borderDash)),t.lineDashOffset=K(i.borderDashOffset,e.borderDashOffset),t.lineJoin=K(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=K(i.borderWidth,e.borderWidth),t.strokeStyle=K(i.borderColor,e.borderColor)}function To(t,e,i){t.lineTo(i.x,i.y)}function Co(t,e,i={}){const n=t.length,{start:o=0,end:s=n-1}=i,{start:r,end:a}=e,l=Math.max(o,r),c=Math.min(s,a),d=o<r&&s<r||o>a&&s>a;return{count:n,start:l,loop:e.loop,ilen:c<l&&!d?n+c-l:c-l}}function Mo(t,e,i,n){const{points:o,options:s}=e,{count:r,start:a,loop:l,ilen:c}=Co(o,i,n),d=function(t){return t.stepped?Zt:t.tension||"monotone"===t.cubicInterpolationMode?te:To}(s);let u,h,p,{move:f=!0,reverse:g}=n||{};for(u=0;u<=c;++u)h=o[(a+(g?c-u:u))%r],h.skip||(f?(t.moveTo(h.x,h.y),f=!1):d(t,p,h,g,s.stepped),p=h);return l&&(h=o[(a+(g?c:0))%r],d(t,p,h,g,s.stepped)),!!l}function Do(t,e,i,n){const o=e.points,{count:s,start:r,ilen:a}=Co(o,i,n),{move:l=!0,reverse:c}=n||{};let d,u,h,p,f,g,m=0,y=0;const b=t=>(r+(c?a-t:t))%s,v=()=>{p!==f&&(t.lineTo(m,f),t.lineTo(m,p),t.lineTo(m,g))};for(l&&(u=o[b(0)],t.moveTo(u.x,u.y)),d=0;d<=a;++d){if(u=o[b(d)],u.skip)continue;const e=u.x,i=u.y,n=0|e;n===h?(i<p?p=i:i>f&&(f=i),m=(y*m+e)/++y):(v(),t.lineTo(e,i),h=n,y=0,p=f=i),g=i}v()}function Ao(t){const e=t.options,i=e.borderDash&&e.borderDash.length;return!(t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i)?Do:Mo}ko.id="arc",ko.defaults={borderAlign:"center",borderColor:"#fff",borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0},ko.defaultRoutes={backgroundColor:"backgroundColor"};const Po="function"==typeof Path2D;function Oo(t,e,i,n){Po&&1===e.segments.length?function(t,e,i,n){let o=e._path;o||(o=e._path=new Path2D,e.path(o,i,n)&&o.closePath()),So(t,e.options),t.stroke(o)}(t,e,i,n):function(t,e,i,n){const{segments:o,options:s}=e,r=Ao(e);for(const a of o)So(t,s,a.style),t.beginPath(),r(t,e,a,{start:i,end:i+n-1})&&t.closePath(),t.stroke()}(t,e,i,n)}class Eo extends $i{constructor(t){super(),this.animated=!0,this.options=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,t&&Object.assign(this,t)}updateControlPoints(t,e){const i=this,n=i.options;if((n.tension||"monotone"===n.cubicInterpolationMode)&&!n.stepped&&!i._pointsUpdated){const o=n.spanGaps?i._loop:i._fullLoop;fn(i._points,n,t,o,e),i._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=Tn(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(t,e){const i=this.options,n=t[e],o=this.points,s=Sn(this,{property:e,start:n,end:n});if(!s.length)return;const r=[],a=function(t){return t.stepped?mn:t.tension||"monotone"===t.cubicInterpolationMode?yn:gn}(i);let l,c;for(l=0,c=s.length;l<c;++l){const{start:c,end:d}=s[l],u=o[c],h=o[d];if(u===h){r.push(u);continue}const p=a(u,h,Math.abs((n-u[e])/(h[e]-u[e])),i.stepped);p[e]=t[e],r.push(p)}return 1===r.length?r[0]:r}pathSegment(t,e,i){return Ao(this)(t,this,e,i)}path(t,e,i){const n=this,o=n.segments,s=Ao(n);let r=n._loop;e=e||0,i=i||n.points.length-e;for(const a of o)r&=s(t,n,a,{start:e,end:e+i-1});return!!r}draw(t,e,i,n){const o=this,s=o.options||{};(o.points||[]).length&&s.borderWidth&&(t.save(),Oo(t,o,i,n),t.restore(),o.animated&&(o._pointsUpdated=!1,o._path=void 0))}}function Lo(t,e,i,n){const o=t.options,{[i]:s}=t.getProps([i],n);return Math.abs(e-s)<o.radius+o.hitRadius}Eo.id="line",Eo.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},Eo.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},Eo.descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};class $o extends $i{constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){const n=this.options,{x:o,y:s}=this.getProps(["x","y"],i);return Math.pow(t-o,2)+Math.pow(e-s,2)<Math.pow(n.hitRadius+n.radius,2)}inXRange(t,e){return Lo(this,t,"x",e)}inYRange(t,e){return Lo(this,t,"y",e)}getCenterPoint(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}size(t){let e=(t=t||this.options||{}).radius||0;e=Math.max(e,e&&t.hoverRadius||0);return 2*(e+(e&&t.borderWidth||0))}draw(t){const e=this.options;this.skip||e.radius<.1||(t.strokeStyle=e.borderColor,t.lineWidth=e.borderWidth,t.fillStyle=e.backgroundColor,Kt(t,e,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}function Ro(t,e){const{x:i,y:n,base:o,width:s,height:r}=t.getProps(["x","y","base","width","height"],e);let a,l,c,d,u;return t.horizontal?(u=r/2,a=Math.min(i,o),l=Math.max(i,o),c=n-u,d=n+u):(u=s/2,a=i-u,l=i+u,c=Math.min(n,o),d=Math.max(n,o)),{left:a,top:c,right:l,bottom:d}}function Io(t){let e=t.options.borderSkipped;const i={};return e?(e=t.horizontal?No(e,"left","right",t.base>t.x):No(e,"bottom","top",t.base<t.y),i[e]=!0,i):i}function No(t,e,i,n){var o,s,r;return n?(r=i,t=jo(t=(o=t)===(s=e)?r:o===r?s:o,i,e)):t=jo(t,e,i),t}function jo(t,e,i){return"start"===t?e:"end"===t?i:t}function zo(t,e,i,n){return t?0:Math.max(Math.min(e,n),i)}function Ho(t){const e=Ro(t),i=e.right-e.left,n=e.bottom-e.top,o=function(t,e,i){const n=t.options.borderWidth,o=Io(t),s=Re(n);return{t:zo(o.top,s.top,0,i),r:zo(o.right,s.right,0,e),b:zo(o.bottom,s.bottom,0,i),l:zo(o.left,s.left,0,e)}}(t,i/2,n/2),s=function(t,e,i){const{enableBorderRadius:n}=t.getProps(["enableBorderRadius"]),o=t.options.borderRadius,s=Ie(o),r=Math.min(e,i),a=Io(t),l=n||Y(o);return{topLeft:zo(!l||a.top||a.left,s.topLeft,0,r),topRight:zo(!l||a.top||a.right,s.topRight,0,r),bottomLeft:zo(!l||a.bottom||a.left,s.bottomLeft,0,r),bottomRight:zo(!l||a.bottom||a.right,s.bottomRight,0,r)}}(t,i/2,n/2);return{outer:{x:e.left,y:e.top,w:i,h:n,radius:s},inner:{x:e.left+o.l,y:e.top+o.t,w:i-o.l-o.r,h:n-o.t-o.b,radius:{topLeft:Math.max(0,s.topLeft-Math.max(o.t,o.l)),topRight:Math.max(0,s.topRight-Math.max(o.t,o.r)),bottomLeft:Math.max(0,s.bottomLeft-Math.max(o.b,o.l)),bottomRight:Math.max(0,s.bottomRight-Math.max(o.b,o.r))}}}}function Fo(t,e,i,n){const o=null===e,s=null===i,r=t&&!(o&&s)&&Ro(t,n);return r&&(o||e>=r.left&&e<=r.right)&&(s||i>=r.top&&i<=r.bottom)}function Wo(t,e){t.rect(e.x,e.y,e.w,e.h)}$o.id="point",$o.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},$o.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class Bo extends $i{constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,t&&Object.assign(this,t)}draw(t){const e=this.options,{inner:i,outer:n}=Ho(this),o=(s=n.radius).topLeft||s.topRight||s.bottomLeft||s.bottomRight?ne:Wo;var s;t.save(),n.w===i.w&&n.h===i.h||(t.beginPath(),o(t,n),t.clip(),o(t,i),t.fillStyle=e.borderColor,t.fill("evenodd")),t.beginPath(),o(t,i),t.fillStyle=e.backgroundColor,t.fill(),t.restore()}inRange(t,e,i){return Fo(this,t,e,i)}inXRange(t,e){return Fo(this,t,null,e)}inYRange(t,e){return Fo(this,null,t,e)}getCenterPoint(t){const{x:e,y:i,base:n,horizontal:o}=this.getProps(["x","y","base","horizontal"],t);return{x:o?(e+n)/2:e,y:o?i:(i+n)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}Bo.id="bar",Bo.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,enableBorderRadius:!0,pointStyle:void 0},Bo.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};var Vo=Object.freeze({__proto__:null,ArcElement:ko,LineElement:Eo,PointElement:$o,BarElement:Bo});function qo(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{value:e})}}function Yo(t){t.data.datasets.forEach(t=>{qo(t)})}var Uo={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,i)=>{if(!i.enabled)return void Yo(t);const n=t.width;t.data.datasets.forEach((e,o)=>{const{_data:s,indexAxis:r}=e,a=t.getDatasetMeta(o),l=s||e.data;if("y"===ze([r,t.options.indexAxis]))return;if("line"!==a.type)return;const c=t.scales[a.xAxisID];if("linear"!==c.type&&"time"!==c.type)return;if(t.options.parsing)return;let d,{start:u,count:h}=function(t,e){const i=e.length;let n,o=0;const{iScale:s}=t,{min:r,max:a,minDefined:l,maxDefined:c}=s.getUserBounds();return l&&(o=Wt(se(e,s.axis,r).lo,0,i-1)),n=c?Wt(se(e,s.axis,a).hi+1,o,i)-o:i-o,{start:o,count:n}}(a,l);if(h<=4*n)qo(e);else{switch(V(s)&&(e._data=l,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),i.algorithm){case"lttb":d=function(t,e,i,n,o){const s=o.samples||n;if(s>=i)return t.slice(e,e+i);const r=[],a=(i-2)/(s-2);let l=0;const c=e+i-1;let d,u,h,p,f,g=e;for(r[l++]=t[g],d=0;d<s-2;d++){let n,o=0,s=0;const c=Math.floor((d+1)*a)+1+e,m=Math.min(Math.floor((d+2)*a)+1,i)+e,y=m-c;for(n=c;n<m;n++)o+=t[n].x,s+=t[n].y;o/=y,s/=y;const b=Math.floor(d*a)+1+e,v=Math.floor((d+1)*a)+1+e,{x:x,y:_}=t[g];for(h=p=-1,n=b;n<v;n++)p=.5*Math.abs((x-o)*(t[n].y-_)-(x-t[n].x)*(s-_)),p>h&&(h=p,u=t[n],f=n);r[l++]=u,g=f}return r[l++]=t[c],r}(l,u,h,n,i);break;case"min-max":d=function(t,e,i,n){let o,s,r,a,l,c,d,u,h,p,f=0,g=0;const m=[],y=e+i-1,b=t[e].x,v=t[y].x-b;for(o=e;o<e+i;++o){s=t[o],r=(s.x-b)/v*n,a=s.y;const e=0|r;if(e===l)a<h?(h=a,c=o):a>p&&(p=a,d=o),f=(g*f+s.x)/++g;else{const i=o-1;if(!V(c)&&!V(d)){const e=Math.min(c,d),n=Math.max(c,d);e!==u&&e!==i&&m.push({...t[e],x:f}),n!==u&&n!==i&&m.push({...t[n],x:f})}o>0&&i!==u&&m.push(t[i]),m.push(s),l=e,g=0,h=p=a,c=d=u=o}}return m}(l,u,h,n);break;default:throw new Error(`Unsupported decimation algorithm '${i.algorithm}'`)}e._decimated=d}})},destroy(t){Yo(t)}};function Xo(t,e,i){const n=function(t){const e=t.options,i=e.fill;let n=K(i&&i.target,i);return void 0===n&&(n=!!e.backgroundColor),!1!==n&&null!==n&&(!0===n?"origin":n)}(t);if(Y(n))return!isNaN(n.value)&&n;let o=parseFloat(n);return U(o)&&Math.floor(o)===o?("-"!==n[0]&&"+"!==n[0]||(o=e+o),!(o===e||o<0||o>=i)&&o):["origin","start","end","stack"].indexOf(n)>=0&&n}class Ko{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,i){const{x:n,y:o,radius:s}=this;return e=e||{start:0,end:vt},t.arc(n,o,s,e.end,e.start,!0),!i.bounds}interpolate(t){const{x:e,y:i,radius:n}=this,o=t.angle;return{x:e+Math.cos(o)*n,y:i+Math.sin(o)*n,angle:o}}}function Go(t){return(t.scale||{}).getPointPositionForValue?function(t){const{scale:e,fill:i}=t,n=e.options,o=e.getLabels().length,s=[],r=n.reverse?e.max:e.min,a=n.reverse?e.min:e.max;let l,c,d;if(d="start"===i?r:"end"===i?a:Y(i)?i.value:e.getBaseValue(),n.grid.circular)return c=e.getPointPositionForValue(0,r),new Ko({x:c.x,y:c.y,radius:e.getDistanceFromCenterForValue(d)});for(l=0;l<o;++l)s.push(e.getPointPositionForValue(l,d));return s}(t):function(t){const{scale:e={},fill:i}=t;let n,o=null;return"start"===i?o=e.bottom:"end"===i?o=e.top:Y(i)?o=e.getPixelForValue(i.value):e.getBasePixel&&(o=e.getBasePixel()),U(o)?(n=e.isHorizontal(),{x:n?o:null,y:n?null:o}):null}(t)}function Qo(t,e,i){for(;e>t;e--){const t=i[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function Jo(t){const{chart:e,scale:i,index:n,line:o}=t,s=[],r=o.segments,a=o.points,l=function(t,e){const i=[],n=t.getSortedVisibleDatasetMetas();for(let t=0;t<n.length;t++){const o=n[t];if(o.index===e)break;Zo(o)&&i.unshift(o.dataset)}return i}(e,n);l.push(is({x:null,y:i.bottom},o));for(let t=0;t<r.length;t++){const e=r[t];for(let t=e.start;t<=e.end;t++)ts(s,a[t],l)}return new Eo({points:s,options:{}})}const Zo=t=>"line"===t.type&&!t.hidden;function ts(t,e,i){const n=[];for(let o=0;o<i.length;o++){const s=i[o],{first:r,last:a,point:l}=es(s,e,"x");if(!(!l||r&&a))if(r)n.unshift(l);else if(t.push(l),!a)break}t.push(...n)}function es(t,e,i){const n=t.interpolate(e,i);if(!n)return{};const o=n[i],s=t.segments,r=t.points;let a=!1,l=!1;for(let t=0;t<s.length;t++){const e=s[t],n=r[e.start][i],c=r[e.end][i];if(o>=n&&o<=c){a=o===n,l=o===c;break}}return{first:a,last:l,point:n}}function is(t,e){let i=[],n=!1;return q(t)?(n=!0,i=t):i=function(t,e){const{x:i=null,y:n=null}=t||{},o=e.points,s=[];return e.segments.forEach(({start:t,end:e})=>{e=Qo(t,e,o);const r=o[t],a=o[e];null!==n?(s.push({x:r.x,y:n}),s.push({x:a.x,y:n})):null!==i&&(s.push({x:i,y:r.y}),s.push({x:i,y:a.y}))}),s}(t,e),i.length?new Eo({points:i,options:{tension:0},_loop:n,_fullLoop:n}):null}function ns(t,e,i){let n=t[e].fill;const o=[e];let s;if(!i)return n;for(;!1!==n&&-1===o.indexOf(n);){if(!U(n))return n;if(s=t[n],!s)return!1;if(s.visible)return n;o.push(n),n=s.fill}return!1}function os(t,e,i){t.beginPath(),e.path(t),t.lineTo(e.last().x,i),t.lineTo(e.first().x,i),t.closePath(),t.clip()}function ss(t,e,i,n){if(n)return;let o=e[t],s=i[t];return"angle"===t&&(o=Ht(o),s=Ht(s)),{property:t,start:o,end:s}}function rs(t,e,i,n){return t&&e?n(t[i],e[i]):t?t[i]:e?e[i]:0}function as(t,e,i){const{top:n,bottom:o}=e.chart.chartArea,{property:s,start:r,end:a}=i||{};"x"===s&&(t.beginPath(),t.rect(r,n,a-r,o-n),t.clip())}function ls(t,e,i,n){const o=e.interpolate(i,n);o&&t.lineTo(o.x,o.y)}function cs(t,e){const{line:i,target:n,property:o,color:s,scale:r}=e,a=function(t,e,i){const n=t.segments,o=t.points,s=e.points,r=[];for(const t of n){let{start:n,end:a}=t;a=Qo(n,a,o);const l=ss(i,o[n],o[a],t.loop);if(!e.segments){r.push({source:t,target:l,start:o[n],end:o[a]});continue}const c=Sn(e,l);for(const e of c){const n=ss(i,s[e.start],s[e.end],e.loop),a=kn(t,o,n);for(const t of a)r.push({source:t,target:e,start:{[i]:rs(l,n,"start",Math.max)},end:{[i]:rs(l,n,"end",Math.min)}})}}return r}(i,n,o);for(const{source:e,target:l,start:c,end:d}of a){const{style:{backgroundColor:a=s}={}}=e;t.save(),t.fillStyle=a,as(t,r,ss(o,c,d)),t.beginPath();const u=!!i.pathSegment(t,e);u?t.closePath():ls(t,n,d,o);const h=!!n.pathSegment(t,l,{move:u,reverse:!0}),p=u&&h;p||ls(t,n,c,o),t.closePath(),t.fill(p?"evenodd":"nonzero"),t.restore()}}function ds(t,e,i){const n=function(t){const{chart:e,fill:i,line:n}=t;if(U(i))return function(t,e){const i=t.getDatasetMeta(e);return i&&t.isDatasetVisible(e)?i.dataset:null}(e,i);if("stack"===i)return Jo(t);const o=Go(t);return o instanceof Ko?o:is(o,n)}(e),{line:o,scale:s,axis:r}=e,a=o.options,l=a.fill,c=a.backgroundColor,{above:d=c,below:u=c}=l||{};n&&o.points.length&&(Qt(t,i),function(t,e){const{line:i,target:n,above:o,below:s,area:r,scale:a}=e,l=i._loop?"angle":e.axis;t.save(),"x"===l&&s!==o&&(os(t,n,r.top),cs(t,{line:i,target:n,color:o,scale:a,property:l}),t.restore(),t.save(),os(t,n,r.bottom)),cs(t,{line:i,target:n,color:s,scale:a,property:l}),t.restore()}(t,{line:o,target:n,above:d,below:u,area:i,scale:s,axis:r}),Jt(t))}var us={id:"filler",afterDatasetsUpdate(t,e,i){const n=(t.data.datasets||[]).length,o=[];let s,r,a,l;for(r=0;r<n;++r)s=t.getDatasetMeta(r),a=s.dataset,l=null,a&&a.options&&a instanceof Eo&&(l={visible:t.isDatasetVisible(r),index:r,fill:Xo(a,r,n),chart:t,axis:s.controller.options.indexAxis,scale:s.vScale,line:a}),s.$filler=l,o.push(l);for(r=0;r<n;++r)l=o[r],l&&!1!==l.fill&&(l.fill=ns(o,r,i.propagate))},beforeDraw(t,e,i){const n="beforeDraw"===i.drawTime,o=t.getSortedVisibleDatasetMetas(),s=t.chartArea;for(let e=o.length-1;e>=0;--e){const i=o[e].$filler;i&&(i.line.updateControlPoints(s,i.axis),n&&ds(t.ctx,i,s))}},beforeDatasetsDraw(t,e,i){if("beforeDatasetsDraw"!==i.drawTime)return;const n=t.getSortedVisibleDatasetMetas();for(let e=n.length-1;e>=0;--e){const i=n[e].$filler;i&&ds(t.ctx,i,t.chartArea)}},beforeDatasetDraw(t,e,i){const n=e.meta.$filler;n&&!1!==n.fill&&"beforeDatasetDraw"===i.drawTime&&ds(t.ctx,n,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const hs=(t,e)=>{let{boxHeight:i=e,boxWidth:n=e}=t;return t.usePointStyle&&(i=Math.min(i,e),n=Math.min(n,e)),{boxWidth:n,boxHeight:i,itemHeight:Math.max(e,i)}};class ps extends $i{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,i){const n=this;n.maxWidth=t,n.maxHeight=e,n._margins=i,n.setDimensions(),n.buildLabels(),n.fit()}setDimensions(){const t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=t._margins.left,t.right=t.width):(t.height=t.maxHeight,t.top=t._margins.top,t.bottom=t.height)}buildLabels(){const t=this,e=t.options.labels||{};let i=J(e.generateLabels,[t.chart],t)||[];e.filter&&(i=i.filter(i=>e.filter(i,t.chart.data))),e.sort&&(i=i.sort((i,n)=>e.sort(i,n,t.chart.data))),t.options.reverse&&i.reverse(),t.legendItems=i}fit(){const t=this,{options:e,ctx:i}=t;if(!e.display)return void(t.width=t.height=0);const n=e.labels,o=je(n.font),s=o.size,r=t._computeTitleHeight(),{boxWidth:a,itemHeight:l}=hs(n,s);let c,d;i.font=o.string,t.isHorizontal()?(c=t.maxWidth,d=t._fitRows(r,s,a,l)+10):(d=t.maxHeight,c=t._fitCols(r,s,a,l)+10),t.width=Math.min(c,e.maxWidth||t.maxWidth),t.height=Math.min(d,e.maxHeight||t.maxHeight)}_fitRows(t,e,i,n){const{ctx:o,maxWidth:s,options:{labels:{padding:r}}}=this,a=this.legendHitBoxes=[],l=this.lineWidths=[0],c=n+r;let d=t;o.textAlign="left",o.textBaseline="middle";let u=-1,h=-c;return this.legendItems.forEach((t,p)=>{const f=i+e/2+o.measureText(t.text).width;(0===p||l[l.length-1]+f+2*r>s)&&(d+=c,l[l.length-(p>0?0:1)]=0,h+=c,u++),a[p]={left:0,top:h,row:u,width:f,height:n},l[l.length-1]+=f+r}),d}_fitCols(t,e,i,n){const{ctx:o,maxHeight:s,options:{labels:{padding:r}}}=this,a=this.legendHitBoxes=[],l=this.columnSizes=[],c=s-t;let d=r,u=0,h=0,p=0,f=0;return this.legendItems.forEach((t,s)=>{const g=i+e/2+o.measureText(t.text).width;s>0&&h+n+2*r>c&&(d+=u+r,l.push({width:u,height:h}),p+=u+r,f++,u=h=0),a[s]={left:p,top:h,col:f,width:g,height:n},u=Math.max(u,g),h+=n+r}),d+=u,l.push({width:u,height:h}),d}adjustHitBoxes(){const t=this;if(!t.options.display)return;const e=t._computeTitleHeight(),{legendHitBoxes:i,options:{align:n,labels:{padding:s},rtl:r}}=t;if(this.isHorizontal()){let a=0,l=o(n,t.left+s,t.right-t.lineWidths[a]);for(const r of i)a!==r.row&&(a=r.row,l=o(n,t.left+s,t.right-t.lineWidths[a])),r.top+=t.top+e+s,r.left=l,l+=r.width+s;if(r){const e=i.reduce((t,e)=>(t[e.row]=t[e.row]||[],t[e.row].push(e),t),{}),n=[];Object.keys(e).forEach(t=>{e[t].reverse(),n.push(...e[t])}),t.legendHitBoxes=n}}else{let r=0,a=o(n,t.top+e+s,t.bottom-t.columnSizes[r].height);for(const l of i)l.col!==r&&(r=l.col,a=o(n,t.top+e+s,t.bottom-t.columnSizes[r].height)),l.top=a,l.left+=t.left+s,a+=l.height+s}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){const t=this;if(t.options.display){const e=t.ctx;Qt(e,t),t._draw(),Jt(e)}}_draw(){const t=this,{options:e,columnSizes:i,lineWidths:n,ctx:r}=t,{align:a,labels:l}=e,c=yt.color,d=bn(e.rtl,t.left,t.width),u=je(l.font),{color:h,padding:p}=l,f=u.size,g=f/2;let m;t.drawTitle(),r.textAlign=d.textAlign("left"),r.textBaseline="middle",r.lineWidth=.5,r.font=u.string;const{boxWidth:y,boxHeight:b,itemHeight:v}=hs(l,f),x=t.isHorizontal(),_=this._computeTitleHeight();m=x?{x:o(a,t.left+p,t.right-n[0]),y:t.top+p+_,line:0}:{x:t.left+p,y:o(a,t.top+_+p,t.bottom-i[0].height),line:0},vn(t.ctx,e.textDirection);const w=v+p;t.legendItems.forEach((k,S)=>{r.strokeStyle=k.fontColor||h,r.fillStyle=k.fontColor||h;const T=r.measureText(k.text).width,C=d.textAlign(k.textAlign||(k.textAlign=l.textAlign)),M=y+g+T;let D=m.x,A=m.y;d.setWidth(t.width),x?S>0&&D+M+p>t.right&&(A=m.y+=w,m.line++,D=m.x=o(a,t.left+p,t.right-n[m.line])):S>0&&A+w>t.bottom&&(D=m.x=D+i[m.line].width+p,m.line++,A=m.y=o(a,t.top+_+p,t.bottom-i[m.line].height));!function(t,e,i){if(isNaN(y)||y<=0||isNaN(b)||b<0)return;r.save();const n=K(i.lineWidth,1);if(r.fillStyle=K(i.fillStyle,c),r.lineCap=K(i.lineCap,"butt"),r.lineDashOffset=K(i.lineDashOffset,0),r.lineJoin=K(i.lineJoin,"miter"),r.lineWidth=n,r.strokeStyle=K(i.strokeStyle,c),r.setLineDash(K(i.lineDash,[])),l.usePointStyle){const o={radius:y*Math.SQRT2/2,pointStyle:i.pointStyle,rotation:i.rotation,borderWidth:n},s=d.xPlus(t,y/2);Kt(r,o,s,e+g)}else{const o=e+Math.max((f-b)/2,0),s=d.leftForLtr(t,y),a=Ie(i.borderRadius);r.beginPath(),Object.values(a).some(t=>0!==t)?ne(r,{x:s,y:o,w:y,h:b,radius:a}):r.rect(s,o,y,b),r.fill(),0!==n&&r.stroke()}r.restore()}(d.x(D),A,k),D=s(C,D+y+g,x?D+M:t.right,e.rtl),function(t,e,i){ee(r,i.text,t,e+v/2,u,{strikethrough:i.hidden,textAlign:d.textAlign(i.textAlign)})}(d.x(D),A,k),x?m.x+=M+p:m.y+=w}),xn(t.ctx,e.textDirection)}drawTitle(){const t=this,e=t.options,i=e.title,s=je(i.font),r=Ne(i.padding);if(!i.display)return;const a=bn(e.rtl,t.left,t.width),l=t.ctx,c=i.position,d=s.size/2,u=r.top+d;let h,p=t.left,f=t.width;if(this.isHorizontal())f=Math.max(...t.lineWidths),h=t.top+u,p=o(e.align,p,t.right-f);else{const i=t.columnSizes.reduce((t,e)=>Math.max(t,e.height),0);h=u+o(e.align,t.top,t.bottom-i-e.labels.padding-t._computeTitleHeight())}const g=o(c,p,p+f);l.textAlign=a.textAlign(n(c)),l.textBaseline="middle",l.strokeStyle=i.color,l.fillStyle=i.color,l.font=s.string,ee(l,i.text,g,h,s)}_computeTitleHeight(){const t=this.options.title,e=je(t.font),i=Ne(t.padding);return t.display?e.lineHeight+i.height:0}_getLegendItemAt(t,e){const i=this;let n,o,s;if(t>=i.left&&t<=i.right&&e>=i.top&&e<=i.bottom)for(s=i.legendHitBoxes,n=0;n<s.length;++n)if(o=s[n],t>=o.left&&t<=o.left+o.width&&e>=o.top&&e<=o.top+o.height)return i.legendItems[n];return null}handleEvent(t){const e=this,i=e.options;if(!function(t,e){if("mousemove"===t&&(e.onHover||e.onLeave))return!0;if(e.onClick&&("click"===t||"mouseup"===t))return!0;return!1}(t.type,i))return;const n=e._getLegendItemAt(t.x,t.y);if("mousemove"===t.type){const r=e._hoveredItem,a=(s=n,null!==(o=r)&&null!==s&&o.datasetIndex===s.datasetIndex&&o.index===s.index);r&&!a&&J(i.onLeave,[t,r,e],e),e._hoveredItem=n,n&&!a&&J(i.onHover,[t,n,e],e)}else n&&J(i.onClick,[t,n,e],e);var o,s}}var fs={id:"legend",_element:ps,start(t,e,i){const n=t.legend=new ps({ctx:t.ctx,options:i,chart:t});Qe.configure(t,n,i),Qe.addBox(t,n)},stop(t){Qe.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,i){const n=t.legend;Qe.configure(t,n,i),n.options=i},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,i){const n=e.datasetIndex,o=i.chart;o.isDatasetVisible(n)?(o.hide(n),e.hidden=!0):(o.show(n),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:i,pointStyle:n,textAlign:o,color:s}}=t.legend.options;return t._getSortedDatasetMetas().map(t=>{const r=t.controller.getStyle(i?0:void 0),a=Ne(r.borderWidth);return{text:e[t.index].label,fillStyle:r.backgroundColor,fontColor:s,hidden:!t.visible,lineCap:r.borderCapStyle,lineDash:r.borderDash,lineDashOffset:r.borderDashOffset,lineJoin:r.borderJoinStyle,lineWidth:(a.width+a.height)/4,strokeStyle:r.borderColor,pointStyle:n||r.pointStyle,rotation:r.rotation,textAlign:o||r.textAlign,borderRadius:0,datasetIndex:t.index}},this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class gs extends $i{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const i=this,n=i.options;if(i.left=0,i.top=0,!n.display)return void(i.width=i.height=i.right=i.bottom=0);i.width=i.right=t,i.height=i.bottom=e;const o=q(n.text)?n.text.length:1;i._padding=Ne(n.padding);const s=o*je(n.font).lineHeight+i._padding.height;i.isHorizontal()?i.height=s:i.width=s}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:i,bottom:n,right:s,options:r}=this,a=r.align;let l,c,d,u=0;return this.isHorizontal()?(c=o(a,i,s),d=e+t,l=s-i):("left"===r.position?(c=i+t,d=o(a,n,e),u=-.5*bt):(c=s-t,d=o(a,e,n),u=.5*bt),l=n-e),{titleX:c,titleY:d,maxWidth:l,rotation:u}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const i=je(e.font),o=i.lineHeight/2+this._padding.top,{titleX:s,titleY:r,maxWidth:a,rotation:l}=this._drawArgs(o);ee(t,e.text,0,0,i,{color:e.color,maxWidth:a,rotation:l,textAlign:n(e.align),textBaseline:"middle",translation:[s,r]})}}var ms={id:"title",_element:gs,start(t,e,i){!function(t,e){const i=new gs({ctx:t.ctx,options:e,chart:t});Qe.configure(t,i,e),Qe.addBox(t,i),t.titleBlock=i}(t,i)},stop(t){const e=t.titleBlock;Qe.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,i){const n=t.titleBlock;Qe.configure(t,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const ys=new WeakMap;var bs={id:"subtitle",start(t,e,i){const n=new gs({ctx:t.ctx,options:i,chart:t});Qe.configure(t,n,i),Qe.addBox(t,n),ys.set(t,n)},stop(t){Qe.removeBox(t,ys.get(t)),ys.delete(t)},beforeUpdate(t,e,i){const n=ys.get(t);Qe.configure(t,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const vs={average(t){if(!t.length)return!1;let e,i,n=0,o=0,s=0;for(e=0,i=t.length;e<i;++e){const i=t[e].element;if(i&&i.hasValue()){const t=i.tooltipPosition();n+=t.x,o+=t.y,++s}}return{x:n/s,y:o/s}},nearest(t,e){if(!t.length)return!1;let i,n,o,s=e.x,r=e.y,a=Number.POSITIVE_INFINITY;for(i=0,n=t.length;i<n;++i){const n=t[i].element;if(n&&n.hasValue()){const t=jt(e,n.getCenterPoint());t<a&&(a=t,o=n)}}if(o){const t=o.tooltipPosition();s=t.x,r=t.y}return{x:s,y:r}}};function xs(t,e){return e&&(q(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function _s(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function ws(t,e){const{element:i,datasetIndex:n,index:o}=e,s=t.getDatasetMeta(n).controller,{label:r,value:a}=s.getLabelAndValue(o);return{chart:t,label:r,parsed:s.getParsed(o),raw:t.data.datasets[n].data[o],formattedValue:a,dataset:s.getDataset(),dataIndex:o,datasetIndex:n,element:i}}function ks(t,e){const i=t._chart.ctx,{body:n,footer:o,title:s}=t,{boxWidth:r,boxHeight:a}=e,l=je(e.bodyFont),c=je(e.titleFont),d=je(e.footerFont),u=s.length,h=o.length,p=n.length,f=Ne(e.padding);let g=f.height,m=0,y=n.reduce((t,e)=>t+e.before.length+e.lines.length+e.after.length,0);if(y+=t.beforeBody.length+t.afterBody.length,u&&(g+=u*c.lineHeight+(u-1)*e.titleSpacing+e.titleMarginBottom),y){g+=p*(e.displayColors?Math.max(a,l.lineHeight):l.lineHeight)+(y-p)*l.lineHeight+(y-1)*e.bodySpacing}h&&(g+=e.footerMarginTop+h*d.lineHeight+(h-1)*e.footerSpacing);let b=0;const v=function(t){m=Math.max(m,i.measureText(t).width+b)};return i.save(),i.font=c.string,Z(t.title,v),i.font=l.string,Z(t.beforeBody.concat(t.afterBody),v),b=e.displayColors?r+2:0,Z(n,t=>{Z(t.before,v),Z(t.lines,v),Z(t.after,v)}),b=0,i.font=d.string,Z(t.footer,v),i.restore(),m+=f.width,{width:m,height:g}}function Ss(t,e,i,n){const{x:o,width:s}=i,{width:r,chartArea:{left:a,right:l}}=t;let c="center";return"center"===n?c=o<=(a+l)/2?"left":"right":o<=s/2?c="left":o>=r-s/2&&(c="right"),function(t,e,i,n){const{x:o,width:s}=n,r=i.caretSize+i.caretPadding;return"left"===t&&o+s+r>e.width||("right"===t&&o-s-r<0||void 0)}(c,t,e,i)&&(c="center"),c}function Ts(t,e,i){const n=e.yAlign||function(t,e){const{y:i,height:n}=e;return i<n/2?"top":i>t.height-n/2?"bottom":"center"}(t,i);return{xAlign:e.xAlign||Ss(t,e,i,n),yAlign:n}}function Cs(t,e,i,n){const{caretSize:o,caretPadding:s,cornerRadius:r}=t,{xAlign:a,yAlign:l}=i,c=o+s,d=r+s;let u=function(t,e){let{x:i,width:n}=t;return"right"===e?i-=n:"center"===e&&(i-=n/2),i}(e,a);const h=function(t,e,i){let{y:n,height:o}=t;return"top"===e?n+=i:n-="bottom"===e?o+i:o/2,n}(e,l,c);return"center"===l?"left"===a?u+=c:"right"===a&&(u-=c):"left"===a?u-=d:"right"===a&&(u+=d),{x:Wt(u,0,n.width-e.width),y:Wt(h,0,n.height-e.height)}}function Ms(t,e,i){const n=Ne(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-n.right:t.x+n.left}function Ds(t){return xs([],_s(t))}function As(t,e){const i=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return i?t.override(i):t}class Ps extends $i{constructor(t){super(),this.opacity=0,this._active=[],this._chart=t._chart,this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this,e=t._cachedAnimations;if(e)return e;const i=t._chart,n=t.options.setContext(t.getContext()),o=n.enabled&&i.options.animation&&n.animations,s=new _i(t._chart,o);return o._cacheable&&(t._cachedAnimations=Object.freeze(s)),s}getContext(){const t=this;return t.$context||(t.$context=(e=t._chart.getContext(),i=t,n=t._tooltipItems,Object.assign(Object.create(e),{tooltip:i,tooltipItems:n,type:"tooltip"})));var e,i,n}getTitle(t,e){const{callbacks:i}=e,n=i.beforeTitle.apply(this,[t]),o=i.title.apply(this,[t]),s=i.afterTitle.apply(this,[t]);let r=[];return r=xs(r,_s(n)),r=xs(r,_s(o)),r=xs(r,_s(s)),r}getBeforeBody(t,e){return Ds(e.callbacks.beforeBody.apply(this,[t]))}getBody(t,e){const i=this,{callbacks:n}=e,o=[];return Z(t,t=>{const e={before:[],lines:[],after:[]},s=As(n,t);xs(e.before,_s(s.beforeLabel.call(i,t))),xs(e.lines,s.label.call(i,t)),xs(e.after,_s(s.afterLabel.call(i,t))),o.push(e)}),o}getAfterBody(t,e){return Ds(e.callbacks.afterBody.apply(this,[t]))}getFooter(t,e){const{callbacks:i}=e,n=i.beforeFooter.apply(this,[t]),o=i.footer.apply(this,[t]),s=i.afterFooter.apply(this,[t]);let r=[];return r=xs(r,_s(n)),r=xs(r,_s(o)),r=xs(r,_s(s)),r}_createItems(t){const e=this,i=e._active,n=e._chart.data,o=[],s=[],r=[];let a,l,c=[];for(a=0,l=i.length;a<l;++a)c.push(ws(e._chart,i[a]));return t.filter&&(c=c.filter((e,i,o)=>t.filter(e,i,o,n))),t.itemSort&&(c=c.sort((e,i)=>t.itemSort(e,i,n))),Z(c,i=>{const n=As(t.callbacks,i);o.push(n.labelColor.call(e,i)),s.push(n.labelPointStyle.call(e,i)),r.push(n.labelTextColor.call(e,i))}),e.labelColors=o,e.labelPointStyles=s,e.labelTextColors=r,e.dataPoints=c,c}update(t,e){const i=this,n=i.options.setContext(i.getContext()),o=i._active;let s,r=[];if(o.length){const t=vs[n.position].call(i,o,i._eventPosition);r=i._createItems(n),i.title=i.getTitle(r,n),i.beforeBody=i.getBeforeBody(r,n),i.body=i.getBody(r,n),i.afterBody=i.getAfterBody(r,n),i.footer=i.getFooter(r,n);const e=i._size=ks(i,n),a=Object.assign({},t,e),l=Ts(i._chart,n,a),c=Cs(n,a,l,i._chart);i.xAlign=l.xAlign,i.yAlign=l.yAlign,s={opacity:1,x:c.x,y:c.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==i.opacity&&(s={opacity:0});i._tooltipItems=r,i.$context=void 0,s&&i._resolveAnimations().update(i,s),t&&n.external&&n.external.call(i,{chart:i._chart,tooltip:i,replay:e})}drawCaret(t,e,i,n){const o=this.getCaretPosition(t,i,n);e.lineTo(o.x1,o.y1),e.lineTo(o.x2,o.y2),e.lineTo(o.x3,o.y3)}getCaretPosition(t,e,i){const{xAlign:n,yAlign:o}=this,{cornerRadius:s,caretSize:r}=i,{x:a,y:l}=t,{width:c,height:d}=e;let u,h,p,f,g,m;return"center"===o?(g=l+d/2,"left"===n?(u=a,h=u-r,f=g+r,m=g-r):(u=a+c,h=u+r,f=g-r,m=g+r),p=u):(h="left"===n?a+s+r:"right"===n?a+c-s-r:this.caretX,"top"===o?(f=l,g=f-r,u=h-r,p=h+r):(f=l+d,g=f+r,u=h+r,p=h-r),m=f),{x1:u,x2:h,x3:p,y1:f,y2:g,y3:m}}drawTitle(t,e,i){const n=this,o=n.title,s=o.length;let r,a,l;if(s){const c=bn(i.rtl,n.x,n.width);for(t.x=Ms(n,i.titleAlign,i),e.textAlign=c.textAlign(i.titleAlign),e.textBaseline="middle",r=je(i.titleFont),a=i.titleSpacing,e.fillStyle=i.titleColor,e.font=r.string,l=0;l<s;++l)e.fillText(o[l],c.x(t.x),t.y+r.lineHeight/2),t.y+=r.lineHeight+a,l+1===s&&(t.y+=i.titleMarginBottom-a)}}_drawColorBox(t,e,i,n,o){const s=this.labelColors[i],r=this.labelPointStyles[i],{boxHeight:a,boxWidth:l}=o,c=je(o.bodyFont),d=Ms(this,"left",o),u=n.x(d),h=a<c.lineHeight?(c.lineHeight-a)/2:0,p=e.y+h;if(o.usePointStyle){const e={radius:Math.min(l,a)/2,pointStyle:r.pointStyle,rotation:r.rotation,borderWidth:1},i=n.leftForLtr(u,l)+l/2,c=p+a/2;t.strokeStyle=o.multiKeyBackground,t.fillStyle=o.multiKeyBackground,Kt(t,e,i,c),t.strokeStyle=s.borderColor,t.fillStyle=s.backgroundColor,Kt(t,e,i,c)}else{t.lineWidth=s.borderWidth||1,t.strokeStyle=s.borderColor,t.setLineDash(s.borderDash||[]),t.lineDashOffset=s.borderDashOffset||0;const e=n.leftForLtr(u,l),i=n.leftForLtr(n.xPlus(u,1),l-2),r=Ie(s.borderRadius);Object.values(r).some(t=>0!==t)?(t.beginPath(),t.fillStyle=o.multiKeyBackground,ne(t,{x:e,y:p,w:l,h:a,radius:r}),t.fill(),t.stroke(),t.fillStyle=s.backgroundColor,t.beginPath(),ne(t,{x:i,y:p+1,w:l-2,h:a-2,radius:r}),t.fill()):(t.fillStyle=o.multiKeyBackground,t.fillRect(e,p,l,a),t.strokeRect(e,p,l,a),t.fillStyle=s.backgroundColor,t.fillRect(i,p+1,l-2,a-2))}t.fillStyle=this.labelTextColors[i]}drawBody(t,e,i){const n=this,{body:o}=n,{bodySpacing:s,bodyAlign:r,displayColors:a,boxHeight:l,boxWidth:c}=i,d=je(i.bodyFont);let u=d.lineHeight,h=0;const p=bn(i.rtl,n.x,n.width),f=function(i){e.fillText(i,p.x(t.x+h),t.y+u/2),t.y+=u+s},g=p.textAlign(r);let m,y,b,v,x,_,w;for(e.textAlign=r,e.textBaseline="middle",e.font=d.string,t.x=Ms(n,g,i),e.fillStyle=i.bodyColor,Z(n.beforeBody,f),h=a&&"right"!==g?"center"===r?c/2+1:c+2:0,v=0,_=o.length;v<_;++v){for(m=o[v],y=n.labelTextColors[v],e.fillStyle=y,Z(m.before,f),b=m.lines,a&&b.length&&(n._drawColorBox(e,t,v,p,i),u=Math.max(d.lineHeight,l)),x=0,w=b.length;x<w;++x)f(b[x]),u=d.lineHeight;Z(m.after,f)}h=0,u=d.lineHeight,Z(n.afterBody,f),t.y-=s}drawFooter(t,e,i){const n=this,o=n.footer,s=o.length;let r,a;if(s){const l=bn(i.rtl,n.x,n.width);for(t.x=Ms(n,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=l.textAlign(i.footerAlign),e.textBaseline="middle",r=je(i.footerFont),e.fillStyle=i.footerColor,e.font=r.string,a=0;a<s;++a)e.fillText(o[a],l.x(t.x),t.y+r.lineHeight/2),t.y+=r.lineHeight+i.footerSpacing}}drawBackground(t,e,i,n){const{xAlign:o,yAlign:s}=this,{x:r,y:a}=t,{width:l,height:c}=i,d=n.cornerRadius;e.fillStyle=n.backgroundColor,e.strokeStyle=n.borderColor,e.lineWidth=n.borderWidth,e.beginPath(),e.moveTo(r+d,a),"top"===s&&this.drawCaret(t,e,i,n),e.lineTo(r+l-d,a),e.quadraticCurveTo(r+l,a,r+l,a+d),"center"===s&&"right"===o&&this.drawCaret(t,e,i,n),e.lineTo(r+l,a+c-d),e.quadraticCurveTo(r+l,a+c,r+l-d,a+c),"bottom"===s&&this.drawCaret(t,e,i,n),e.lineTo(r+d,a+c),e.quadraticCurveTo(r,a+c,r,a+c-d),"center"===s&&"left"===o&&this.drawCaret(t,e,i,n),e.lineTo(r,a+d),e.quadraticCurveTo(r,a,r+d,a),e.closePath(),e.fill(),n.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this,i=e._chart,n=e.$animations,o=n&&n.x,s=n&&n.y;if(o||s){const n=vs[t.position].call(e,e._active,e._eventPosition);if(!n)return;const r=e._size=ks(e,t),a=Object.assign({},n,e._size),l=Ts(i,t,a),c=Cs(t,a,l,i);o._to===c.x&&s._to===c.y||(e.xAlign=l.xAlign,e.yAlign=l.yAlign,e.width=r.width,e.height=r.height,e.caretX=n.x,e.caretY=n.y,e._resolveAnimations().update(e,c))}}draw(t){const e=this,i=e.options.setContext(e.getContext());let n=e.opacity;if(!n)return;e._updateAnimationTarget(i);const o={width:e.width,height:e.height},s={x:e.x,y:e.y};n=Math.abs(n)<.001?0:n;const r=Ne(i.padding),a=e.title.length||e.beforeBody.length||e.body.length||e.afterBody.length||e.footer.length;i.enabled&&a&&(t.save(),t.globalAlpha=n,e.drawBackground(s,t,o,i),vn(t,i.textDirection),s.y+=r.top,e.drawTitle(s,t,i),e.drawBody(s,t,i),e.drawFooter(s,t,i),xn(t,i.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const i=this,n=i._active,o=t.map(({datasetIndex:t,index:e})=>{const n=i._chart.getDatasetMeta(t);if(!n)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:n.data[e],index:e}}),s=!tt(n,o),r=i._positionChanged(o,e);(s||r)&&(i._active=o,i._eventPosition=e,i.update(!0))}handleEvent(t,e){const i=this,n=i.options,o=i._active||[];let s=!1,r=[];"mouseout"!==t.type&&(r=i._chart.getElementsAtEventForMode(t,n.mode,n,e),n.reverse&&r.reverse());const a=i._positionChanged(r,t);return s=e||!tt(r,o)||a,s&&(i._active=r,(n.enabled||n.external)&&(i._eventPosition={x:t.x,y:t.y},i.update(!0,e))),s}_positionChanged(t,e){const{caretX:i,caretY:n,options:o}=this,s=vs[o.position].call(this,t,e);return!1!==s&&(i!==s.x||n!==s.y)}}Ps.positioners=vs;var Os={id:"tooltip",_element:Ps,positioners:vs,afterInit(t,e,i){i&&(t.tooltip=new Ps({_chart:t,options:i}))},beforeUpdate(t,e,i){t.tooltip&&t.tooltip.initialize(i)},reset(t,e,i){t.tooltip&&t.tooltip.initialize(i)},afterDraw(t){const e=t.tooltip,i={tooltip:e};!1!==t.notifyPlugins("beforeTooltipDraw",i)&&(e&&e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",i))},afterEvent(t,e){if(t.tooltip){const i=e.replay;t.tooltip.handleEvent(e.event,i)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:{beforeTitle:W,title(t){if(t.length>0){const e=t[0],i=e.chart.data.labels,n=i?i.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(n>0&&e.dataIndex<n)return i[e.dataIndex]}return""},afterTitle:W,beforeBody:W,beforeLabel:W,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const i=t.formattedValue;return V(i)||(e+=i),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:W,afterBody:W,beforeFooter:W,footer:W,afterFooter:W}},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},Es=Object.freeze({__proto__:null,Decimation:Uo,Filler:us,Legend:fs,SubTitle:bs,Title:ms,Tooltip:Os});function Ls(t,e,i){const n=t.indexOf(e);if(-1===n)return((t,e,i)=>"string"==typeof e?t.push(e)-1:isNaN(e)?null:i)(t,e,i);return n!==t.lastIndexOf(e)?i:n}class $s extends Ui{constructor(t){super(t),this._startValue=void 0,this._valueRange=0}parse(t,e){if(V(t))return null;const i=this.getLabels();return((t,e)=>null===t?null:Wt(Math.round(t),0,e))(e=isFinite(e)&&i[e]===t?e:Ls(i,t,K(e,t)),i.length-1)}determineDataLimits(){const t=this,{minDefined:e,maxDefined:i}=t.getUserBounds();let{min:n,max:o}=t.getMinMax(!0);"ticks"===t.options.bounds&&(e||(n=0),i||(o=t.getLabels().length-1)),t.min=n,t.max=o}buildTicks(){const t=this,e=t.min,i=t.max,n=t.options.offset,o=[];let s=t.getLabels();s=0===e&&i===s.length-1?s:s.slice(e,i+1),t._valueRange=Math.max(s.length-(n?0:1),1),t._startValue=t.min-(n?.5:0);for(let t=e;t<=i;t++)o.push({value:t});return o}getLabelForValue(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}configure(){const t=this;super.configure(),t.isHorizontal()||(t._reversePixels=!t._reversePixels)}getPixelForValue(t){const e=this;return"number"!=typeof t&&(t=e.parse(t)),null===t?NaN:e.getPixelForDecimal((t-e._startValue)/e._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}}function Rs(t,e,{horizontal:i,minRotation:n}){const o=$t(n),s=(i?Math.sin(o):Math.cos(o))||.001,r=.75*e*(""+t).length;return Math.min(e/s,r)}$s.id="category",$s.defaults={ticks:{callback:$s.prototype.getLabelForValue}};class Is extends Ui{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return V(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const t=this,{beginAtZero:e}=t.options,{minDefined:i,maxDefined:n}=t.getUserBounds();let{min:o,max:s}=t;const r=t=>o=i?o:t,a=t=>s=n?s:t;if(e){const t=Mt(o),e=Mt(s);t<0&&e<0?a(0):t>0&&e>0&&r(0)}o===s&&(a(s+1),e||r(o-1)),t.min=o,t.max=s}getTickLimit(){const t=this,e=t.options.ticks;let i,{maxTicksLimit:n,stepSize:o}=e;return o?i=Math.ceil(t.max/o)-Math.floor(t.min/o)+1:(i=t.computeTickLimit(),n=n||11),n&&(i=Math.min(n,i)),i}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this,e=t.options,i=e.ticks;let n=t.getTickLimit();n=Math.max(2,n);const o=function(t,e){const i=[],{bounds:n,step:o,min:s,max:r,precision:a,count:l,maxTicks:c,maxDigits:d,includeBounds:u}=t,h=o||1,p=c-1,{min:f,max:g}=e,m=!V(s),y=!V(r),b=!V(l),v=(g-f)/(d+1);let x,_,w,k,S=Dt((g-f)/p/h)*h;if(S<1e-14&&!m&&!y)return[{value:f},{value:g}];k=Math.ceil(g/S)-Math.floor(f/S),k>p&&(S=Dt(k*S/p/h)*h),V(a)||(x=Math.pow(10,a),S=Math.ceil(S*x)/x),"ticks"===n?(_=Math.floor(f/S)*S,w=Math.ceil(g/S)*S):(_=f,w=g),m&&y&&o&&Et((r-s)/o,S/1e3)?(k=Math.round(Math.min((r-s)/S,c)),S=(r-s)/k,_=s,w=r):b?(_=m?s:_,w=y?r:w,k=l-1,S=(w-_)/k):(k=(w-_)/S,k=Ot(k,Math.round(k),S/1e3)?Math.round(k):Math.ceil(k));const T=Math.max(It(S),It(_));x=Math.pow(10,V(a)?T:a),_=Math.round(_*x)/x,w=Math.round(w*x)/x;let C=0;for(m&&(u&&_!==s?(i.push({value:s}),_<s&&C++,Ot(Math.round((_+C*S)*x)/x,s,Rs(s,v,t))&&C++):_<s&&C++);C<k;++C)i.push({value:Math.round((_+C*S)*x)/x});return y&&u&&w!==r?Ot(i[i.length-1].value,r,Rs(r,v,t))?i[i.length-1].value=r:i.push({value:r}):y&&w!==r||i.push({value:w}),i}({maxTicks:n,bounds:e.bounds,min:e.min,max:e.max,precision:i.precision,step:i.stepSize,count:i.count,maxDigits:t._maxDigits(),horizontal:t.isHorizontal(),minRotation:i.minRotation||0,includeBounds:!1!==i.includeBounds},t._range||t);return"ticks"===e.bounds&&Lt(o,t,"value"),e.reverse?(o.reverse(),t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max),o}configure(){const t=this,e=t.ticks;let i=t.min,n=t.max;if(super.configure(),t.options.offset&&e.length){const t=(n-i)/Math.max(e.length-1,1)/2;i-=t,n+=t}t._startValue=i,t._endValue=n,t._valueRange=n-i}getLabelForValue(t){return Ii(t,this.chart.options.locale)}}class Ns extends Is{determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=U(t)?t:0,this.max=U(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this,e=t.isHorizontal(),i=e?t.width:t.height,n=$t(t.options.ticks.minRotation),o=(e?Math.sin(n):Math.cos(n))||.001,s=t._resolveTickFontOptions(0);return Math.ceil(i/Math.min(40,s.lineHeight/o))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}function js(t){return 1===t/Math.pow(10,Math.floor(Ct(t)))}Ns.id="linear",Ns.defaults={ticks:{callback:ji.formatters.numeric}};class zs extends Ui{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const i=Is.prototype.parse.apply(this,[t,e]);if(0!==i)return U(i)&&i>0?i:null;this._zero=!0}determineDataLimits(){const t=this,{min:e,max:i}=t.getMinMax(!0);t.min=U(e)?Math.max(0,e):null,t.max=U(i)?Math.max(0,i):null,t.options.beginAtZero&&(t._zero=!0),t.handleTickRangeOptions()}handleTickRangeOptions(){const t=this,{minDefined:e,maxDefined:i}=t.getUserBounds();let n=t.min,o=t.max;const s=t=>n=e?n:t,r=t=>o=i?o:t,a=(t,e)=>Math.pow(10,Math.floor(Ct(t))+e);n===o&&(n<=0?(s(1),r(10)):(s(a(n,-1)),r(a(o,1)))),n<=0&&s(a(o,-1)),o<=0&&r(a(n,1)),t._zero&&t.min!==t._suggestedMin&&n===a(t.min,0)&&s(a(n,-1)),t.min=n,t.max=o}buildTicks(){const t=this,e=t.options,i=function(t,e){const i=Math.floor(Ct(e.max)),n=Math.ceil(e.max/Math.pow(10,i)),o=[];let s=X(t.min,Math.pow(10,Math.floor(Ct(e.min)))),r=Math.floor(Ct(s)),a=Math.floor(s/Math.pow(10,r)),l=r<0?Math.pow(10,Math.abs(r)):1;do{o.push({value:s,major:js(s)}),++a,10===a&&(a=1,++r,l=r>=0?1:l),s=Math.round(a*Math.pow(10,r)*l)/l}while(r<i||r===i&&a<n);const c=X(t.max,s);return o.push({value:c,major:js(s)}),o}({min:t._userMin,max:t._userMax},t);return"ticks"===e.bounds&&Lt(i,t,"value"),e.reverse?(i.reverse(),t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max),i}getLabelForValue(t){return void 0===t?"0":Ii(t,this.chart.options.locale)}configure(){const t=this.min;super.configure(),this._startValue=Ct(t),this._valueRange=Ct(this.max)-Ct(t)}getPixelForValue(t){const e=this;return void 0!==t&&0!==t||(t=e.min),null===t||isNaN(t)?NaN:e.getPixelForDecimal(t===e.min?0:(Ct(t)-e._startValue)/e._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function Hs(t){const e=t.ticks;if(e.display&&t.display){const t=Ne(e.backdropPadding);return K(e.font&&e.font.size,yt.font.size)+t.height}return 0}function Fs(t,e,i,n,o){return t===n||t===o?{start:e-i/2,end:e+i/2}:t<n||t>o?{start:e-i,end:e}:{start:e,end:e+i}}function Ws(t){const e={l:0,r:t.width,t:0,b:t.height-t.paddingTop},i={},n=[],o=[],s=t.getLabels().length;for(let c=0;c<s;c++){const s=t.options.pointLabels.setContext(t.getContext(c));o[c]=s.padding;const d=t.getPointPosition(c,t.drawingArea+o[c]),u=je(s.font),h=(r=t.ctx,a=u,l=q(l=t._pointLabels[c])?l:[l],{w:Yt(r,a.string,l),h:l.length*a.lineHeight});n[c]=h;const p=t.getIndexAngle(c),f=Rt(p),g=Fs(f,d.x,h.w,0,180),m=Fs(f,d.y,h.h,90,270);g.start<e.l&&(e.l=g.start,i.l=p),g.end>e.r&&(e.r=g.end,i.r=p),m.start<e.t&&(e.t=m.start,i.t=p),m.end>e.b&&(e.b=m.end,i.b=p)}var r,a,l;t._setReductions(t.drawingArea,e,i),t._pointLabelItems=function(t,e,i){const n=[],o=t.getLabels().length,s=t.options,r=Hs(s),a=t.getDistanceFromCenterForValue(s.ticks.reverse?t.min:t.max);for(let s=0;s<o;s++){const o=0===s?r/2:0,l=t.getPointPosition(s,a+o+i[s]),c=Rt(t.getIndexAngle(s)),d=e[s],u=qs(l.y,d.h,c),h=Bs(c),p=Vs(l.x,d.w,h);n.push({x:l.x,y:u,textAlign:h,left:p,top:u,right:p+d.w,bottom:u+d.h})}return n}(t,n,o)}function Bs(t){return 0===t||180===t?"center":t<180?"left":"right"}function Vs(t,e,i){return"right"===i?t-=e:"center"===i&&(t-=e/2),t}function qs(t,e,i){return 90===i||270===i?t-=e/2:(i>270||i<90)&&(t-=e),t}function Ys(t,e,i,n){const{ctx:o}=t;if(i)o.arc(t.xCenter,t.yCenter,e,0,vt);else{let i=t.getPointPosition(0,e);o.moveTo(i.x,i.y);for(let s=1;s<n;s++)i=t.getPointPosition(s,e),o.lineTo(i.x,i.y)}}function Us(t){return Pt(t)?t:0}zs.id="logarithmic",zs.defaults={ticks:{callback:ji.formatters.logarithmic,major:{enabled:!0}}};class Xs extends Is{constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this;t.width=t.maxWidth,t.height=t.maxHeight,t.paddingTop=Hs(t.options)/2,t.xCenter=Math.floor(t.width/2),t.yCenter=Math.floor((t.height-t.paddingTop)/2),t.drawingArea=Math.min(t.height-t.paddingTop,t.width)/2}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=U(t)&&!isNaN(t)?t:0,this.max=U(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/Hs(this.options))}generateTickLabels(t){const e=this;Is.prototype.generateTickLabels.call(e,t),e._pointLabels=e.getLabels().map((t,i)=>{const n=J(e.options.pointLabels.callback,[t,i],e);return n||0===n?n:""})}fit(){const t=this,e=t.options;e.display&&e.pointLabels.display?Ws(t):t.setCenterPoint(0,0,0,0)}_setReductions(t,e,i){const n=this;let o=e.l/Math.sin(i.l),s=Math.max(e.r-n.width,0)/Math.sin(i.r),r=-e.t/Math.cos(i.t),a=-Math.max(e.b-(n.height-n.paddingTop),0)/Math.cos(i.b);o=Us(o),s=Us(s),r=Us(r),a=Us(a),n.drawingArea=Math.max(t/2,Math.min(Math.floor(t-(o+s)/2),Math.floor(t-(r+a)/2))),n.setCenterPoint(o,s,r,a)}setCenterPoint(t,e,i,n){const o=this,s=o.width-e-o.drawingArea,r=t+o.drawingArea,a=i+o.drawingArea,l=o.height-o.paddingTop-n-o.drawingArea;o.xCenter=Math.floor((r+s)/2+o.left),o.yCenter=Math.floor((a+l)/2+o.top+o.paddingTop)}getIndexAngle(t){return Ht(t*(vt/this.getLabels().length)+$t(this.options.startAngle||0))}getDistanceFromCenterForValue(t){const e=this;if(V(t))return NaN;const i=e.drawingArea/(e.max-e.min);return e.options.reverse?(e.max-t)*i:(t-e.min)*i}getValueForDistanceFromCenter(t){if(V(t))return NaN;const e=this,i=t/(e.drawingArea/(e.max-e.min));return e.options.reverse?e.max-i:e.min+i}getPointPosition(t,e){const i=this.getIndexAngle(t)-kt;return{x:Math.cos(i)*e+this.xCenter,y:Math.sin(i)*e+this.yCenter,angle:i}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:i,right:n,bottom:o}=this._pointLabelItems[t];return{left:e,top:i,right:n,bottom:o}}drawBackground(){const t=this,{backgroundColor:e,grid:{circular:i}}=t.options;if(e){const n=t.ctx;n.save(),n.beginPath(),Ys(t,t.getDistanceFromCenterForValue(t._endValue),i,t.getLabels().length),n.closePath(),n.fillStyle=e,n.fill(),n.restore()}}drawGrid(){const t=this,e=t.ctx,i=t.options,{angleLines:n,grid:o}=i,s=t.getLabels().length;let r,a,l;if(i.pointLabels.display&&function(t,e){const{ctx:i,options:{pointLabels:n}}=t;for(let o=e-1;o>=0;o--){const e=n.setContext(t.getContext(o)),s=je(e.font),{x:r,y:a,textAlign:l,left:c,top:d,right:u,bottom:h}=t._pointLabelItems[o],{backdropColor:p}=e;if(!V(p)){const t=Ne(e.backdropPadding);i.fillStyle=p,i.fillRect(c-t.left,d-t.top,u-c+t.width,h-d+t.height)}ee(i,t._pointLabels[o],r,a+s.lineHeight/2,s,{color:e.color,textAlign:l,textBaseline:"middle"})}}(t,s),o.display&&t.ticks.forEach((e,i)=>{if(0!==i){a=t.getDistanceFromCenterForValue(e.value);const n=o.setContext(t.getContext(i-1));!function(t,e,i,n){const o=t.ctx,s=e.circular,{color:r,lineWidth:a}=e;!s&&!n||!r||!a||i<0||(o.save(),o.strokeStyle=r,o.lineWidth=a,o.setLineDash(e.borderDash),o.lineDashOffset=e.borderDashOffset,o.beginPath(),Ys(t,i,s,n),o.closePath(),o.stroke(),o.restore())}(t,n,a,s)}}),n.display){for(e.save(),r=t.getLabels().length-1;r>=0;r--){const o=n.setContext(t.getContext(r)),{color:s,lineWidth:c}=o;c&&s&&(e.lineWidth=c,e.strokeStyle=s,e.setLineDash(o.borderDash),e.lineDashOffset=o.borderDashOffset,a=t.getDistanceFromCenterForValue(i.ticks.reverse?t.min:t.max),l=t.getPointPosition(r,a),e.beginPath(),e.moveTo(t.xCenter,t.yCenter),e.lineTo(l.x,l.y),e.stroke())}e.restore()}}drawBorder(){}drawLabels(){const t=this,e=t.ctx,i=t.options,n=i.ticks;if(!n.display)return;const o=t.getIndexAngle(0);let s,r;e.save(),e.translate(t.xCenter,t.yCenter),e.rotate(o),e.textAlign="center",e.textBaseline="middle",t.ticks.forEach((o,a)=>{if(0===a&&!i.reverse)return;const l=n.setContext(t.getContext(a)),c=je(l.font);if(s=t.getDistanceFromCenterForValue(t.ticks[a].value),l.showLabelBackdrop){e.font=c.string,r=e.measureText(o.label).width,e.fillStyle=l.backdropColor;const t=Ne(l.backdropPadding);e.fillRect(-r/2-t.left,-s-c.size/2-t.top,r+t.width,c.size+t.height)}ee(e,o.label,0,-s,c,{color:l.color})}),e.restore()}drawTitle(){}}Xs.id="radialLinear",Xs.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:ji.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5}},Xs.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"},Xs.descriptors={angleLines:{_fallback:"grid"}};const Ks={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Gs=Object.keys(Ks);function Qs(t,e){return t-e}function Js(t,e){if(V(e))return null;const i=t._adapter,{parser:n,round:o,isoWeekday:s}=t._parseOpts;let r=e;return"function"==typeof n&&(r=n(r)),U(r)||(r="string"==typeof n?i.parse(r,n):i.parse(r)),null===r?null:(o&&(r="week"!==o||!Pt(s)&&!0!==s?i.startOf(r,o):i.startOf(r,"isoWeek",s)),+r)}function Zs(t,e,i,n){const o=Gs.length;for(let s=Gs.indexOf(t);s<o-1;++s){const t=Ks[Gs[s]],o=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((i-e)/(o*t.size))<=n)return Gs[s]}return Gs[o-1]}function tr(t,e,i){if(i){if(i.length){const{lo:n,hi:o}=oe(i,e);t[i[n]>=e?i[n]:i[o]]=!0}}else t[e]=!0}function er(t,e,i){const n=[],o={},s=e.length;let r,a;for(r=0;r<s;++r)a=e[r],o[a]=r,n.push({value:a,major:!1});return 0!==s&&i?function(t,e,i,n){const o=t._adapter,s=+o.startOf(e[0].value,n),r=e[e.length-1].value;let a,l;for(a=s;a<=r;a=+o.add(a,1,n))l=i[a],l>=0&&(e[l].major=!0);return e}(t,n,o,i):n}class ir extends Ui{constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e){const i=t.time||(t.time={}),n=this._adapter=new no._date(t.adapters.date);st(i.displayFormats,n.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:Js(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this,e=t.options,i=t._adapter,n=e.time.unit||"day";let{min:o,max:s,minDefined:r,maxDefined:a}=t.getUserBounds();function l(t){r||isNaN(t.min)||(o=Math.min(o,t.min)),a||isNaN(t.max)||(s=Math.max(s,t.max))}r&&a||(l(t._getLabelBounds()),"ticks"===e.bounds&&"labels"===e.ticks.source||l(t.getMinMax(!1))),o=U(o)&&!isNaN(o)?o:+i.startOf(Date.now(),n),s=U(s)&&!isNaN(s)?s:+i.endOf(Date.now(),n)+1,t.min=Math.min(o,s-1),t.max=Math.max(o+1,s)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){const t=this,e=t.options,i=e.time,n=e.ticks,o="labels"===n.source?t.getLabelTimestamps():t._generate();"ticks"===e.bounds&&o.length&&(t.min=t._userMin||o[0],t.max=t._userMax||o[o.length-1]);const s=t.min,r=ae(o,s,t.max);return t._unit=i.unit||(n.autoSkip?Zs(i.minUnit,t.min,t.max,t._getLabelCapacity(s)):function(t,e,i,n,o){for(let s=Gs.length-1;s>=Gs.indexOf(i);s--){const i=Gs[s];if(Ks[i].common&&t._adapter.diff(o,n,i)>=e-1)return i}return Gs[i?Gs.indexOf(i):0]}(t,r.length,i.minUnit,t.min,t.max)),t._majorUnit=n.major.enabled&&"year"!==t._unit?function(t){for(let e=Gs.indexOf(t)+1,i=Gs.length;e<i;++e)if(Ks[Gs[e]].common)return Gs[e]}(t._unit):void 0,t.initOffsets(o),e.reverse&&r.reverse(),er(t,r,t._majorUnit)}initOffsets(t){const e=this;let i,n,o=0,s=0;e.options.offset&&t.length&&(i=e.getDecimalForValue(t[0]),o=1===t.length?1-i:(e.getDecimalForValue(t[1])-i)/2,n=e.getDecimalForValue(t[t.length-1]),s=1===t.length?n:(n-e.getDecimalForValue(t[t.length-2]))/2);const r=t.length<3?.5:.25;o=Wt(o,0,r),s=Wt(s,0,r),e._offsets={start:o,end:s,factor:1/(o+1+s)}}_generate(){const t=this,e=t._adapter,i=t.min,n=t.max,o=t.options,s=o.time,r=s.unit||Zs(s.minUnit,i,n,t._getLabelCapacity(i)),a=K(s.stepSize,1),l="week"===r&&s.isoWeekday,c=Pt(l)||!0===l,d={};let u,h,p=i;if(c&&(p=+e.startOf(p,"isoWeek",l)),p=+e.startOf(p,c?"day":r),e.diff(n,i,r)>1e5*a)throw new Error(i+" and "+n+" are too far apart with stepSize of "+a+" "+r);const f="data"===o.ticks.source&&t.getDataTimestamps();for(u=p,h=0;u<n;u=+e.add(u,a,r),h++)tr(d,u,f);return u!==n&&"ticks"!==o.bounds&&1!==h||tr(d,u,f),Object.keys(d).sort((t,e)=>t-e).map(t=>+t)}getLabelForValue(t){const e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}_tickFormatFunction(t,e,i,n){const o=this,s=o.options,r=s.time.displayFormats,a=o._unit,l=o._majorUnit,c=a&&r[a],d=l&&r[l],u=i[e],h=l&&d&&u&&u.major,p=o._adapter.format(t,n||(h?d:c)),f=s.ticks.callback;return f?J(f,[p,e,i],o):p}generateTickLabels(t){let e,i,n;for(e=0,i=t.length;e<i;++e)n=t[e],n.label=this._tickFormatFunction(n.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,i=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+i)*e.factor)}getValueForPixel(t){const e=this,i=e._offsets,n=e.getDecimalForPixel(t)/i.factor-i.end;return e.min+n*(e.max-e.min)}_getLabelSize(t){const e=this.options.ticks,i=this.ctx.measureText(t).width,n=$t(this.isHorizontal()?e.maxRotation:e.minRotation),o=Math.cos(n),s=Math.sin(n),r=this._resolveTickFontOptions(0).size;return{w:i*o+r*s,h:i*s+r*o}}_getLabelCapacity(t){const e=this,i=e.options.time,n=i.displayFormats,o=n[i.unit]||n.millisecond,s=e._tickFormatFunction(t,0,er(e,[t],e._majorUnit),o),r=e._getLabelSize(s),a=Math.floor(e.isHorizontal()?e.width/r.w:e.height/r.h)-1;return a>0?a:1}getDataTimestamps(){const t=this;let e,i,n=t._cache.data||[];if(n.length)return n;const o=t.getMatchingVisibleMetas();if(t._normalized&&o.length)return t._cache.data=o[0].controller.getAllParsedValues(t);for(e=0,i=o.length;e<i;++e)n=n.concat(o[e].controller.getAllParsedValues(t));return t._cache.data=t.normalize(n)}getLabelTimestamps(){const t=this,e=t._cache.labels||[];let i,n;if(e.length)return e;const o=t.getLabels();for(i=0,n=o.length;i<n;++i)e.push(Js(t,o[i]));return t._cache.labels=t._normalized?e:t.normalize(e)}normalize(t){return ue(t.sort(Qs))}}function nr(t,e,i){let n,o,s,r,a=0,l=t.length-1;i?(e>=t[a].pos&&e<=t[l].pos&&({lo:a,hi:l}=se(t,"pos",e)),({pos:n,time:s}=t[a]),({pos:o,time:r}=t[l])):(e>=t[a].time&&e<=t[l].time&&({lo:a,hi:l}=se(t,"time",e)),({time:n,pos:s}=t[a]),({time:o,pos:r}=t[l]));const c=o-n;return c?s+(r-s)*(e-n)/c:s}ir.id="time",ir.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class or extends ir{constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this,e=t._getTimestampsForTable(),i=t._table=t.buildLookupTable(e);t._minPos=nr(i,t.min),t._tableRange=nr(i,t.max)-t._minPos,super.initOffsets(e)}buildLookupTable(t){const{min:e,max:i}=this,n=[],o=[];let s,r,a,l,c;for(s=0,r=t.length;s<r;++s)l=t[s],l>=e&&l<=i&&n.push(l);if(n.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(s=0,r=n.length;s<r;++s)c=n[s+1],a=n[s-1],l=n[s],Math.round((c+a)/2)!==l&&o.push({time:l,pos:s/(r-1)});return o}_getTimestampsForTable(){const t=this;let e=t._cache.all||[];if(e.length)return e;const i=t.getDataTimestamps(),n=t.getLabelTimestamps();return e=i.length&&n.length?t.normalize(i.concat(n)):i.length?i:n,e=t._cache.all=e,e}getDecimalForValue(t){return(nr(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this,i=e._offsets,n=e.getDecimalForPixel(t)/i.factor-i.end;return nr(e._table,n*e._tableRange+e._minPos,!0)}}or.id="timeseries",or.defaults=ir.defaults;var sr=Object.freeze({__proto__:null,CategoryScale:$s,LinearScale:Ns,LogarithmicScale:zs,RadialLinearScale:Xs,TimeScale:ir,TimeSeriesScale:or});return Zn.register(yo,sr,Vo,Es),Zn.helpers={...Dn},Zn._adapters=no,Zn.Animation=vi,Zn.Animations=_i,Zn.animator=r,Zn.controllers=Pn.controllers.items,Zn.DatasetController=Li,Zn.Element=$i,Zn.elements=Vo,Zn.Interaction=Pe,Zn.layouts=Qe,Zn.platforms=pi,Zn.Scale=Ui,Zn.Ticks=ji,Object.assign(Zn,yo,sr,Vo,Es,pi),Zn.Chart=Zn,"undefined"!=typeof window&&(window.Chart=Zn),Zn})),$(document).ready((function(){$(".hidden__close").on("click",(function(){$(this).parent().parent().parent().hide("slow"),console.log("1")})),$(".header__location-now").on("click",(function(){$(this).parent().find(".header__location-hidden").show("slow"),console.log("20")})),$(".hidden__cities-link").on("click",(function(){$(this).parent().parent().parent().find(".hidden__cities-link--active").removeClass("hidden__cities-link--active"),$(this).addClass("hidden__cities-link--active"),t=$(this).text(),console.log(t),$(".header__location-now").text($(this).text())})),$(".reviews__slider").slick({slidesToShow:2,slidesToScroll:1,responsive:[{breakpoint:1024,settings:{slidesToShow:1,slidesToScroll:1}}]}),$(".answers__list-title").on("click",(function(){$(this).parent().find(".answers__text").slideToggle("slow"),$(this).parent().find(".answers__chevron").toggleClass("answers__chevron--opened")})),$(".aside__double-list").on("click",(function(){$(this).addClass("active"),$(this).next().removeClass("active"),$(".left-block__map").hide(),$(".left-block__hide").show()})),$(".aside__double-map").on("click",(function(){$(this).addClass("active"),$(this).prev().removeClass("active"),$(".left-block__map").show(),$(".left-block__hide").hide()}));new Pikaday({field:document.getElementById("datepicker"),format:"D.M.YYYY",i18n:{previousMonth:"Ð¿ÑÐµÐ´ÑÐ´ÑÑÐ¸Ð¹ Ð¼ÐµÑÑÑ",nextMonth:"ÑÐ»ÐµÐ´ÑÑÑÐ¸Ð¹ Ð¼ÐµÑÑÑ",months:["Ð¯Ð½Ð²Ð°ÑÑ","Ð¤ÐµÐ²ÑÐ°Ð»Ñ","ÐÐ°ÑÑ","ÐÐ¿ÑÐµÐ»Ñ","ÐÐ°Ð¹","ÐÑÐ½Ñ","ÐÑÐ»Ñ ","ÐÐ²Ð³ÑÑÑ","Ð¡ÐµÐ½ÑÑÐ±ÑÑ","ÐÐºÑÑÐ±ÑÑ","ÐÐ¾ÑÐ±ÑÑ","ÐÐµÐºÐ°Ð±ÑÑ "],weekdays:["ÐÐ¾ÑÐºÑÐµÑÐµÐ½ÑÐµ","ÐÐ¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸Ðº","ÐÑÐ¾ÑÐ½Ð¸Ðº","Ð¡ÑÐµÐ´Ð°","Ð§ÐµÑÐ²ÐµÑÐ³","ÐÑÑÐ½Ð¸ÑÐ°","Ð¡ÑÐ±Ð±Ð¾ÑÐ°"],weekdaysShort:["ÐÑ","ÐÐ½","ÐÑ","Ð¡Ñ","Ð§Ñ","ÐÑ","Ð¡Ð±"]},firstDay:1,toString:(t,e)=>`${t.getDate()}.${t.getMonth()+1}.${t.getFullYear()}`,parse(t,e){const i=t.split("."),n=parseInt(i[0],10),o=parseInt(i[1],10)-1,s=parseInt(i[2],10);return new Date(s,o,n)}});for(var e=$(".chart-data__period"),i=[],n=e.length-1;n>=0;n--)i.push($(e[n]).text());var o=$(".chart-data__buy"),s=[];for(n=o.length-1;n>=0;n--)s.push(parseFloat($(o[n]).text().replace(/,/,".")));var r=$(".chart-data__sell"),a=[];for(n=r.length-1;n>=0;n--)a.push(parseFloat($(r[n]).text().replace(/,/,".")));const l={type:"line",data:{labels:i,datasets:[{label:"ÐÐ¾ÐºÑÐ¿ÐºÐ°",data:s,fill:!1,borderColor:"#FE7F0B",tension:.1},{label:"ÐÑÐ¾Ð´Ð°Ð¶Ð°",data:a,fill:!1,borderColor:"#1F78B4",tension:.1}]},options:{responsive:!0}};new Chart(document.getElementById("myChart"),config=l);$(".header__burger").on("click",(function(){$(".services__wrapper").fadeToggle()})),$(".services__toggle").on("click",(function(){$(".services__wrapper").slideToggle()})),$(window).on("resize",(function(){$(this).width()>=1200?(console.log("show"),$(".services__wrapper").show().css("display","flex")):(console.log("hide"),$(".services__wrapper").hide())})),$(window).width()<768&&$(".aside__double").appendTo("#aside-double-mobile"),$(window).resize((function(){$(window).width()<768?$(".aside__double").appendTo("#aside-double-mobile"):$(".aside__double").appendTo("#aside-double")})),$(window).width()<768&&$("#aside-bank .aside").appendTo("#aside-bank-mobile"),$(window).resize((function(){$(window).width()<768?$("#aside-bank .aside").appendTo("#aside-bank-mobile"):$("#aside-bank-mobile .aside").appendTo("#aside-bank")}))}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
